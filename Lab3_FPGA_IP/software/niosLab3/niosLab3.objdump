
niosLab3.elf:     file format elf32-littlenios2
niosLab3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00004718 memsz 0x00004718 flags r-x
    LOAD off    0x00005738 vaddr 0x00024738 paddr 0x00025164 align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006b90 vaddr 0x00025b90 paddr 0x00025b90 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00006164  2**0
                  CONTENTS
  2 .text         000046c8  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  000246e8  000246e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  00024738  00025164  00005738  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00025b90  00025b90  00006b90  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00025bd4  00025bd4  00006164  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000888  00000000  00000000  00006188  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000146eb  00000000  00000000  00006a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005230  00000000  00000000  0001b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005e80  00000000  00000000  0002032b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001210  00000000  00000000  000261ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f25  00000000  00000000  000273bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  000292e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0002ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d0  00000000  00000000  0002ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000302be  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000302c1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000302cd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000302ce  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000302cf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000302e5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002b  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e8b  00000000  00000000  00030323  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003df09  00000000  00000000  000351ae  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
000246e8 l    d  .rodata	00000000 .rodata
00024738 l    d  .rwdata	00000000 .rwdata
00025b90 l    d  .bss	00000000 .bss
00025bd4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab3_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000201fc l     F .text	00000008 __fp_unlock
00020210 l     F .text	0000019c __sinit.part.1
000203ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00024738 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00022e9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022fb0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00022fdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000230d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000231b8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000232a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023480 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00025160 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000236f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023830 l     F .text	00000034 alt_dev_reg
0002510c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023b30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023cf0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00023e50 l     F .text	0000003c alt_get_errno
00023e8c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00022c6c g     F .text	00000054 _isatty_r
000233bc g     F .text	0000007c alt_main
00020090 g     F .text	000000c0 _puts_r
00022994 g     F .text	00000060 _lseek_r
00025164 g       *ABS*	00000000 __flash_rwdata_start
00025bd4 g       *ABS*	00000000 __alt_heap_start
00021f48 g     F .text	0000005c __sseek
0002055c g     F .text	00000010 __sinit
000203b4 g     F .text	00000078 __sfmoreglue
0002345c g     F .text	00000024 __malloc_unlock
00021634 g     F .text	0000015c memmove
00020544 g     F .text	00000018 _cleanup
000240d4 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022c10 g     F .text	0000005c _fstat_r
00025b9c g     O .bss	00000004 errno
00021ec4 g     F .text	00000008 __seofread
00025ba4 g     O .bss	00000004 alt_argv
0002d138 g       *ABS*	00000000 _gp
00024f8c g     O .rwdata	00000180 alt_fd_list
000240f8 g     F .text	00000090 alt_find_dev
000214ec g     F .text	00000148 memcpy
00020204 g     F .text	0000000c _cleanup_r
00023dd4 g     F .text	0000007c alt_io_redirect
000246e8 g       *ABS*	00000000 __DTOR_END__
00020150 g     F .text	00000014 puts
00023990 g     F .text	000000ec altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00022db8 g     F .text	00000064 .hidden __udivsi3
0002310c g     F .text	000000ac isatty
00025b98 g     O .bss	00000004 __malloc_top_pad
000205ac g     F .text	000004c8 __sfvwrite_r
00021e1c g     F .text	00000054 _sbrk_r
00022bb0 g     F .text	00000060 _read_r
00025158 g     O .rwdata	00000004 alt_max_fd
000221b4 g     F .text	000000f0 _fclose_r
00022530 g     F .text	00000030 fflush
00025b94 g     O .bss	00000004 __malloc_max_sbrked_mem
000232e0 g     F .text	000000dc lseek
00025138 g     O .rwdata	00000004 _global_impure_ptr
000218b8 g     F .text	00000564 _realloc_r
00025bd4 g       *ABS*	00000000 __bss_end
0002057c g     F .text	00000018 __fp_lock_all
00024f64 g     O .rwdata	00000028 alt_dev_null
00023b10 g     F .text	00000020 alt_dcache_flush_all
00025164 g       *ABS*	00000000 __ram_rwdata_end
00025150 g     O .rwdata	00000008 alt_dev_list
00023730 g     F .text	00000100 write
00024738 g       *ABS*	00000000 __ram_rodata_end
00023018 g     F .text	000000b8 fstat
00022e1c g     F .text	00000058 .hidden __umodsi3
00025bd4 g       *ABS*	00000000 end
000246e8 g       *ABS*	00000000 __CTOR_LIST__
0003d4c0 g       *ABS*	00000000 __alt_stack_pointer
00023a7c g     F .text	00000094 altera_avalon_jtag_uart_write
0002056c g     F .text	00000004 __sfp_lock_acquire
00021408 g     F .text	000000e4 memchr
00022684 g     F .text	00000310 _free_r
00024534 g     F .text	00000180 __call_exitprocs
00025140 g     O .rwdata	00000004 __malloc_sbrk_base
00020020 g     F .text	0000003c _start
000234bc g     F .text	00000104 read
0002389c g     F .text	00000034 alt_sys_init
0002441c g     F .text	00000118 __register_exitproc
00022e74 g     F .text	00000028 .hidden __mulsi3
00024738 g       *ABS*	00000000 __ram_rwdata_start
000246e8 g       *ABS*	00000000 __ram_rodata_start
00025bac g     O .bss	00000028 __malloc_current_mallinfo
000238d0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024290 g     F .text	000000c4 alt_get_fd
00022160 g     F .text	00000054 _close_r
000243a0 g     F .text	0000007c memcmp
00025bd4 g       *ABS*	00000000 __alt_stack_base
0002200c g     F .text	00000154 __swsetup_r
0002042c g     F .text	00000118 __sfp
00024b5c g     O .rwdata	00000408 __malloc_av_
00020578 g     F .text	00000004 __sinit_lock_release
00021e70 g     F .text	00000054 __sread
00024188 g     F .text	00000108 alt_find_file
00023b6c g     F .text	000000a4 alt_dev_llist_insert
00023438 g     F .text	00000024 __malloc_lock
00023644 g     F .text	000000b0 sbrk
000224d4 g     F .text	0000005c _fflush_r
00025b90 g       *ABS*	00000000 __bss_start
00021790 g     F .text	00000128 memset
0002005c g     F .text	00000034 main
00025ba8 g     O .bss	00000004 alt_envp
00025b90 g     O .bss	00000004 __malloc_max_total_mem
00023930 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00021fa4 g     F .text	00000008 __sclose
0003d4c0 g       *ABS*	00000000 __alt_heap_limit
000222a4 g     F .text	00000014 fclose
00020bfc g     F .text	0000080c _malloc_r
0002515c g     O .rwdata	00000004 alt_errno
00020a74 g     F .text	000000c4 _fwalk
00022cc0 g     F .text	00000084 .hidden __divsi3
00022560 g     F .text	00000124 _malloc_trim_r
000246e8 g       *ABS*	00000000 __CTOR_END__
000246e8 g       *ABS*	00000000 __flash_rodata_start
000246e8 g       *ABS*	00000000 __DTOR_LIST__
00023864 g     F .text	00000038 alt_irq_init
000235c0 g     F .text	00000084 alt_release_fd
00024354 g     F .text	00000014 atexit
00021fac g     F .text	00000060 _write_r
0002513c g     O .rwdata	00000004 _impure_ptr
00025ba0 g     O .bss	00000004 alt_argc
000222b8 g     F .text	0000021c __sflush_r
00023c70 g     F .text	00000060 _do_dtors
00020594 g     F .text	00000018 __fp_unlock_all
00025148 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025164 g       *ABS*	00000000 _edata
00025bd4 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00021ecc g     F .text	0000007c __swrite
00025144 g     O .rwdata	00000004 __malloc_trim_threshold
00024368 g     F .text	00000038 exit
00020b38 g     F .text	000000c4 _fwalk_reent
00022d44 g     F .text	00000074 .hidden __modsi3
0003d4c0 g       *ABS*	00000000 __alt_data_end
00020570 g     F .text	00000004 __sfp_lock_release
000246b4 g     F .text	00000034 _exit
000229f4 g     F .text	000001bc __smakebuf_r
00020164 g     F .text	00000098 strlen
00023f78 g     F .text	0000015c open
00023cd0 g     F .text	00000020 alt_icache_flush_all
00023c10 g     F .text	00000060 _do_ctors
00022ed8 g     F .text	000000d8 close
00023220 g     F .text	00000084 alt_load
00020574 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6b44e14 	ori	gp,gp,53560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	1096e414 	ori	r2,r2,23440

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18d6f514 	ori	r3,r3,23508

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00232200 	call	23220 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00233bc0 	call	233bc <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <alt_after_alt_main>

0002005c <main>:
 */

#include <stdio.h>

int main()
{
   2005c:	defffe04 	addi	sp,sp,-8
   20060:	dfc00115 	stw	ra,4(sp)
   20064:	df000015 	stw	fp,0(sp)
   20068:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   2006c:	010000b4 	movhi	r4,2
   20070:	2111ba04 	addi	r4,r4,18152
   20074:	00201500 	call	20150 <puts>

  return 0;
   20078:	0005883a 	mov	r2,zero
}
   2007c:	e037883a 	mov	sp,fp
   20080:	dfc00117 	ldw	ra,4(sp)
   20084:	df000017 	ldw	fp,0(sp)
   20088:	dec00204 	addi	sp,sp,8
   2008c:	f800283a 	ret

00020090 <_puts_r>:
   20090:	defff604 	addi	sp,sp,-40
   20094:	dc000715 	stw	r16,28(sp)
   20098:	2021883a 	mov	r16,r4
   2009c:	2809883a 	mov	r4,r5
   200a0:	dc400815 	stw	r17,32(sp)
   200a4:	dfc00915 	stw	ra,36(sp)
   200a8:	2823883a 	mov	r17,r5
   200ac:	00201640 	call	20164 <strlen>
   200b0:	10c00044 	addi	r3,r2,1
   200b4:	d8800115 	stw	r2,4(sp)
   200b8:	008000b4 	movhi	r2,2
   200bc:	1091bf04 	addi	r2,r2,18172
   200c0:	d8800215 	stw	r2,8(sp)
   200c4:	00800044 	movi	r2,1
   200c8:	d8800315 	stw	r2,12(sp)
   200cc:	00800084 	movi	r2,2
   200d0:	dc400015 	stw	r17,0(sp)
   200d4:	d8c00615 	stw	r3,24(sp)
   200d8:	dec00415 	stw	sp,16(sp)
   200dc:	d8800515 	stw	r2,20(sp)
   200e0:	80000226 	beq	r16,zero,200ec <_puts_r+0x5c>
   200e4:	80800e17 	ldw	r2,56(r16)
   200e8:	10001426 	beq	r2,zero,2013c <_puts_r+0xac>
   200ec:	81400217 	ldw	r5,8(r16)
   200f0:	2880030b 	ldhu	r2,12(r5)
   200f4:	10c8000c 	andi	r3,r2,8192
   200f8:	1800061e 	bne	r3,zero,20114 <_puts_r+0x84>
   200fc:	29001917 	ldw	r4,100(r5)
   20100:	00f7ffc4 	movi	r3,-8193
   20104:	10880014 	ori	r2,r2,8192
   20108:	20c6703a 	and	r3,r4,r3
   2010c:	2880030d 	sth	r2,12(r5)
   20110:	28c01915 	stw	r3,100(r5)
   20114:	d9800404 	addi	r6,sp,16
   20118:	8009883a 	mov	r4,r16
   2011c:	00205ac0 	call	205ac <__sfvwrite_r>
   20120:	1000091e 	bne	r2,zero,20148 <_puts_r+0xb8>
   20124:	00800284 	movi	r2,10
   20128:	dfc00917 	ldw	ra,36(sp)
   2012c:	dc400817 	ldw	r17,32(sp)
   20130:	dc000717 	ldw	r16,28(sp)
   20134:	dec00a04 	addi	sp,sp,40
   20138:	f800283a 	ret
   2013c:	8009883a 	mov	r4,r16
   20140:	002055c0 	call	2055c <__sinit>
   20144:	003fe906 	br	200ec <_puts_r+0x5c>
   20148:	00bfffc4 	movi	r2,-1
   2014c:	003ff606 	br	20128 <_puts_r+0x98>

00020150 <puts>:
   20150:	008000b4 	movhi	r2,2
   20154:	10944f04 	addi	r2,r2,20796
   20158:	200b883a 	mov	r5,r4
   2015c:	11000017 	ldw	r4,0(r2)
   20160:	00200901 	jmpi	20090 <_puts_r>

00020164 <strlen>:
   20164:	208000cc 	andi	r2,r4,3
   20168:	10002026 	beq	r2,zero,201ec <strlen+0x88>
   2016c:	20800007 	ldb	r2,0(r4)
   20170:	10002026 	beq	r2,zero,201f4 <strlen+0x90>
   20174:	2005883a 	mov	r2,r4
   20178:	00000206 	br	20184 <strlen+0x20>
   2017c:	10c00007 	ldb	r3,0(r2)
   20180:	18001826 	beq	r3,zero,201e4 <strlen+0x80>
   20184:	10800044 	addi	r2,r2,1
   20188:	10c000cc 	andi	r3,r2,3
   2018c:	183ffb1e 	bne	r3,zero,2017c <strlen+0x18>
   20190:	10c00017 	ldw	r3,0(r2)
   20194:	01ffbff4 	movhi	r7,65279
   20198:	39ffbfc4 	addi	r7,r7,-257
   2019c:	00ca303a 	nor	r5,zero,r3
   201a0:	01a02074 	movhi	r6,32897
   201a4:	19c7883a 	add	r3,r3,r7
   201a8:	31a02004 	addi	r6,r6,-32640
   201ac:	1946703a 	and	r3,r3,r5
   201b0:	1986703a 	and	r3,r3,r6
   201b4:	1800091e 	bne	r3,zero,201dc <strlen+0x78>
   201b8:	10800104 	addi	r2,r2,4
   201bc:	10c00017 	ldw	r3,0(r2)
   201c0:	19cb883a 	add	r5,r3,r7
   201c4:	00c6303a 	nor	r3,zero,r3
   201c8:	28c6703a 	and	r3,r5,r3
   201cc:	1986703a 	and	r3,r3,r6
   201d0:	183ff926 	beq	r3,zero,201b8 <strlen+0x54>
   201d4:	00000106 	br	201dc <strlen+0x78>
   201d8:	10800044 	addi	r2,r2,1
   201dc:	10c00007 	ldb	r3,0(r2)
   201e0:	183ffd1e 	bne	r3,zero,201d8 <strlen+0x74>
   201e4:	1105c83a 	sub	r2,r2,r4
   201e8:	f800283a 	ret
   201ec:	2005883a 	mov	r2,r4
   201f0:	003fe706 	br	20190 <strlen+0x2c>
   201f4:	0005883a 	mov	r2,zero
   201f8:	f800283a 	ret

000201fc <__fp_unlock>:
   201fc:	0005883a 	mov	r2,zero
   20200:	f800283a 	ret

00020204 <_cleanup_r>:
   20204:	014000b4 	movhi	r5,2
   20208:	29486d04 	addi	r5,r5,8628
   2020c:	0020b381 	jmpi	20b38 <_fwalk_reent>

00020210 <__sinit.part.1>:
   20210:	defff704 	addi	sp,sp,-36
   20214:	00c000b4 	movhi	r3,2
   20218:	dfc00815 	stw	ra,32(sp)
   2021c:	ddc00715 	stw	r23,28(sp)
   20220:	dd800615 	stw	r22,24(sp)
   20224:	dd400515 	stw	r21,20(sp)
   20228:	dd000415 	stw	r20,16(sp)
   2022c:	dcc00315 	stw	r19,12(sp)
   20230:	dc800215 	stw	r18,8(sp)
   20234:	dc400115 	stw	r17,4(sp)
   20238:	dc000015 	stw	r16,0(sp)
   2023c:	18c08104 	addi	r3,r3,516
   20240:	24000117 	ldw	r16,4(r4)
   20244:	20c00f15 	stw	r3,60(r4)
   20248:	2080bb04 	addi	r2,r4,748
   2024c:	00c000c4 	movi	r3,3
   20250:	20c0b915 	stw	r3,740(r4)
   20254:	2080ba15 	stw	r2,744(r4)
   20258:	2000b815 	stw	zero,736(r4)
   2025c:	05c00204 	movi	r23,8
   20260:	00800104 	movi	r2,4
   20264:	2025883a 	mov	r18,r4
   20268:	b80d883a 	mov	r6,r23
   2026c:	81001704 	addi	r4,r16,92
   20270:	000b883a 	mov	r5,zero
   20274:	80000015 	stw	zero,0(r16)
   20278:	80000115 	stw	zero,4(r16)
   2027c:	80000215 	stw	zero,8(r16)
   20280:	8080030d 	sth	r2,12(r16)
   20284:	80001915 	stw	zero,100(r16)
   20288:	8000038d 	sth	zero,14(r16)
   2028c:	80000415 	stw	zero,16(r16)
   20290:	80000515 	stw	zero,20(r16)
   20294:	80000615 	stw	zero,24(r16)
   20298:	00217900 	call	21790 <memset>
   2029c:	058000b4 	movhi	r22,2
   202a0:	94400217 	ldw	r17,8(r18)
   202a4:	054000b4 	movhi	r21,2
   202a8:	050000b4 	movhi	r20,2
   202ac:	04c000b4 	movhi	r19,2
   202b0:	b5879c04 	addi	r22,r22,7792
   202b4:	ad47b304 	addi	r21,r21,7884
   202b8:	a507d204 	addi	r20,r20,8008
   202bc:	9cc7e904 	addi	r19,r19,8100
   202c0:	85800815 	stw	r22,32(r16)
   202c4:	85400915 	stw	r21,36(r16)
   202c8:	85000a15 	stw	r20,40(r16)
   202cc:	84c00b15 	stw	r19,44(r16)
   202d0:	84000715 	stw	r16,28(r16)
   202d4:	00800284 	movi	r2,10
   202d8:	8880030d 	sth	r2,12(r17)
   202dc:	00800044 	movi	r2,1
   202e0:	b80d883a 	mov	r6,r23
   202e4:	89001704 	addi	r4,r17,92
   202e8:	000b883a 	mov	r5,zero
   202ec:	88000015 	stw	zero,0(r17)
   202f0:	88000115 	stw	zero,4(r17)
   202f4:	88000215 	stw	zero,8(r17)
   202f8:	88001915 	stw	zero,100(r17)
   202fc:	8880038d 	sth	r2,14(r17)
   20300:	88000415 	stw	zero,16(r17)
   20304:	88000515 	stw	zero,20(r17)
   20308:	88000615 	stw	zero,24(r17)
   2030c:	00217900 	call	21790 <memset>
   20310:	94000317 	ldw	r16,12(r18)
   20314:	00800484 	movi	r2,18
   20318:	8c400715 	stw	r17,28(r17)
   2031c:	8d800815 	stw	r22,32(r17)
   20320:	8d400915 	stw	r21,36(r17)
   20324:	8d000a15 	stw	r20,40(r17)
   20328:	8cc00b15 	stw	r19,44(r17)
   2032c:	8080030d 	sth	r2,12(r16)
   20330:	00800084 	movi	r2,2
   20334:	80000015 	stw	zero,0(r16)
   20338:	80000115 	stw	zero,4(r16)
   2033c:	80000215 	stw	zero,8(r16)
   20340:	80001915 	stw	zero,100(r16)
   20344:	8080038d 	sth	r2,14(r16)
   20348:	80000415 	stw	zero,16(r16)
   2034c:	80000515 	stw	zero,20(r16)
   20350:	80000615 	stw	zero,24(r16)
   20354:	b80d883a 	mov	r6,r23
   20358:	000b883a 	mov	r5,zero
   2035c:	81001704 	addi	r4,r16,92
   20360:	00217900 	call	21790 <memset>
   20364:	00800044 	movi	r2,1
   20368:	84000715 	stw	r16,28(r16)
   2036c:	85800815 	stw	r22,32(r16)
   20370:	85400915 	stw	r21,36(r16)
   20374:	85000a15 	stw	r20,40(r16)
   20378:	84c00b15 	stw	r19,44(r16)
   2037c:	90800e15 	stw	r2,56(r18)
   20380:	dfc00817 	ldw	ra,32(sp)
   20384:	ddc00717 	ldw	r23,28(sp)
   20388:	dd800617 	ldw	r22,24(sp)
   2038c:	dd400517 	ldw	r21,20(sp)
   20390:	dd000417 	ldw	r20,16(sp)
   20394:	dcc00317 	ldw	r19,12(sp)
   20398:	dc800217 	ldw	r18,8(sp)
   2039c:	dc400117 	ldw	r17,4(sp)
   203a0:	dc000017 	ldw	r16,0(sp)
   203a4:	dec00904 	addi	sp,sp,36
   203a8:	f800283a 	ret

000203ac <__fp_lock>:
   203ac:	0005883a 	mov	r2,zero
   203b0:	f800283a 	ret

000203b4 <__sfmoreglue>:
   203b4:	defffc04 	addi	sp,sp,-16
   203b8:	dc800215 	stw	r18,8(sp)
   203bc:	2825883a 	mov	r18,r5
   203c0:	dc000015 	stw	r16,0(sp)
   203c4:	01401a04 	movi	r5,104
   203c8:	2021883a 	mov	r16,r4
   203cc:	913fffc4 	addi	r4,r18,-1
   203d0:	dfc00315 	stw	ra,12(sp)
   203d4:	dc400115 	stw	r17,4(sp)
   203d8:	0022e740 	call	22e74 <__mulsi3>
   203dc:	8009883a 	mov	r4,r16
   203e0:	11401d04 	addi	r5,r2,116
   203e4:	1023883a 	mov	r17,r2
   203e8:	0020bfc0 	call	20bfc <_malloc_r>
   203ec:	1021883a 	mov	r16,r2
   203f0:	10000726 	beq	r2,zero,20410 <__sfmoreglue+0x5c>
   203f4:	11000304 	addi	r4,r2,12
   203f8:	10000015 	stw	zero,0(r2)
   203fc:	14800115 	stw	r18,4(r2)
   20400:	11000215 	stw	r4,8(r2)
   20404:	89801a04 	addi	r6,r17,104
   20408:	000b883a 	mov	r5,zero
   2040c:	00217900 	call	21790 <memset>
   20410:	8005883a 	mov	r2,r16
   20414:	dfc00317 	ldw	ra,12(sp)
   20418:	dc800217 	ldw	r18,8(sp)
   2041c:	dc400117 	ldw	r17,4(sp)
   20420:	dc000017 	ldw	r16,0(sp)
   20424:	dec00404 	addi	sp,sp,16
   20428:	f800283a 	ret

0002042c <__sfp>:
   2042c:	defffb04 	addi	sp,sp,-20
   20430:	dc000015 	stw	r16,0(sp)
   20434:	040000b4 	movhi	r16,2
   20438:	84144e04 	addi	r16,r16,20792
   2043c:	dcc00315 	stw	r19,12(sp)
   20440:	2027883a 	mov	r19,r4
   20444:	81000017 	ldw	r4,0(r16)
   20448:	dfc00415 	stw	ra,16(sp)
   2044c:	dc800215 	stw	r18,8(sp)
   20450:	20800e17 	ldw	r2,56(r4)
   20454:	dc400115 	stw	r17,4(sp)
   20458:	1000021e 	bne	r2,zero,20464 <__sfp+0x38>
   2045c:	00202100 	call	20210 <__sinit.part.1>
   20460:	81000017 	ldw	r4,0(r16)
   20464:	2480b804 	addi	r18,r4,736
   20468:	047fffc4 	movi	r17,-1
   2046c:	91000117 	ldw	r4,4(r18)
   20470:	94000217 	ldw	r16,8(r18)
   20474:	213fffc4 	addi	r4,r4,-1
   20478:	20000a16 	blt	r4,zero,204a4 <__sfp+0x78>
   2047c:	8080030f 	ldh	r2,12(r16)
   20480:	10000c26 	beq	r2,zero,204b4 <__sfp+0x88>
   20484:	80c01d04 	addi	r3,r16,116
   20488:	00000206 	br	20494 <__sfp+0x68>
   2048c:	18bfe60f 	ldh	r2,-104(r3)
   20490:	10000826 	beq	r2,zero,204b4 <__sfp+0x88>
   20494:	213fffc4 	addi	r4,r4,-1
   20498:	1c3ffd04 	addi	r16,r3,-12
   2049c:	18c01a04 	addi	r3,r3,104
   204a0:	247ffa1e 	bne	r4,r17,2048c <__sfp+0x60>
   204a4:	90800017 	ldw	r2,0(r18)
   204a8:	10001d26 	beq	r2,zero,20520 <__sfp+0xf4>
   204ac:	1025883a 	mov	r18,r2
   204b0:	003fee06 	br	2046c <__sfp+0x40>
   204b4:	00bfffc4 	movi	r2,-1
   204b8:	8080038d 	sth	r2,14(r16)
   204bc:	00800044 	movi	r2,1
   204c0:	8080030d 	sth	r2,12(r16)
   204c4:	80001915 	stw	zero,100(r16)
   204c8:	80000015 	stw	zero,0(r16)
   204cc:	80000215 	stw	zero,8(r16)
   204d0:	80000115 	stw	zero,4(r16)
   204d4:	80000415 	stw	zero,16(r16)
   204d8:	80000515 	stw	zero,20(r16)
   204dc:	80000615 	stw	zero,24(r16)
   204e0:	01800204 	movi	r6,8
   204e4:	000b883a 	mov	r5,zero
   204e8:	81001704 	addi	r4,r16,92
   204ec:	00217900 	call	21790 <memset>
   204f0:	8005883a 	mov	r2,r16
   204f4:	80000c15 	stw	zero,48(r16)
   204f8:	80000d15 	stw	zero,52(r16)
   204fc:	80001115 	stw	zero,68(r16)
   20500:	80001215 	stw	zero,72(r16)
   20504:	dfc00417 	ldw	ra,16(sp)
   20508:	dcc00317 	ldw	r19,12(sp)
   2050c:	dc800217 	ldw	r18,8(sp)
   20510:	dc400117 	ldw	r17,4(sp)
   20514:	dc000017 	ldw	r16,0(sp)
   20518:	dec00504 	addi	sp,sp,20
   2051c:	f800283a 	ret
   20520:	01400104 	movi	r5,4
   20524:	9809883a 	mov	r4,r19
   20528:	00203b40 	call	203b4 <__sfmoreglue>
   2052c:	90800015 	stw	r2,0(r18)
   20530:	103fde1e 	bne	r2,zero,204ac <__sfp+0x80>
   20534:	00800304 	movi	r2,12
   20538:	98800015 	stw	r2,0(r19)
   2053c:	0005883a 	mov	r2,zero
   20540:	003ff006 	br	20504 <__sfp+0xd8>

00020544 <_cleanup>:
   20544:	008000b4 	movhi	r2,2
   20548:	10944e04 	addi	r2,r2,20792
   2054c:	11000017 	ldw	r4,0(r2)
   20550:	014000b4 	movhi	r5,2
   20554:	29486d04 	addi	r5,r5,8628
   20558:	0020b381 	jmpi	20b38 <_fwalk_reent>

0002055c <__sinit>:
   2055c:	20800e17 	ldw	r2,56(r4)
   20560:	10000126 	beq	r2,zero,20568 <__sinit+0xc>
   20564:	f800283a 	ret
   20568:	00202101 	jmpi	20210 <__sinit.part.1>

0002056c <__sfp_lock_acquire>:
   2056c:	f800283a 	ret

00020570 <__sfp_lock_release>:
   20570:	f800283a 	ret

00020574 <__sinit_lock_acquire>:
   20574:	f800283a 	ret

00020578 <__sinit_lock_release>:
   20578:	f800283a 	ret

0002057c <__fp_lock_all>:
   2057c:	008000b4 	movhi	r2,2
   20580:	10944f04 	addi	r2,r2,20796
   20584:	11000017 	ldw	r4,0(r2)
   20588:	014000b4 	movhi	r5,2
   2058c:	2940eb04 	addi	r5,r5,940
   20590:	0020a741 	jmpi	20a74 <_fwalk>

00020594 <__fp_unlock_all>:
   20594:	008000b4 	movhi	r2,2
   20598:	10944f04 	addi	r2,r2,20796
   2059c:	11000017 	ldw	r4,0(r2)
   205a0:	014000b4 	movhi	r5,2
   205a4:	29407f04 	addi	r5,r5,508
   205a8:	0020a741 	jmpi	20a74 <_fwalk>

000205ac <__sfvwrite_r>:
   205ac:	30800217 	ldw	r2,8(r6)
   205b0:	10006726 	beq	r2,zero,20750 <__sfvwrite_r+0x1a4>
   205b4:	28c0030b 	ldhu	r3,12(r5)
   205b8:	defff404 	addi	sp,sp,-48
   205bc:	dd400715 	stw	r21,28(sp)
   205c0:	dd000615 	stw	r20,24(sp)
   205c4:	dc000215 	stw	r16,8(sp)
   205c8:	dfc00b15 	stw	ra,44(sp)
   205cc:	df000a15 	stw	fp,40(sp)
   205d0:	ddc00915 	stw	r23,36(sp)
   205d4:	dd800815 	stw	r22,32(sp)
   205d8:	dcc00515 	stw	r19,20(sp)
   205dc:	dc800415 	stw	r18,16(sp)
   205e0:	dc400315 	stw	r17,12(sp)
   205e4:	1880020c 	andi	r2,r3,8
   205e8:	2821883a 	mov	r16,r5
   205ec:	202b883a 	mov	r21,r4
   205f0:	3029883a 	mov	r20,r6
   205f4:	10002726 	beq	r2,zero,20694 <__sfvwrite_r+0xe8>
   205f8:	28800417 	ldw	r2,16(r5)
   205fc:	10002526 	beq	r2,zero,20694 <__sfvwrite_r+0xe8>
   20600:	1880008c 	andi	r2,r3,2
   20604:	a4400017 	ldw	r17,0(r20)
   20608:	10002a26 	beq	r2,zero,206b4 <__sfvwrite_r+0x108>
   2060c:	05a00034 	movhi	r22,32768
   20610:	0027883a 	mov	r19,zero
   20614:	0025883a 	mov	r18,zero
   20618:	b5bf0004 	addi	r22,r22,-1024
   2061c:	980d883a 	mov	r6,r19
   20620:	a809883a 	mov	r4,r21
   20624:	90004626 	beq	r18,zero,20740 <__sfvwrite_r+0x194>
   20628:	900f883a 	mov	r7,r18
   2062c:	b480022e 	bgeu	r22,r18,20638 <__sfvwrite_r+0x8c>
   20630:	01e00034 	movhi	r7,32768
   20634:	39ff0004 	addi	r7,r7,-1024
   20638:	80800917 	ldw	r2,36(r16)
   2063c:	81400717 	ldw	r5,28(r16)
   20640:	103ee83a 	callr	r2
   20644:	00805a0e 	bge	zero,r2,207b0 <__sfvwrite_r+0x204>
   20648:	a0c00217 	ldw	r3,8(r20)
   2064c:	98a7883a 	add	r19,r19,r2
   20650:	90a5c83a 	sub	r18,r18,r2
   20654:	1885c83a 	sub	r2,r3,r2
   20658:	a0800215 	stw	r2,8(r20)
   2065c:	103fef1e 	bne	r2,zero,2061c <__sfvwrite_r+0x70>
   20660:	0005883a 	mov	r2,zero
   20664:	dfc00b17 	ldw	ra,44(sp)
   20668:	df000a17 	ldw	fp,40(sp)
   2066c:	ddc00917 	ldw	r23,36(sp)
   20670:	dd800817 	ldw	r22,32(sp)
   20674:	dd400717 	ldw	r21,28(sp)
   20678:	dd000617 	ldw	r20,24(sp)
   2067c:	dcc00517 	ldw	r19,20(sp)
   20680:	dc800417 	ldw	r18,16(sp)
   20684:	dc400317 	ldw	r17,12(sp)
   20688:	dc000217 	ldw	r16,8(sp)
   2068c:	dec00c04 	addi	sp,sp,48
   20690:	f800283a 	ret
   20694:	800b883a 	mov	r5,r16
   20698:	a809883a 	mov	r4,r21
   2069c:	002200c0 	call	2200c <__swsetup_r>
   206a0:	1000ee1e 	bne	r2,zero,20a5c <__sfvwrite_r+0x4b0>
   206a4:	80c0030b 	ldhu	r3,12(r16)
   206a8:	a4400017 	ldw	r17,0(r20)
   206ac:	1880008c 	andi	r2,r3,2
   206b0:	103fd61e 	bne	r2,zero,2060c <__sfvwrite_r+0x60>
   206b4:	1880004c 	andi	r2,r3,1
   206b8:	1000421e 	bne	r2,zero,207c4 <__sfvwrite_r+0x218>
   206bc:	0039883a 	mov	fp,zero
   206c0:	0025883a 	mov	r18,zero
   206c4:	90001a26 	beq	r18,zero,20730 <__sfvwrite_r+0x184>
   206c8:	1880800c 	andi	r2,r3,512
   206cc:	84c00217 	ldw	r19,8(r16)
   206d0:	10002126 	beq	r2,zero,20758 <__sfvwrite_r+0x1ac>
   206d4:	982f883a 	mov	r23,r19
   206d8:	94c09636 	bltu	r18,r19,20934 <__sfvwrite_r+0x388>
   206dc:	1881200c 	andi	r2,r3,1152
   206e0:	1000a11e 	bne	r2,zero,20968 <__sfvwrite_r+0x3bc>
   206e4:	81000017 	ldw	r4,0(r16)
   206e8:	b80d883a 	mov	r6,r23
   206ec:	e00b883a 	mov	r5,fp
   206f0:	00216340 	call	21634 <memmove>
   206f4:	80c00217 	ldw	r3,8(r16)
   206f8:	81000017 	ldw	r4,0(r16)
   206fc:	9005883a 	mov	r2,r18
   20700:	1ce7c83a 	sub	r19,r3,r19
   20704:	25cf883a 	add	r7,r4,r23
   20708:	84c00215 	stw	r19,8(r16)
   2070c:	81c00015 	stw	r7,0(r16)
   20710:	a0c00217 	ldw	r3,8(r20)
   20714:	e0b9883a 	add	fp,fp,r2
   20718:	90a5c83a 	sub	r18,r18,r2
   2071c:	18a7c83a 	sub	r19,r3,r2
   20720:	a4c00215 	stw	r19,8(r20)
   20724:	983fce26 	beq	r19,zero,20660 <__sfvwrite_r+0xb4>
   20728:	80c0030b 	ldhu	r3,12(r16)
   2072c:	903fe61e 	bne	r18,zero,206c8 <__sfvwrite_r+0x11c>
   20730:	8f000017 	ldw	fp,0(r17)
   20734:	8c800117 	ldw	r18,4(r17)
   20738:	8c400204 	addi	r17,r17,8
   2073c:	003fe106 	br	206c4 <__sfvwrite_r+0x118>
   20740:	8cc00017 	ldw	r19,0(r17)
   20744:	8c800117 	ldw	r18,4(r17)
   20748:	8c400204 	addi	r17,r17,8
   2074c:	003fb306 	br	2061c <__sfvwrite_r+0x70>
   20750:	0005883a 	mov	r2,zero
   20754:	f800283a 	ret
   20758:	81000017 	ldw	r4,0(r16)
   2075c:	80800417 	ldw	r2,16(r16)
   20760:	11005a36 	bltu	r2,r4,208cc <__sfvwrite_r+0x320>
   20764:	85c00517 	ldw	r23,20(r16)
   20768:	95c05836 	bltu	r18,r23,208cc <__sfvwrite_r+0x320>
   2076c:	00a00034 	movhi	r2,32768
   20770:	10bfffc4 	addi	r2,r2,-1
   20774:	9009883a 	mov	r4,r18
   20778:	1480012e 	bgeu	r2,r18,20780 <__sfvwrite_r+0x1d4>
   2077c:	1009883a 	mov	r4,r2
   20780:	b80b883a 	mov	r5,r23
   20784:	0022cc00 	call	22cc0 <__divsi3>
   20788:	b80b883a 	mov	r5,r23
   2078c:	1009883a 	mov	r4,r2
   20790:	0022e740 	call	22e74 <__mulsi3>
   20794:	81400717 	ldw	r5,28(r16)
   20798:	80c00917 	ldw	r3,36(r16)
   2079c:	100f883a 	mov	r7,r2
   207a0:	e00d883a 	mov	r6,fp
   207a4:	a809883a 	mov	r4,r21
   207a8:	183ee83a 	callr	r3
   207ac:	00bfd816 	blt	zero,r2,20710 <__sfvwrite_r+0x164>
   207b0:	8080030b 	ldhu	r2,12(r16)
   207b4:	10801014 	ori	r2,r2,64
   207b8:	8080030d 	sth	r2,12(r16)
   207bc:	00bfffc4 	movi	r2,-1
   207c0:	003fa806 	br	20664 <__sfvwrite_r+0xb8>
   207c4:	0027883a 	mov	r19,zero
   207c8:	0011883a 	mov	r8,zero
   207cc:	0039883a 	mov	fp,zero
   207d0:	0025883a 	mov	r18,zero
   207d4:	90001f26 	beq	r18,zero,20854 <__sfvwrite_r+0x2a8>
   207d8:	40005a26 	beq	r8,zero,20944 <__sfvwrite_r+0x398>
   207dc:	982d883a 	mov	r22,r19
   207e0:	94c0012e 	bgeu	r18,r19,207e8 <__sfvwrite_r+0x23c>
   207e4:	902d883a 	mov	r22,r18
   207e8:	81000017 	ldw	r4,0(r16)
   207ec:	80800417 	ldw	r2,16(r16)
   207f0:	b02f883a 	mov	r23,r22
   207f4:	81c00517 	ldw	r7,20(r16)
   207f8:	1100032e 	bgeu	r2,r4,20808 <__sfvwrite_r+0x25c>
   207fc:	80c00217 	ldw	r3,8(r16)
   20800:	38c7883a 	add	r3,r7,r3
   20804:	1d801816 	blt	r3,r22,20868 <__sfvwrite_r+0x2bc>
   20808:	b1c03e16 	blt	r22,r7,20904 <__sfvwrite_r+0x358>
   2080c:	80800917 	ldw	r2,36(r16)
   20810:	81400717 	ldw	r5,28(r16)
   20814:	e00d883a 	mov	r6,fp
   20818:	da000115 	stw	r8,4(sp)
   2081c:	a809883a 	mov	r4,r21
   20820:	103ee83a 	callr	r2
   20824:	102f883a 	mov	r23,r2
   20828:	da000117 	ldw	r8,4(sp)
   2082c:	00bfe00e 	bge	zero,r2,207b0 <__sfvwrite_r+0x204>
   20830:	9de7c83a 	sub	r19,r19,r23
   20834:	98001f26 	beq	r19,zero,208b4 <__sfvwrite_r+0x308>
   20838:	a0800217 	ldw	r2,8(r20)
   2083c:	e5f9883a 	add	fp,fp,r23
   20840:	95e5c83a 	sub	r18,r18,r23
   20844:	15efc83a 	sub	r23,r2,r23
   20848:	a5c00215 	stw	r23,8(r20)
   2084c:	b83f8426 	beq	r23,zero,20660 <__sfvwrite_r+0xb4>
   20850:	903fe11e 	bne	r18,zero,207d8 <__sfvwrite_r+0x22c>
   20854:	8f000017 	ldw	fp,0(r17)
   20858:	8c800117 	ldw	r18,4(r17)
   2085c:	0011883a 	mov	r8,zero
   20860:	8c400204 	addi	r17,r17,8
   20864:	003fdb06 	br	207d4 <__sfvwrite_r+0x228>
   20868:	180d883a 	mov	r6,r3
   2086c:	e00b883a 	mov	r5,fp
   20870:	da000115 	stw	r8,4(sp)
   20874:	d8c00015 	stw	r3,0(sp)
   20878:	00216340 	call	21634 <memmove>
   2087c:	d8c00017 	ldw	r3,0(sp)
   20880:	80800017 	ldw	r2,0(r16)
   20884:	800b883a 	mov	r5,r16
   20888:	a809883a 	mov	r4,r21
   2088c:	10c5883a 	add	r2,r2,r3
   20890:	80800015 	stw	r2,0(r16)
   20894:	d8c00015 	stw	r3,0(sp)
   20898:	00224d40 	call	224d4 <_fflush_r>
   2089c:	d8c00017 	ldw	r3,0(sp)
   208a0:	da000117 	ldw	r8,4(sp)
   208a4:	103fc21e 	bne	r2,zero,207b0 <__sfvwrite_r+0x204>
   208a8:	182f883a 	mov	r23,r3
   208ac:	9de7c83a 	sub	r19,r19,r23
   208b0:	983fe11e 	bne	r19,zero,20838 <__sfvwrite_r+0x28c>
   208b4:	800b883a 	mov	r5,r16
   208b8:	a809883a 	mov	r4,r21
   208bc:	00224d40 	call	224d4 <_fflush_r>
   208c0:	103fbb1e 	bne	r2,zero,207b0 <__sfvwrite_r+0x204>
   208c4:	0011883a 	mov	r8,zero
   208c8:	003fdb06 	br	20838 <__sfvwrite_r+0x28c>
   208cc:	94c0012e 	bgeu	r18,r19,208d4 <__sfvwrite_r+0x328>
   208d0:	9027883a 	mov	r19,r18
   208d4:	980d883a 	mov	r6,r19
   208d8:	e00b883a 	mov	r5,fp
   208dc:	00216340 	call	21634 <memmove>
   208e0:	80800217 	ldw	r2,8(r16)
   208e4:	80c00017 	ldw	r3,0(r16)
   208e8:	14c5c83a 	sub	r2,r2,r19
   208ec:	1cc7883a 	add	r3,r3,r19
   208f0:	80800215 	stw	r2,8(r16)
   208f4:	80c00015 	stw	r3,0(r16)
   208f8:	10004326 	beq	r2,zero,20a08 <__sfvwrite_r+0x45c>
   208fc:	9805883a 	mov	r2,r19
   20900:	003f8306 	br	20710 <__sfvwrite_r+0x164>
   20904:	b00d883a 	mov	r6,r22
   20908:	e00b883a 	mov	r5,fp
   2090c:	da000115 	stw	r8,4(sp)
   20910:	00216340 	call	21634 <memmove>
   20914:	80800217 	ldw	r2,8(r16)
   20918:	80c00017 	ldw	r3,0(r16)
   2091c:	da000117 	ldw	r8,4(sp)
   20920:	1585c83a 	sub	r2,r2,r22
   20924:	1dad883a 	add	r22,r3,r22
   20928:	80800215 	stw	r2,8(r16)
   2092c:	85800015 	stw	r22,0(r16)
   20930:	003fbf06 	br	20830 <__sfvwrite_r+0x284>
   20934:	81000017 	ldw	r4,0(r16)
   20938:	9027883a 	mov	r19,r18
   2093c:	902f883a 	mov	r23,r18
   20940:	003f6906 	br	206e8 <__sfvwrite_r+0x13c>
   20944:	900d883a 	mov	r6,r18
   20948:	01400284 	movi	r5,10
   2094c:	e009883a 	mov	r4,fp
   20950:	00214080 	call	21408 <memchr>
   20954:	10003e26 	beq	r2,zero,20a50 <__sfvwrite_r+0x4a4>
   20958:	10800044 	addi	r2,r2,1
   2095c:	1727c83a 	sub	r19,r2,fp
   20960:	02000044 	movi	r8,1
   20964:	003f9d06 	br	207dc <__sfvwrite_r+0x230>
   20968:	80800517 	ldw	r2,20(r16)
   2096c:	81400417 	ldw	r5,16(r16)
   20970:	81c00017 	ldw	r7,0(r16)
   20974:	10a7883a 	add	r19,r2,r2
   20978:	9885883a 	add	r2,r19,r2
   2097c:	1026d7fa 	srli	r19,r2,31
   20980:	396dc83a 	sub	r22,r7,r5
   20984:	b1000044 	addi	r4,r22,1
   20988:	9885883a 	add	r2,r19,r2
   2098c:	1027d07a 	srai	r19,r2,1
   20990:	2485883a 	add	r2,r4,r18
   20994:	980d883a 	mov	r6,r19
   20998:	9880022e 	bgeu	r19,r2,209a4 <__sfvwrite_r+0x3f8>
   2099c:	1027883a 	mov	r19,r2
   209a0:	100d883a 	mov	r6,r2
   209a4:	18c1000c 	andi	r3,r3,1024
   209a8:	18001c26 	beq	r3,zero,20a1c <__sfvwrite_r+0x470>
   209ac:	300b883a 	mov	r5,r6
   209b0:	a809883a 	mov	r4,r21
   209b4:	0020bfc0 	call	20bfc <_malloc_r>
   209b8:	102f883a 	mov	r23,r2
   209bc:	10002926 	beq	r2,zero,20a64 <__sfvwrite_r+0x4b8>
   209c0:	81400417 	ldw	r5,16(r16)
   209c4:	b00d883a 	mov	r6,r22
   209c8:	1009883a 	mov	r4,r2
   209cc:	00214ec0 	call	214ec <memcpy>
   209d0:	8080030b 	ldhu	r2,12(r16)
   209d4:	00fedfc4 	movi	r3,-1153
   209d8:	10c4703a 	and	r2,r2,r3
   209dc:	10802014 	ori	r2,r2,128
   209e0:	8080030d 	sth	r2,12(r16)
   209e4:	bd89883a 	add	r4,r23,r22
   209e8:	9d8fc83a 	sub	r7,r19,r22
   209ec:	85c00415 	stw	r23,16(r16)
   209f0:	84c00515 	stw	r19,20(r16)
   209f4:	81000015 	stw	r4,0(r16)
   209f8:	9027883a 	mov	r19,r18
   209fc:	81c00215 	stw	r7,8(r16)
   20a00:	902f883a 	mov	r23,r18
   20a04:	003f3806 	br	206e8 <__sfvwrite_r+0x13c>
   20a08:	800b883a 	mov	r5,r16
   20a0c:	a809883a 	mov	r4,r21
   20a10:	00224d40 	call	224d4 <_fflush_r>
   20a14:	103fb926 	beq	r2,zero,208fc <__sfvwrite_r+0x350>
   20a18:	003f6506 	br	207b0 <__sfvwrite_r+0x204>
   20a1c:	a809883a 	mov	r4,r21
   20a20:	00218b80 	call	218b8 <_realloc_r>
   20a24:	102f883a 	mov	r23,r2
   20a28:	103fee1e 	bne	r2,zero,209e4 <__sfvwrite_r+0x438>
   20a2c:	81400417 	ldw	r5,16(r16)
   20a30:	a809883a 	mov	r4,r21
   20a34:	00226840 	call	22684 <_free_r>
   20a38:	8080030b 	ldhu	r2,12(r16)
   20a3c:	00ffdfc4 	movi	r3,-129
   20a40:	1884703a 	and	r2,r3,r2
   20a44:	00c00304 	movi	r3,12
   20a48:	a8c00015 	stw	r3,0(r21)
   20a4c:	003f5906 	br	207b4 <__sfvwrite_r+0x208>
   20a50:	94c00044 	addi	r19,r18,1
   20a54:	02000044 	movi	r8,1
   20a58:	003f6006 	br	207dc <__sfvwrite_r+0x230>
   20a5c:	00bfffc4 	movi	r2,-1
   20a60:	003f0006 	br	20664 <__sfvwrite_r+0xb8>
   20a64:	00800304 	movi	r2,12
   20a68:	a8800015 	stw	r2,0(r21)
   20a6c:	8080030b 	ldhu	r2,12(r16)
   20a70:	003f5006 	br	207b4 <__sfvwrite_r+0x208>

00020a74 <_fwalk>:
   20a74:	defff704 	addi	sp,sp,-36
   20a78:	dd000415 	stw	r20,16(sp)
   20a7c:	dfc00815 	stw	ra,32(sp)
   20a80:	ddc00715 	stw	r23,28(sp)
   20a84:	dd800615 	stw	r22,24(sp)
   20a88:	dd400515 	stw	r21,20(sp)
   20a8c:	dcc00315 	stw	r19,12(sp)
   20a90:	dc800215 	stw	r18,8(sp)
   20a94:	dc400115 	stw	r17,4(sp)
   20a98:	dc000015 	stw	r16,0(sp)
   20a9c:	2500b804 	addi	r20,r4,736
   20aa0:	a0002326 	beq	r20,zero,20b30 <_fwalk+0xbc>
   20aa4:	282b883a 	mov	r21,r5
   20aa8:	002f883a 	mov	r23,zero
   20aac:	05800044 	movi	r22,1
   20ab0:	04ffffc4 	movi	r19,-1
   20ab4:	a4400117 	ldw	r17,4(r20)
   20ab8:	a4800217 	ldw	r18,8(r20)
   20abc:	8c7fffc4 	addi	r17,r17,-1
   20ac0:	88000d16 	blt	r17,zero,20af8 <_fwalk+0x84>
   20ac4:	94000304 	addi	r16,r18,12
   20ac8:	94800384 	addi	r18,r18,14
   20acc:	8080000b 	ldhu	r2,0(r16)
   20ad0:	8c7fffc4 	addi	r17,r17,-1
   20ad4:	813ffd04 	addi	r4,r16,-12
   20ad8:	b080042e 	bgeu	r22,r2,20aec <_fwalk+0x78>
   20adc:	9080000f 	ldh	r2,0(r18)
   20ae0:	14c00226 	beq	r2,r19,20aec <_fwalk+0x78>
   20ae4:	a83ee83a 	callr	r21
   20ae8:	b8aeb03a 	or	r23,r23,r2
   20aec:	84001a04 	addi	r16,r16,104
   20af0:	94801a04 	addi	r18,r18,104
   20af4:	8cfff51e 	bne	r17,r19,20acc <_fwalk+0x58>
   20af8:	a5000017 	ldw	r20,0(r20)
   20afc:	a03fed1e 	bne	r20,zero,20ab4 <_fwalk+0x40>
   20b00:	b805883a 	mov	r2,r23
   20b04:	dfc00817 	ldw	ra,32(sp)
   20b08:	ddc00717 	ldw	r23,28(sp)
   20b0c:	dd800617 	ldw	r22,24(sp)
   20b10:	dd400517 	ldw	r21,20(sp)
   20b14:	dd000417 	ldw	r20,16(sp)
   20b18:	dcc00317 	ldw	r19,12(sp)
   20b1c:	dc800217 	ldw	r18,8(sp)
   20b20:	dc400117 	ldw	r17,4(sp)
   20b24:	dc000017 	ldw	r16,0(sp)
   20b28:	dec00904 	addi	sp,sp,36
   20b2c:	f800283a 	ret
   20b30:	002f883a 	mov	r23,zero
   20b34:	003ff206 	br	20b00 <_fwalk+0x8c>

00020b38 <_fwalk_reent>:
   20b38:	defff704 	addi	sp,sp,-36
   20b3c:	dd000415 	stw	r20,16(sp)
   20b40:	dfc00815 	stw	ra,32(sp)
   20b44:	ddc00715 	stw	r23,28(sp)
   20b48:	dd800615 	stw	r22,24(sp)
   20b4c:	dd400515 	stw	r21,20(sp)
   20b50:	dcc00315 	stw	r19,12(sp)
   20b54:	dc800215 	stw	r18,8(sp)
   20b58:	dc400115 	stw	r17,4(sp)
   20b5c:	dc000015 	stw	r16,0(sp)
   20b60:	2500b804 	addi	r20,r4,736
   20b64:	a0002326 	beq	r20,zero,20bf4 <_fwalk_reent+0xbc>
   20b68:	282b883a 	mov	r21,r5
   20b6c:	2027883a 	mov	r19,r4
   20b70:	002f883a 	mov	r23,zero
   20b74:	05800044 	movi	r22,1
   20b78:	04bfffc4 	movi	r18,-1
   20b7c:	a4400117 	ldw	r17,4(r20)
   20b80:	a4000217 	ldw	r16,8(r20)
   20b84:	8c7fffc4 	addi	r17,r17,-1
   20b88:	88000c16 	blt	r17,zero,20bbc <_fwalk_reent+0x84>
   20b8c:	84000304 	addi	r16,r16,12
   20b90:	8080000b 	ldhu	r2,0(r16)
   20b94:	8c7fffc4 	addi	r17,r17,-1
   20b98:	817ffd04 	addi	r5,r16,-12
   20b9c:	b080052e 	bgeu	r22,r2,20bb4 <_fwalk_reent+0x7c>
   20ba0:	8080008f 	ldh	r2,2(r16)
   20ba4:	9809883a 	mov	r4,r19
   20ba8:	14800226 	beq	r2,r18,20bb4 <_fwalk_reent+0x7c>
   20bac:	a83ee83a 	callr	r21
   20bb0:	b8aeb03a 	or	r23,r23,r2
   20bb4:	84001a04 	addi	r16,r16,104
   20bb8:	8cbff51e 	bne	r17,r18,20b90 <_fwalk_reent+0x58>
   20bbc:	a5000017 	ldw	r20,0(r20)
   20bc0:	a03fee1e 	bne	r20,zero,20b7c <_fwalk_reent+0x44>
   20bc4:	b805883a 	mov	r2,r23
   20bc8:	dfc00817 	ldw	ra,32(sp)
   20bcc:	ddc00717 	ldw	r23,28(sp)
   20bd0:	dd800617 	ldw	r22,24(sp)
   20bd4:	dd400517 	ldw	r21,20(sp)
   20bd8:	dd000417 	ldw	r20,16(sp)
   20bdc:	dcc00317 	ldw	r19,12(sp)
   20be0:	dc800217 	ldw	r18,8(sp)
   20be4:	dc400117 	ldw	r17,4(sp)
   20be8:	dc000017 	ldw	r16,0(sp)
   20bec:	dec00904 	addi	sp,sp,36
   20bf0:	f800283a 	ret
   20bf4:	002f883a 	mov	r23,zero
   20bf8:	003ff206 	br	20bc4 <_fwalk_reent+0x8c>

00020bfc <_malloc_r>:
   20bfc:	defff504 	addi	sp,sp,-44
   20c00:	dc800315 	stw	r18,12(sp)
   20c04:	dfc00a15 	stw	ra,40(sp)
   20c08:	df000915 	stw	fp,36(sp)
   20c0c:	ddc00815 	stw	r23,32(sp)
   20c10:	dd800715 	stw	r22,28(sp)
   20c14:	dd400615 	stw	r21,24(sp)
   20c18:	dd000515 	stw	r20,20(sp)
   20c1c:	dcc00415 	stw	r19,16(sp)
   20c20:	dc400215 	stw	r17,8(sp)
   20c24:	dc000115 	stw	r16,4(sp)
   20c28:	288002c4 	addi	r2,r5,11
   20c2c:	00c00584 	movi	r3,22
   20c30:	2025883a 	mov	r18,r4
   20c34:	18807f2e 	bgeu	r3,r2,20e34 <_malloc_r+0x238>
   20c38:	047ffe04 	movi	r17,-8
   20c3c:	1462703a 	and	r17,r2,r17
   20c40:	8800a316 	blt	r17,zero,20ed0 <_malloc_r+0x2d4>
   20c44:	8940a236 	bltu	r17,r5,20ed0 <_malloc_r+0x2d4>
   20c48:	00234380 	call	23438 <__malloc_lock>
   20c4c:	00807dc4 	movi	r2,503
   20c50:	1441e92e 	bgeu	r2,r17,213f8 <_malloc_r+0x7fc>
   20c54:	8804d27a 	srli	r2,r17,9
   20c58:	1000a126 	beq	r2,zero,20ee0 <_malloc_r+0x2e4>
   20c5c:	00c00104 	movi	r3,4
   20c60:	18811e36 	bltu	r3,r2,210dc <_malloc_r+0x4e0>
   20c64:	8804d1ba 	srli	r2,r17,6
   20c68:	12000e44 	addi	r8,r2,57
   20c6c:	11c00e04 	addi	r7,r2,56
   20c70:	4209883a 	add	r4,r8,r8
   20c74:	04c000b4 	movhi	r19,2
   20c78:	2109883a 	add	r4,r4,r4
   20c7c:	9cd2d704 	addi	r19,r19,19292
   20c80:	2109883a 	add	r4,r4,r4
   20c84:	9909883a 	add	r4,r19,r4
   20c88:	24000117 	ldw	r16,4(r4)
   20c8c:	213ffe04 	addi	r4,r4,-8
   20c90:	24009726 	beq	r4,r16,20ef0 <_malloc_r+0x2f4>
   20c94:	80800117 	ldw	r2,4(r16)
   20c98:	01bfff04 	movi	r6,-4
   20c9c:	014003c4 	movi	r5,15
   20ca0:	1184703a 	and	r2,r2,r6
   20ca4:	1447c83a 	sub	r3,r2,r17
   20ca8:	28c00716 	blt	r5,r3,20cc8 <_malloc_r+0xcc>
   20cac:	1800920e 	bge	r3,zero,20ef8 <_malloc_r+0x2fc>
   20cb0:	84000317 	ldw	r16,12(r16)
   20cb4:	24008e26 	beq	r4,r16,20ef0 <_malloc_r+0x2f4>
   20cb8:	80800117 	ldw	r2,4(r16)
   20cbc:	1184703a 	and	r2,r2,r6
   20cc0:	1447c83a 	sub	r3,r2,r17
   20cc4:	28fff90e 	bge	r5,r3,20cac <_malloc_r+0xb0>
   20cc8:	3809883a 	mov	r4,r7
   20ccc:	018000b4 	movhi	r6,2
   20cd0:	9c000417 	ldw	r16,16(r19)
   20cd4:	3192d704 	addi	r6,r6,19292
   20cd8:	32000204 	addi	r8,r6,8
   20cdc:	82013426 	beq	r16,r8,211b0 <_malloc_r+0x5b4>
   20ce0:	80c00117 	ldw	r3,4(r16)
   20ce4:	00bfff04 	movi	r2,-4
   20ce8:	188e703a 	and	r7,r3,r2
   20cec:	3c45c83a 	sub	r2,r7,r17
   20cf0:	00c003c4 	movi	r3,15
   20cf4:	18811f16 	blt	r3,r2,21174 <_malloc_r+0x578>
   20cf8:	32000515 	stw	r8,20(r6)
   20cfc:	32000415 	stw	r8,16(r6)
   20d00:	10007f0e 	bge	r2,zero,20f00 <_malloc_r+0x304>
   20d04:	00807fc4 	movi	r2,511
   20d08:	11c0fd36 	bltu	r2,r7,21100 <_malloc_r+0x504>
   20d0c:	3806d0fa 	srli	r3,r7,3
   20d10:	01c00044 	movi	r7,1
   20d14:	30800117 	ldw	r2,4(r6)
   20d18:	19400044 	addi	r5,r3,1
   20d1c:	294b883a 	add	r5,r5,r5
   20d20:	1807d0ba 	srai	r3,r3,2
   20d24:	294b883a 	add	r5,r5,r5
   20d28:	294b883a 	add	r5,r5,r5
   20d2c:	298b883a 	add	r5,r5,r6
   20d30:	38c6983a 	sll	r3,r7,r3
   20d34:	29c00017 	ldw	r7,0(r5)
   20d38:	2a7ffe04 	addi	r9,r5,-8
   20d3c:	1886b03a 	or	r3,r3,r2
   20d40:	82400315 	stw	r9,12(r16)
   20d44:	81c00215 	stw	r7,8(r16)
   20d48:	30c00115 	stw	r3,4(r6)
   20d4c:	2c000015 	stw	r16,0(r5)
   20d50:	3c000315 	stw	r16,12(r7)
   20d54:	2005d0ba 	srai	r2,r4,2
   20d58:	01400044 	movi	r5,1
   20d5c:	288a983a 	sll	r5,r5,r2
   20d60:	19406f36 	bltu	r3,r5,20f20 <_malloc_r+0x324>
   20d64:	28c4703a 	and	r2,r5,r3
   20d68:	10000a1e 	bne	r2,zero,20d94 <_malloc_r+0x198>
   20d6c:	00bfff04 	movi	r2,-4
   20d70:	294b883a 	add	r5,r5,r5
   20d74:	2088703a 	and	r4,r4,r2
   20d78:	28c4703a 	and	r2,r5,r3
   20d7c:	21000104 	addi	r4,r4,4
   20d80:	1000041e 	bne	r2,zero,20d94 <_malloc_r+0x198>
   20d84:	294b883a 	add	r5,r5,r5
   20d88:	28c4703a 	and	r2,r5,r3
   20d8c:	21000104 	addi	r4,r4,4
   20d90:	103ffc26 	beq	r2,zero,20d84 <_malloc_r+0x188>
   20d94:	02bfff04 	movi	r10,-4
   20d98:	024003c4 	movi	r9,15
   20d9c:	21800044 	addi	r6,r4,1
   20da0:	318d883a 	add	r6,r6,r6
   20da4:	318d883a 	add	r6,r6,r6
   20da8:	318d883a 	add	r6,r6,r6
   20dac:	998d883a 	add	r6,r19,r6
   20db0:	333ffe04 	addi	r12,r6,-8
   20db4:	2017883a 	mov	r11,r4
   20db8:	31800104 	addi	r6,r6,4
   20dbc:	34000017 	ldw	r16,0(r6)
   20dc0:	31fffd04 	addi	r7,r6,-12
   20dc4:	81c0041e 	bne	r16,r7,20dd8 <_malloc_r+0x1dc>
   20dc8:	0000fb06 	br	211b8 <_malloc_r+0x5bc>
   20dcc:	1801030e 	bge	r3,zero,211dc <_malloc_r+0x5e0>
   20dd0:	84000317 	ldw	r16,12(r16)
   20dd4:	81c0f826 	beq	r16,r7,211b8 <_malloc_r+0x5bc>
   20dd8:	80800117 	ldw	r2,4(r16)
   20ddc:	1284703a 	and	r2,r2,r10
   20de0:	1447c83a 	sub	r3,r2,r17
   20de4:	48fff90e 	bge	r9,r3,20dcc <_malloc_r+0x1d0>
   20de8:	80800317 	ldw	r2,12(r16)
   20dec:	81000217 	ldw	r4,8(r16)
   20df0:	89400054 	ori	r5,r17,1
   20df4:	81400115 	stw	r5,4(r16)
   20df8:	20800315 	stw	r2,12(r4)
   20dfc:	11000215 	stw	r4,8(r2)
   20e00:	8463883a 	add	r17,r16,r17
   20e04:	9c400515 	stw	r17,20(r19)
   20e08:	9c400415 	stw	r17,16(r19)
   20e0c:	18800054 	ori	r2,r3,1
   20e10:	88800115 	stw	r2,4(r17)
   20e14:	8a000315 	stw	r8,12(r17)
   20e18:	8a000215 	stw	r8,8(r17)
   20e1c:	88e3883a 	add	r17,r17,r3
   20e20:	88c00015 	stw	r3,0(r17)
   20e24:	9009883a 	mov	r4,r18
   20e28:	002345c0 	call	2345c <__malloc_unlock>
   20e2c:	80800204 	addi	r2,r16,8
   20e30:	00001b06 	br	20ea0 <_malloc_r+0x2a4>
   20e34:	04400404 	movi	r17,16
   20e38:	89402536 	bltu	r17,r5,20ed0 <_malloc_r+0x2d4>
   20e3c:	00234380 	call	23438 <__malloc_lock>
   20e40:	00800184 	movi	r2,6
   20e44:	01000084 	movi	r4,2
   20e48:	04c000b4 	movhi	r19,2
   20e4c:	1085883a 	add	r2,r2,r2
   20e50:	9cd2d704 	addi	r19,r19,19292
   20e54:	1085883a 	add	r2,r2,r2
   20e58:	9885883a 	add	r2,r19,r2
   20e5c:	14000117 	ldw	r16,4(r2)
   20e60:	10fffe04 	addi	r3,r2,-8
   20e64:	80c0d926 	beq	r16,r3,211cc <_malloc_r+0x5d0>
   20e68:	80c00117 	ldw	r3,4(r16)
   20e6c:	81000317 	ldw	r4,12(r16)
   20e70:	00bfff04 	movi	r2,-4
   20e74:	1884703a 	and	r2,r3,r2
   20e78:	81400217 	ldw	r5,8(r16)
   20e7c:	8085883a 	add	r2,r16,r2
   20e80:	10c00117 	ldw	r3,4(r2)
   20e84:	29000315 	stw	r4,12(r5)
   20e88:	21400215 	stw	r5,8(r4)
   20e8c:	18c00054 	ori	r3,r3,1
   20e90:	10c00115 	stw	r3,4(r2)
   20e94:	9009883a 	mov	r4,r18
   20e98:	002345c0 	call	2345c <__malloc_unlock>
   20e9c:	80800204 	addi	r2,r16,8
   20ea0:	dfc00a17 	ldw	ra,40(sp)
   20ea4:	df000917 	ldw	fp,36(sp)
   20ea8:	ddc00817 	ldw	r23,32(sp)
   20eac:	dd800717 	ldw	r22,28(sp)
   20eb0:	dd400617 	ldw	r21,24(sp)
   20eb4:	dd000517 	ldw	r20,20(sp)
   20eb8:	dcc00417 	ldw	r19,16(sp)
   20ebc:	dc800317 	ldw	r18,12(sp)
   20ec0:	dc400217 	ldw	r17,8(sp)
   20ec4:	dc000117 	ldw	r16,4(sp)
   20ec8:	dec00b04 	addi	sp,sp,44
   20ecc:	f800283a 	ret
   20ed0:	00800304 	movi	r2,12
   20ed4:	90800015 	stw	r2,0(r18)
   20ed8:	0005883a 	mov	r2,zero
   20edc:	003ff006 	br	20ea0 <_malloc_r+0x2a4>
   20ee0:	01002004 	movi	r4,128
   20ee4:	02001004 	movi	r8,64
   20ee8:	01c00fc4 	movi	r7,63
   20eec:	003f6106 	br	20c74 <_malloc_r+0x78>
   20ef0:	4009883a 	mov	r4,r8
   20ef4:	003f7506 	br	20ccc <_malloc_r+0xd0>
   20ef8:	81000317 	ldw	r4,12(r16)
   20efc:	003fde06 	br	20e78 <_malloc_r+0x27c>
   20f00:	81c5883a 	add	r2,r16,r7
   20f04:	11400117 	ldw	r5,4(r2)
   20f08:	9009883a 	mov	r4,r18
   20f0c:	29400054 	ori	r5,r5,1
   20f10:	11400115 	stw	r5,4(r2)
   20f14:	002345c0 	call	2345c <__malloc_unlock>
   20f18:	80800204 	addi	r2,r16,8
   20f1c:	003fe006 	br	20ea0 <_malloc_r+0x2a4>
   20f20:	9c000217 	ldw	r16,8(r19)
   20f24:	00bfff04 	movi	r2,-4
   20f28:	85800117 	ldw	r22,4(r16)
   20f2c:	b0ac703a 	and	r22,r22,r2
   20f30:	b4400336 	bltu	r22,r17,20f40 <_malloc_r+0x344>
   20f34:	b445c83a 	sub	r2,r22,r17
   20f38:	00c003c4 	movi	r3,15
   20f3c:	18805d16 	blt	r3,r2,210b4 <_malloc_r+0x4b8>
   20f40:	05c000b4 	movhi	r23,2
   20f44:	008000b4 	movhi	r2,2
   20f48:	1096e604 	addi	r2,r2,23448
   20f4c:	bdd45004 	addi	r23,r23,20800
   20f50:	15400017 	ldw	r21,0(r2)
   20f54:	b8c00017 	ldw	r3,0(r23)
   20f58:	00bfffc4 	movi	r2,-1
   20f5c:	858d883a 	add	r6,r16,r22
   20f60:	8d6b883a 	add	r21,r17,r21
   20f64:	1880ea26 	beq	r3,r2,21310 <_malloc_r+0x714>
   20f68:	ad4403c4 	addi	r21,r21,4111
   20f6c:	00bc0004 	movi	r2,-4096
   20f70:	a8aa703a 	and	r21,r21,r2
   20f74:	a80b883a 	mov	r5,r21
   20f78:	9009883a 	mov	r4,r18
   20f7c:	d9800015 	stw	r6,0(sp)
   20f80:	0021e1c0 	call	21e1c <_sbrk_r>
   20f84:	1029883a 	mov	r20,r2
   20f88:	00bfffc4 	movi	r2,-1
   20f8c:	d9800017 	ldw	r6,0(sp)
   20f90:	a080e826 	beq	r20,r2,21334 <_malloc_r+0x738>
   20f94:	a180a636 	bltu	r20,r6,21230 <_malloc_r+0x634>
   20f98:	070000b4 	movhi	fp,2
   20f9c:	e716eb04 	addi	fp,fp,23468
   20fa0:	e0800017 	ldw	r2,0(fp)
   20fa4:	a887883a 	add	r3,r21,r2
   20fa8:	e0c00015 	stw	r3,0(fp)
   20fac:	3500e626 	beq	r6,r20,21348 <_malloc_r+0x74c>
   20fb0:	b9000017 	ldw	r4,0(r23)
   20fb4:	00bfffc4 	movi	r2,-1
   20fb8:	2080ee26 	beq	r4,r2,21374 <_malloc_r+0x778>
   20fbc:	a185c83a 	sub	r2,r20,r6
   20fc0:	10c5883a 	add	r2,r2,r3
   20fc4:	e0800015 	stw	r2,0(fp)
   20fc8:	a0c001cc 	andi	r3,r20,7
   20fcc:	1800bc26 	beq	r3,zero,212c0 <_malloc_r+0x6c4>
   20fd0:	a0e9c83a 	sub	r20,r20,r3
   20fd4:	00840204 	movi	r2,4104
   20fd8:	a5000204 	addi	r20,r20,8
   20fdc:	10c7c83a 	sub	r3,r2,r3
   20fe0:	a545883a 	add	r2,r20,r21
   20fe4:	1083ffcc 	andi	r2,r2,4095
   20fe8:	18abc83a 	sub	r21,r3,r2
   20fec:	a80b883a 	mov	r5,r21
   20ff0:	9009883a 	mov	r4,r18
   20ff4:	0021e1c0 	call	21e1c <_sbrk_r>
   20ff8:	00ffffc4 	movi	r3,-1
   20ffc:	10c0e126 	beq	r2,r3,21384 <_malloc_r+0x788>
   21000:	1505c83a 	sub	r2,r2,r20
   21004:	1545883a 	add	r2,r2,r21
   21008:	10800054 	ori	r2,r2,1
   2100c:	e0c00017 	ldw	r3,0(fp)
   21010:	9d000215 	stw	r20,8(r19)
   21014:	a0800115 	stw	r2,4(r20)
   21018:	a8c7883a 	add	r3,r21,r3
   2101c:	e0c00015 	stw	r3,0(fp)
   21020:	84c00e26 	beq	r16,r19,2105c <_malloc_r+0x460>
   21024:	018003c4 	movi	r6,15
   21028:	3580a72e 	bgeu	r6,r22,212c8 <_malloc_r+0x6cc>
   2102c:	81400117 	ldw	r5,4(r16)
   21030:	013ffe04 	movi	r4,-8
   21034:	b0bffd04 	addi	r2,r22,-12
   21038:	1104703a 	and	r2,r2,r4
   2103c:	2900004c 	andi	r4,r5,1
   21040:	2088b03a 	or	r4,r4,r2
   21044:	81000115 	stw	r4,4(r16)
   21048:	01400144 	movi	r5,5
   2104c:	8089883a 	add	r4,r16,r2
   21050:	21400115 	stw	r5,4(r4)
   21054:	21400215 	stw	r5,8(r4)
   21058:	3080cd36 	bltu	r6,r2,21390 <_malloc_r+0x794>
   2105c:	008000b4 	movhi	r2,2
   21060:	1096e504 	addi	r2,r2,23444
   21064:	11000017 	ldw	r4,0(r2)
   21068:	20c0012e 	bgeu	r4,r3,21070 <_malloc_r+0x474>
   2106c:	10c00015 	stw	r3,0(r2)
   21070:	008000b4 	movhi	r2,2
   21074:	1096e404 	addi	r2,r2,23440
   21078:	11000017 	ldw	r4,0(r2)
   2107c:	9c000217 	ldw	r16,8(r19)
   21080:	20c0012e 	bgeu	r4,r3,21088 <_malloc_r+0x48c>
   21084:	10c00015 	stw	r3,0(r2)
   21088:	80c00117 	ldw	r3,4(r16)
   2108c:	00bfff04 	movi	r2,-4
   21090:	1886703a 	and	r3,r3,r2
   21094:	1c45c83a 	sub	r2,r3,r17
   21098:	1c400236 	bltu	r3,r17,210a4 <_malloc_r+0x4a8>
   2109c:	00c003c4 	movi	r3,15
   210a0:	18800416 	blt	r3,r2,210b4 <_malloc_r+0x4b8>
   210a4:	9009883a 	mov	r4,r18
   210a8:	002345c0 	call	2345c <__malloc_unlock>
   210ac:	0005883a 	mov	r2,zero
   210b0:	003f7b06 	br	20ea0 <_malloc_r+0x2a4>
   210b4:	88c00054 	ori	r3,r17,1
   210b8:	80c00115 	stw	r3,4(r16)
   210bc:	8463883a 	add	r17,r16,r17
   210c0:	10800054 	ori	r2,r2,1
   210c4:	9c400215 	stw	r17,8(r19)
   210c8:	88800115 	stw	r2,4(r17)
   210cc:	9009883a 	mov	r4,r18
   210d0:	002345c0 	call	2345c <__malloc_unlock>
   210d4:	80800204 	addi	r2,r16,8
   210d8:	003f7106 	br	20ea0 <_malloc_r+0x2a4>
   210dc:	00c00504 	movi	r3,20
   210e0:	18804a2e 	bgeu	r3,r2,2120c <_malloc_r+0x610>
   210e4:	00c01504 	movi	r3,84
   210e8:	18806e36 	bltu	r3,r2,212a4 <_malloc_r+0x6a8>
   210ec:	8804d33a 	srli	r2,r17,12
   210f0:	12001bc4 	addi	r8,r2,111
   210f4:	11c01b84 	addi	r7,r2,110
   210f8:	4209883a 	add	r4,r8,r8
   210fc:	003edd06 	br	20c74 <_malloc_r+0x78>
   21100:	3804d27a 	srli	r2,r7,9
   21104:	00c00104 	movi	r3,4
   21108:	1880442e 	bgeu	r3,r2,2121c <_malloc_r+0x620>
   2110c:	00c00504 	movi	r3,20
   21110:	18808136 	bltu	r3,r2,21318 <_malloc_r+0x71c>
   21114:	11401704 	addi	r5,r2,92
   21118:	10c016c4 	addi	r3,r2,91
   2111c:	294b883a 	add	r5,r5,r5
   21120:	294b883a 	add	r5,r5,r5
   21124:	294b883a 	add	r5,r5,r5
   21128:	994b883a 	add	r5,r19,r5
   2112c:	28800017 	ldw	r2,0(r5)
   21130:	018000b4 	movhi	r6,2
   21134:	297ffe04 	addi	r5,r5,-8
   21138:	3192d704 	addi	r6,r6,19292
   2113c:	28806526 	beq	r5,r2,212d4 <_malloc_r+0x6d8>
   21140:	01bfff04 	movi	r6,-4
   21144:	10c00117 	ldw	r3,4(r2)
   21148:	1986703a 	and	r3,r3,r6
   2114c:	38c0022e 	bgeu	r7,r3,21158 <_malloc_r+0x55c>
   21150:	10800217 	ldw	r2,8(r2)
   21154:	28bffb1e 	bne	r5,r2,21144 <_malloc_r+0x548>
   21158:	11400317 	ldw	r5,12(r2)
   2115c:	98c00117 	ldw	r3,4(r19)
   21160:	81400315 	stw	r5,12(r16)
   21164:	80800215 	stw	r2,8(r16)
   21168:	2c000215 	stw	r16,8(r5)
   2116c:	14000315 	stw	r16,12(r2)
   21170:	003ef806 	br	20d54 <_malloc_r+0x158>
   21174:	88c00054 	ori	r3,r17,1
   21178:	80c00115 	stw	r3,4(r16)
   2117c:	8463883a 	add	r17,r16,r17
   21180:	34400515 	stw	r17,20(r6)
   21184:	34400415 	stw	r17,16(r6)
   21188:	10c00054 	ori	r3,r2,1
   2118c:	8a000315 	stw	r8,12(r17)
   21190:	8a000215 	stw	r8,8(r17)
   21194:	88c00115 	stw	r3,4(r17)
   21198:	88a3883a 	add	r17,r17,r2
   2119c:	88800015 	stw	r2,0(r17)
   211a0:	9009883a 	mov	r4,r18
   211a4:	002345c0 	call	2345c <__malloc_unlock>
   211a8:	80800204 	addi	r2,r16,8
   211ac:	003f3c06 	br	20ea0 <_malloc_r+0x2a4>
   211b0:	30c00117 	ldw	r3,4(r6)
   211b4:	003ee706 	br	20d54 <_malloc_r+0x158>
   211b8:	5ac00044 	addi	r11,r11,1
   211bc:	588000cc 	andi	r2,r11,3
   211c0:	31800204 	addi	r6,r6,8
   211c4:	103efd1e 	bne	r2,zero,20dbc <_malloc_r+0x1c0>
   211c8:	00002406 	br	2125c <_malloc_r+0x660>
   211cc:	14000317 	ldw	r16,12(r2)
   211d0:	143f251e 	bne	r2,r16,20e68 <_malloc_r+0x26c>
   211d4:	21000084 	addi	r4,r4,2
   211d8:	003ebc06 	br	20ccc <_malloc_r+0xd0>
   211dc:	8085883a 	add	r2,r16,r2
   211e0:	10c00117 	ldw	r3,4(r2)
   211e4:	81000317 	ldw	r4,12(r16)
   211e8:	81400217 	ldw	r5,8(r16)
   211ec:	18c00054 	ori	r3,r3,1
   211f0:	10c00115 	stw	r3,4(r2)
   211f4:	29000315 	stw	r4,12(r5)
   211f8:	21400215 	stw	r5,8(r4)
   211fc:	9009883a 	mov	r4,r18
   21200:	002345c0 	call	2345c <__malloc_unlock>
   21204:	80800204 	addi	r2,r16,8
   21208:	003f2506 	br	20ea0 <_malloc_r+0x2a4>
   2120c:	12001704 	addi	r8,r2,92
   21210:	11c016c4 	addi	r7,r2,91
   21214:	4209883a 	add	r4,r8,r8
   21218:	003e9606 	br	20c74 <_malloc_r+0x78>
   2121c:	3804d1ba 	srli	r2,r7,6
   21220:	11400e44 	addi	r5,r2,57
   21224:	10c00e04 	addi	r3,r2,56
   21228:	294b883a 	add	r5,r5,r5
   2122c:	003fbc06 	br	21120 <_malloc_r+0x524>
   21230:	84ff5926 	beq	r16,r19,20f98 <_malloc_r+0x39c>
   21234:	008000b4 	movhi	r2,2
   21238:	1092d704 	addi	r2,r2,19292
   2123c:	14000217 	ldw	r16,8(r2)
   21240:	00bfff04 	movi	r2,-4
   21244:	80c00117 	ldw	r3,4(r16)
   21248:	1886703a 	and	r3,r3,r2
   2124c:	003f9106 	br	21094 <_malloc_r+0x498>
   21250:	60800217 	ldw	r2,8(r12)
   21254:	213fffc4 	addi	r4,r4,-1
   21258:	1300651e 	bne	r2,r12,213f0 <_malloc_r+0x7f4>
   2125c:	208000cc 	andi	r2,r4,3
   21260:	633ffe04 	addi	r12,r12,-8
   21264:	103ffa1e 	bne	r2,zero,21250 <_malloc_r+0x654>
   21268:	98800117 	ldw	r2,4(r19)
   2126c:	0146303a 	nor	r3,zero,r5
   21270:	1884703a 	and	r2,r3,r2
   21274:	98800115 	stw	r2,4(r19)
   21278:	294b883a 	add	r5,r5,r5
   2127c:	117f2836 	bltu	r2,r5,20f20 <_malloc_r+0x324>
   21280:	283f2726 	beq	r5,zero,20f20 <_malloc_r+0x324>
   21284:	2886703a 	and	r3,r5,r2
   21288:	5809883a 	mov	r4,r11
   2128c:	183ec31e 	bne	r3,zero,20d9c <_malloc_r+0x1a0>
   21290:	294b883a 	add	r5,r5,r5
   21294:	2886703a 	and	r3,r5,r2
   21298:	21000104 	addi	r4,r4,4
   2129c:	183ffc26 	beq	r3,zero,21290 <_malloc_r+0x694>
   212a0:	003ebe06 	br	20d9c <_malloc_r+0x1a0>
   212a4:	00c05504 	movi	r3,340
   212a8:	18801236 	bltu	r3,r2,212f4 <_malloc_r+0x6f8>
   212ac:	8804d3fa 	srli	r2,r17,15
   212b0:	12001e04 	addi	r8,r2,120
   212b4:	11c01dc4 	addi	r7,r2,119
   212b8:	4209883a 	add	r4,r8,r8
   212bc:	003e6d06 	br	20c74 <_malloc_r+0x78>
   212c0:	00c40004 	movi	r3,4096
   212c4:	003f4606 	br	20fe0 <_malloc_r+0x3e4>
   212c8:	00800044 	movi	r2,1
   212cc:	a0800115 	stw	r2,4(r20)
   212d0:	003f7406 	br	210a4 <_malloc_r+0x4a8>
   212d4:	1805d0ba 	srai	r2,r3,2
   212d8:	01c00044 	movi	r7,1
   212dc:	30c00117 	ldw	r3,4(r6)
   212e0:	388e983a 	sll	r7,r7,r2
   212e4:	2805883a 	mov	r2,r5
   212e8:	38c6b03a 	or	r3,r7,r3
   212ec:	30c00115 	stw	r3,4(r6)
   212f0:	003f9b06 	br	21160 <_malloc_r+0x564>
   212f4:	00c15504 	movi	r3,1364
   212f8:	18801a36 	bltu	r3,r2,21364 <_malloc_r+0x768>
   212fc:	8804d4ba 	srli	r2,r17,18
   21300:	12001f44 	addi	r8,r2,125
   21304:	11c01f04 	addi	r7,r2,124
   21308:	4209883a 	add	r4,r8,r8
   2130c:	003e5906 	br	20c74 <_malloc_r+0x78>
   21310:	ad400404 	addi	r21,r21,16
   21314:	003f1706 	br	20f74 <_malloc_r+0x378>
   21318:	00c01504 	movi	r3,84
   2131c:	18802336 	bltu	r3,r2,213ac <_malloc_r+0x7b0>
   21320:	3804d33a 	srli	r2,r7,12
   21324:	11401bc4 	addi	r5,r2,111
   21328:	10c01b84 	addi	r3,r2,110
   2132c:	294b883a 	add	r5,r5,r5
   21330:	003f7b06 	br	21120 <_malloc_r+0x524>
   21334:	9c000217 	ldw	r16,8(r19)
   21338:	00bfff04 	movi	r2,-4
   2133c:	80c00117 	ldw	r3,4(r16)
   21340:	1886703a 	and	r3,r3,r2
   21344:	003f5306 	br	21094 <_malloc_r+0x498>
   21348:	3083ffcc 	andi	r2,r6,4095
   2134c:	103f181e 	bne	r2,zero,20fb0 <_malloc_r+0x3b4>
   21350:	99000217 	ldw	r4,8(r19)
   21354:	b545883a 	add	r2,r22,r21
   21358:	10800054 	ori	r2,r2,1
   2135c:	20800115 	stw	r2,4(r4)
   21360:	003f3e06 	br	2105c <_malloc_r+0x460>
   21364:	01003f84 	movi	r4,254
   21368:	02001fc4 	movi	r8,127
   2136c:	01c01f84 	movi	r7,126
   21370:	003e4006 	br	20c74 <_malloc_r+0x78>
   21374:	008000b4 	movhi	r2,2
   21378:	10945004 	addi	r2,r2,20800
   2137c:	15000015 	stw	r20,0(r2)
   21380:	003f1106 	br	20fc8 <_malloc_r+0x3cc>
   21384:	00800044 	movi	r2,1
   21388:	002b883a 	mov	r21,zero
   2138c:	003f1f06 	br	2100c <_malloc_r+0x410>
   21390:	81400204 	addi	r5,r16,8
   21394:	9009883a 	mov	r4,r18
   21398:	00226840 	call	22684 <_free_r>
   2139c:	008000b4 	movhi	r2,2
   213a0:	1096eb04 	addi	r2,r2,23468
   213a4:	10c00017 	ldw	r3,0(r2)
   213a8:	003f2c06 	br	2105c <_malloc_r+0x460>
   213ac:	00c05504 	movi	r3,340
   213b0:	18800536 	bltu	r3,r2,213c8 <_malloc_r+0x7cc>
   213b4:	3804d3fa 	srli	r2,r7,15
   213b8:	11401e04 	addi	r5,r2,120
   213bc:	10c01dc4 	addi	r3,r2,119
   213c0:	294b883a 	add	r5,r5,r5
   213c4:	003f5606 	br	21120 <_malloc_r+0x524>
   213c8:	00c15504 	movi	r3,1364
   213cc:	18800536 	bltu	r3,r2,213e4 <_malloc_r+0x7e8>
   213d0:	3804d4ba 	srli	r2,r7,18
   213d4:	11401f44 	addi	r5,r2,125
   213d8:	10c01f04 	addi	r3,r2,124
   213dc:	294b883a 	add	r5,r5,r5
   213e0:	003f4f06 	br	21120 <_malloc_r+0x524>
   213e4:	01403f84 	movi	r5,254
   213e8:	00c01f84 	movi	r3,126
   213ec:	003f4c06 	br	21120 <_malloc_r+0x524>
   213f0:	98800117 	ldw	r2,4(r19)
   213f4:	003fa006 	br	21278 <_malloc_r+0x67c>
   213f8:	8808d0fa 	srli	r4,r17,3
   213fc:	20800044 	addi	r2,r4,1
   21400:	1085883a 	add	r2,r2,r2
   21404:	003e9006 	br	20e48 <_malloc_r+0x24c>

00021408 <memchr>:
   21408:	208000cc 	andi	r2,r4,3
   2140c:	280f883a 	mov	r7,r5
   21410:	10003426 	beq	r2,zero,214e4 <memchr+0xdc>
   21414:	30bfffc4 	addi	r2,r6,-1
   21418:	30001a26 	beq	r6,zero,21484 <memchr+0x7c>
   2141c:	20c00003 	ldbu	r3,0(r4)
   21420:	29803fcc 	andi	r6,r5,255
   21424:	30c0051e 	bne	r6,r3,2143c <memchr+0x34>
   21428:	00001806 	br	2148c <memchr+0x84>
   2142c:	10001526 	beq	r2,zero,21484 <memchr+0x7c>
   21430:	20c00003 	ldbu	r3,0(r4)
   21434:	10bfffc4 	addi	r2,r2,-1
   21438:	30c01426 	beq	r6,r3,2148c <memchr+0x84>
   2143c:	21000044 	addi	r4,r4,1
   21440:	20c000cc 	andi	r3,r4,3
   21444:	183ff91e 	bne	r3,zero,2142c <memchr+0x24>
   21448:	020000c4 	movi	r8,3
   2144c:	40801136 	bltu	r8,r2,21494 <memchr+0x8c>
   21450:	10000c26 	beq	r2,zero,21484 <memchr+0x7c>
   21454:	20c00003 	ldbu	r3,0(r4)
   21458:	29403fcc 	andi	r5,r5,255
   2145c:	28c00b26 	beq	r5,r3,2148c <memchr+0x84>
   21460:	20c00044 	addi	r3,r4,1
   21464:	39803fcc 	andi	r6,r7,255
   21468:	2089883a 	add	r4,r4,r2
   2146c:	00000306 	br	2147c <memchr+0x74>
   21470:	18c00044 	addi	r3,r3,1
   21474:	197fffc3 	ldbu	r5,-1(r3)
   21478:	31400526 	beq	r6,r5,21490 <memchr+0x88>
   2147c:	1805883a 	mov	r2,r3
   21480:	20fffb1e 	bne	r4,r3,21470 <memchr+0x68>
   21484:	0005883a 	mov	r2,zero
   21488:	f800283a 	ret
   2148c:	2005883a 	mov	r2,r4
   21490:	f800283a 	ret
   21494:	28c03fcc 	andi	r3,r5,255
   21498:	1812923a 	slli	r9,r3,8
   2149c:	02ffbff4 	movhi	r11,65279
   214a0:	02a02074 	movhi	r10,32897
   214a4:	48d2b03a 	or	r9,r9,r3
   214a8:	4806943a 	slli	r3,r9,16
   214ac:	5affbfc4 	addi	r11,r11,-257
   214b0:	52a02004 	addi	r10,r10,-32640
   214b4:	48d2b03a 	or	r9,r9,r3
   214b8:	20c00017 	ldw	r3,0(r4)
   214bc:	48c6f03a 	xor	r3,r9,r3
   214c0:	1acd883a 	add	r6,r3,r11
   214c4:	00c6303a 	nor	r3,zero,r3
   214c8:	30c6703a 	and	r3,r6,r3
   214cc:	1a86703a 	and	r3,r3,r10
   214d0:	183fe01e 	bne	r3,zero,21454 <memchr+0x4c>
   214d4:	10bfff04 	addi	r2,r2,-4
   214d8:	21000104 	addi	r4,r4,4
   214dc:	40bff636 	bltu	r8,r2,214b8 <memchr+0xb0>
   214e0:	003fdb06 	br	21450 <memchr+0x48>
   214e4:	3005883a 	mov	r2,r6
   214e8:	003fd706 	br	21448 <memchr+0x40>

000214ec <memcpy>:
   214ec:	defffd04 	addi	sp,sp,-12
   214f0:	dfc00215 	stw	ra,8(sp)
   214f4:	dc400115 	stw	r17,4(sp)
   214f8:	dc000015 	stw	r16,0(sp)
   214fc:	00c003c4 	movi	r3,15
   21500:	2005883a 	mov	r2,r4
   21504:	1980452e 	bgeu	r3,r6,2161c <memcpy+0x130>
   21508:	2906b03a 	or	r3,r5,r4
   2150c:	18c000cc 	andi	r3,r3,3
   21510:	1800441e 	bne	r3,zero,21624 <memcpy+0x138>
   21514:	347ffc04 	addi	r17,r6,-16
   21518:	8822d13a 	srli	r17,r17,4
   2151c:	28c00104 	addi	r3,r5,4
   21520:	23400104 	addi	r13,r4,4
   21524:	8820913a 	slli	r16,r17,4
   21528:	2b000204 	addi	r12,r5,8
   2152c:	22c00204 	addi	r11,r4,8
   21530:	84000504 	addi	r16,r16,20
   21534:	2a800304 	addi	r10,r5,12
   21538:	22400304 	addi	r9,r4,12
   2153c:	2c21883a 	add	r16,r5,r16
   21540:	2811883a 	mov	r8,r5
   21544:	200f883a 	mov	r7,r4
   21548:	41000017 	ldw	r4,0(r8)
   2154c:	1fc00017 	ldw	ra,0(r3)
   21550:	63c00017 	ldw	r15,0(r12)
   21554:	39000015 	stw	r4,0(r7)
   21558:	53800017 	ldw	r14,0(r10)
   2155c:	6fc00015 	stw	ra,0(r13)
   21560:	5bc00015 	stw	r15,0(r11)
   21564:	4b800015 	stw	r14,0(r9)
   21568:	18c00404 	addi	r3,r3,16
   2156c:	39c00404 	addi	r7,r7,16
   21570:	42000404 	addi	r8,r8,16
   21574:	6b400404 	addi	r13,r13,16
   21578:	63000404 	addi	r12,r12,16
   2157c:	5ac00404 	addi	r11,r11,16
   21580:	52800404 	addi	r10,r10,16
   21584:	4a400404 	addi	r9,r9,16
   21588:	1c3fef1e 	bne	r3,r16,21548 <memcpy+0x5c>
   2158c:	89c00044 	addi	r7,r17,1
   21590:	380e913a 	slli	r7,r7,4
   21594:	310003cc 	andi	r4,r6,15
   21598:	02c000c4 	movi	r11,3
   2159c:	11c7883a 	add	r3,r2,r7
   215a0:	29cb883a 	add	r5,r5,r7
   215a4:	5900212e 	bgeu	r11,r4,2162c <memcpy+0x140>
   215a8:	1813883a 	mov	r9,r3
   215ac:	2811883a 	mov	r8,r5
   215b0:	200f883a 	mov	r7,r4
   215b4:	42800017 	ldw	r10,0(r8)
   215b8:	4a400104 	addi	r9,r9,4
   215bc:	39ffff04 	addi	r7,r7,-4
   215c0:	4abfff15 	stw	r10,-4(r9)
   215c4:	42000104 	addi	r8,r8,4
   215c8:	59fffa36 	bltu	r11,r7,215b4 <memcpy+0xc8>
   215cc:	213fff04 	addi	r4,r4,-4
   215d0:	2008d0ba 	srli	r4,r4,2
   215d4:	318000cc 	andi	r6,r6,3
   215d8:	21000044 	addi	r4,r4,1
   215dc:	2109883a 	add	r4,r4,r4
   215e0:	2109883a 	add	r4,r4,r4
   215e4:	1907883a 	add	r3,r3,r4
   215e8:	290b883a 	add	r5,r5,r4
   215ec:	30000626 	beq	r6,zero,21608 <memcpy+0x11c>
   215f0:	198d883a 	add	r6,r3,r6
   215f4:	29c00003 	ldbu	r7,0(r5)
   215f8:	18c00044 	addi	r3,r3,1
   215fc:	29400044 	addi	r5,r5,1
   21600:	19ffffc5 	stb	r7,-1(r3)
   21604:	19bffb1e 	bne	r3,r6,215f4 <memcpy+0x108>
   21608:	dfc00217 	ldw	ra,8(sp)
   2160c:	dc400117 	ldw	r17,4(sp)
   21610:	dc000017 	ldw	r16,0(sp)
   21614:	dec00304 	addi	sp,sp,12
   21618:	f800283a 	ret
   2161c:	2007883a 	mov	r3,r4
   21620:	003ff206 	br	215ec <memcpy+0x100>
   21624:	2007883a 	mov	r3,r4
   21628:	003ff106 	br	215f0 <memcpy+0x104>
   2162c:	200d883a 	mov	r6,r4
   21630:	003fee06 	br	215ec <memcpy+0x100>

00021634 <memmove>:
   21634:	2005883a 	mov	r2,r4
   21638:	29000b2e 	bgeu	r5,r4,21668 <memmove+0x34>
   2163c:	298f883a 	add	r7,r5,r6
   21640:	21c0092e 	bgeu	r4,r7,21668 <memmove+0x34>
   21644:	2187883a 	add	r3,r4,r6
   21648:	198bc83a 	sub	r5,r3,r6
   2164c:	30004826 	beq	r6,zero,21770 <memmove+0x13c>
   21650:	39ffffc4 	addi	r7,r7,-1
   21654:	39000003 	ldbu	r4,0(r7)
   21658:	18ffffc4 	addi	r3,r3,-1
   2165c:	19000005 	stb	r4,0(r3)
   21660:	28fffb1e 	bne	r5,r3,21650 <memmove+0x1c>
   21664:	f800283a 	ret
   21668:	00c003c4 	movi	r3,15
   2166c:	1980412e 	bgeu	r3,r6,21774 <memmove+0x140>
   21670:	2886b03a 	or	r3,r5,r2
   21674:	18c000cc 	andi	r3,r3,3
   21678:	1800401e 	bne	r3,zero,2177c <memmove+0x148>
   2167c:	33fffc04 	addi	r15,r6,-16
   21680:	781ed13a 	srli	r15,r15,4
   21684:	28c00104 	addi	r3,r5,4
   21688:	13400104 	addi	r13,r2,4
   2168c:	781c913a 	slli	r14,r15,4
   21690:	2b000204 	addi	r12,r5,8
   21694:	12c00204 	addi	r11,r2,8
   21698:	73800504 	addi	r14,r14,20
   2169c:	2a800304 	addi	r10,r5,12
   216a0:	12400304 	addi	r9,r2,12
   216a4:	2b9d883a 	add	r14,r5,r14
   216a8:	2811883a 	mov	r8,r5
   216ac:	100f883a 	mov	r7,r2
   216b0:	41000017 	ldw	r4,0(r8)
   216b4:	39c00404 	addi	r7,r7,16
   216b8:	18c00404 	addi	r3,r3,16
   216bc:	393ffc15 	stw	r4,-16(r7)
   216c0:	193ffc17 	ldw	r4,-16(r3)
   216c4:	6b400404 	addi	r13,r13,16
   216c8:	5ac00404 	addi	r11,r11,16
   216cc:	693ffc15 	stw	r4,-16(r13)
   216d0:	61000017 	ldw	r4,0(r12)
   216d4:	4a400404 	addi	r9,r9,16
   216d8:	42000404 	addi	r8,r8,16
   216dc:	593ffc15 	stw	r4,-16(r11)
   216e0:	51000017 	ldw	r4,0(r10)
   216e4:	63000404 	addi	r12,r12,16
   216e8:	52800404 	addi	r10,r10,16
   216ec:	493ffc15 	stw	r4,-16(r9)
   216f0:	1bbfef1e 	bne	r3,r14,216b0 <memmove+0x7c>
   216f4:	79000044 	addi	r4,r15,1
   216f8:	2008913a 	slli	r4,r4,4
   216fc:	328003cc 	andi	r10,r6,15
   21700:	02c000c4 	movi	r11,3
   21704:	1107883a 	add	r3,r2,r4
   21708:	290b883a 	add	r5,r5,r4
   2170c:	5a801e2e 	bgeu	r11,r10,21788 <memmove+0x154>
   21710:	1813883a 	mov	r9,r3
   21714:	2811883a 	mov	r8,r5
   21718:	500f883a 	mov	r7,r10
   2171c:	41000017 	ldw	r4,0(r8)
   21720:	4a400104 	addi	r9,r9,4
   21724:	39ffff04 	addi	r7,r7,-4
   21728:	493fff15 	stw	r4,-4(r9)
   2172c:	42000104 	addi	r8,r8,4
   21730:	59fffa36 	bltu	r11,r7,2171c <memmove+0xe8>
   21734:	513fff04 	addi	r4,r10,-4
   21738:	2008d0ba 	srli	r4,r4,2
   2173c:	318000cc 	andi	r6,r6,3
   21740:	21000044 	addi	r4,r4,1
   21744:	2109883a 	add	r4,r4,r4
   21748:	2109883a 	add	r4,r4,r4
   2174c:	1907883a 	add	r3,r3,r4
   21750:	290b883a 	add	r5,r5,r4
   21754:	30000b26 	beq	r6,zero,21784 <memmove+0x150>
   21758:	198d883a 	add	r6,r3,r6
   2175c:	29c00003 	ldbu	r7,0(r5)
   21760:	18c00044 	addi	r3,r3,1
   21764:	29400044 	addi	r5,r5,1
   21768:	19ffffc5 	stb	r7,-1(r3)
   2176c:	19bffb1e 	bne	r3,r6,2175c <memmove+0x128>
   21770:	f800283a 	ret
   21774:	1007883a 	mov	r3,r2
   21778:	003ff606 	br	21754 <memmove+0x120>
   2177c:	1007883a 	mov	r3,r2
   21780:	003ff506 	br	21758 <memmove+0x124>
   21784:	f800283a 	ret
   21788:	500d883a 	mov	r6,r10
   2178c:	003ff106 	br	21754 <memmove+0x120>

00021790 <memset>:
   21790:	20c000cc 	andi	r3,r4,3
   21794:	2005883a 	mov	r2,r4
   21798:	18004426 	beq	r3,zero,218ac <memset+0x11c>
   2179c:	31ffffc4 	addi	r7,r6,-1
   217a0:	30004026 	beq	r6,zero,218a4 <memset+0x114>
   217a4:	2813883a 	mov	r9,r5
   217a8:	200d883a 	mov	r6,r4
   217ac:	2007883a 	mov	r3,r4
   217b0:	00000406 	br	217c4 <memset+0x34>
   217b4:	3a3fffc4 	addi	r8,r7,-1
   217b8:	31800044 	addi	r6,r6,1
   217bc:	38003926 	beq	r7,zero,218a4 <memset+0x114>
   217c0:	400f883a 	mov	r7,r8
   217c4:	18c00044 	addi	r3,r3,1
   217c8:	32400005 	stb	r9,0(r6)
   217cc:	1a0000cc 	andi	r8,r3,3
   217d0:	403ff81e 	bne	r8,zero,217b4 <memset+0x24>
   217d4:	010000c4 	movi	r4,3
   217d8:	21c02d2e 	bgeu	r4,r7,21890 <memset+0x100>
   217dc:	29003fcc 	andi	r4,r5,255
   217e0:	200c923a 	slli	r6,r4,8
   217e4:	3108b03a 	or	r4,r6,r4
   217e8:	200c943a 	slli	r6,r4,16
   217ec:	218cb03a 	or	r6,r4,r6
   217f0:	010003c4 	movi	r4,15
   217f4:	21c0182e 	bgeu	r4,r7,21858 <memset+0xc8>
   217f8:	3b3ffc04 	addi	r12,r7,-16
   217fc:	6018d13a 	srli	r12,r12,4
   21800:	1a000104 	addi	r8,r3,4
   21804:	1ac00204 	addi	r11,r3,8
   21808:	6008913a 	slli	r4,r12,4
   2180c:	1a800304 	addi	r10,r3,12
   21810:	1813883a 	mov	r9,r3
   21814:	21000504 	addi	r4,r4,20
   21818:	1909883a 	add	r4,r3,r4
   2181c:	49800015 	stw	r6,0(r9)
   21820:	41800015 	stw	r6,0(r8)
   21824:	59800015 	stw	r6,0(r11)
   21828:	51800015 	stw	r6,0(r10)
   2182c:	42000404 	addi	r8,r8,16
   21830:	4a400404 	addi	r9,r9,16
   21834:	5ac00404 	addi	r11,r11,16
   21838:	52800404 	addi	r10,r10,16
   2183c:	413ff71e 	bne	r8,r4,2181c <memset+0x8c>
   21840:	63000044 	addi	r12,r12,1
   21844:	6018913a 	slli	r12,r12,4
   21848:	39c003cc 	andi	r7,r7,15
   2184c:	010000c4 	movi	r4,3
   21850:	1b07883a 	add	r3,r3,r12
   21854:	21c00e2e 	bgeu	r4,r7,21890 <memset+0x100>
   21858:	1813883a 	mov	r9,r3
   2185c:	3811883a 	mov	r8,r7
   21860:	010000c4 	movi	r4,3
   21864:	49800015 	stw	r6,0(r9)
   21868:	423fff04 	addi	r8,r8,-4
   2186c:	4a400104 	addi	r9,r9,4
   21870:	223ffc36 	bltu	r4,r8,21864 <memset+0xd4>
   21874:	393fff04 	addi	r4,r7,-4
   21878:	2008d0ba 	srli	r4,r4,2
   2187c:	39c000cc 	andi	r7,r7,3
   21880:	21000044 	addi	r4,r4,1
   21884:	2109883a 	add	r4,r4,r4
   21888:	2109883a 	add	r4,r4,r4
   2188c:	1907883a 	add	r3,r3,r4
   21890:	38000526 	beq	r7,zero,218a8 <memset+0x118>
   21894:	19cf883a 	add	r7,r3,r7
   21898:	19400005 	stb	r5,0(r3)
   2189c:	18c00044 	addi	r3,r3,1
   218a0:	38fffd1e 	bne	r7,r3,21898 <memset+0x108>
   218a4:	f800283a 	ret
   218a8:	f800283a 	ret
   218ac:	2007883a 	mov	r3,r4
   218b0:	300f883a 	mov	r7,r6
   218b4:	003fc706 	br	217d4 <memset+0x44>

000218b8 <_realloc_r>:
   218b8:	defff604 	addi	sp,sp,-40
   218bc:	dc800215 	stw	r18,8(sp)
   218c0:	dfc00915 	stw	ra,36(sp)
   218c4:	df000815 	stw	fp,32(sp)
   218c8:	ddc00715 	stw	r23,28(sp)
   218cc:	dd800615 	stw	r22,24(sp)
   218d0:	dd400515 	stw	r21,20(sp)
   218d4:	dd000415 	stw	r20,16(sp)
   218d8:	dcc00315 	stw	r19,12(sp)
   218dc:	dc400115 	stw	r17,4(sp)
   218e0:	dc000015 	stw	r16,0(sp)
   218e4:	3025883a 	mov	r18,r6
   218e8:	2800b726 	beq	r5,zero,21bc8 <_realloc_r+0x310>
   218ec:	282b883a 	mov	r21,r5
   218f0:	2029883a 	mov	r20,r4
   218f4:	00234380 	call	23438 <__malloc_lock>
   218f8:	a8bfff17 	ldw	r2,-4(r21)
   218fc:	043fff04 	movi	r16,-4
   21900:	90c002c4 	addi	r3,r18,11
   21904:	01000584 	movi	r4,22
   21908:	acfffe04 	addi	r19,r21,-8
   2190c:	1420703a 	and	r16,r2,r16
   21910:	20c0332e 	bgeu	r4,r3,219e0 <_realloc_r+0x128>
   21914:	047ffe04 	movi	r17,-8
   21918:	1c62703a 	and	r17,r3,r17
   2191c:	8807883a 	mov	r3,r17
   21920:	88005816 	blt	r17,zero,21a84 <_realloc_r+0x1cc>
   21924:	8c805736 	bltu	r17,r18,21a84 <_realloc_r+0x1cc>
   21928:	80c0300e 	bge	r16,r3,219ec <_realloc_r+0x134>
   2192c:	070000b4 	movhi	fp,2
   21930:	e712d704 	addi	fp,fp,19292
   21934:	e1c00217 	ldw	r7,8(fp)
   21938:	9c09883a 	add	r4,r19,r16
   2193c:	22000117 	ldw	r8,4(r4)
   21940:	21c06326 	beq	r4,r7,21ad0 <_realloc_r+0x218>
   21944:	017fff84 	movi	r5,-2
   21948:	414a703a 	and	r5,r8,r5
   2194c:	214b883a 	add	r5,r4,r5
   21950:	29800117 	ldw	r6,4(r5)
   21954:	3180004c 	andi	r6,r6,1
   21958:	30003f26 	beq	r6,zero,21a58 <_realloc_r+0x1a0>
   2195c:	1080004c 	andi	r2,r2,1
   21960:	10008326 	beq	r2,zero,21b70 <_realloc_r+0x2b8>
   21964:	900b883a 	mov	r5,r18
   21968:	a009883a 	mov	r4,r20
   2196c:	0020bfc0 	call	20bfc <_malloc_r>
   21970:	1025883a 	mov	r18,r2
   21974:	10011e26 	beq	r2,zero,21df0 <_realloc_r+0x538>
   21978:	a93fff17 	ldw	r4,-4(r21)
   2197c:	10fffe04 	addi	r3,r2,-8
   21980:	00bfff84 	movi	r2,-2
   21984:	2084703a 	and	r2,r4,r2
   21988:	9885883a 	add	r2,r19,r2
   2198c:	1880ee26 	beq	r3,r2,21d48 <_realloc_r+0x490>
   21990:	81bfff04 	addi	r6,r16,-4
   21994:	00800904 	movi	r2,36
   21998:	1180b836 	bltu	r2,r6,21c7c <_realloc_r+0x3c4>
   2199c:	00c004c4 	movi	r3,19
   219a0:	19809636 	bltu	r3,r6,21bfc <_realloc_r+0x344>
   219a4:	9005883a 	mov	r2,r18
   219a8:	a807883a 	mov	r3,r21
   219ac:	19000017 	ldw	r4,0(r3)
   219b0:	11000015 	stw	r4,0(r2)
   219b4:	19000117 	ldw	r4,4(r3)
   219b8:	11000115 	stw	r4,4(r2)
   219bc:	18c00217 	ldw	r3,8(r3)
   219c0:	10c00215 	stw	r3,8(r2)
   219c4:	a80b883a 	mov	r5,r21
   219c8:	a009883a 	mov	r4,r20
   219cc:	00226840 	call	22684 <_free_r>
   219d0:	a009883a 	mov	r4,r20
   219d4:	002345c0 	call	2345c <__malloc_unlock>
   219d8:	9005883a 	mov	r2,r18
   219dc:	00001206 	br	21a28 <_realloc_r+0x170>
   219e0:	00c00404 	movi	r3,16
   219e4:	1823883a 	mov	r17,r3
   219e8:	003fce06 	br	21924 <_realloc_r+0x6c>
   219ec:	a825883a 	mov	r18,r21
   219f0:	8445c83a 	sub	r2,r16,r17
   219f4:	00c003c4 	movi	r3,15
   219f8:	18802636 	bltu	r3,r2,21a94 <_realloc_r+0x1dc>
   219fc:	99800117 	ldw	r6,4(r19)
   21a00:	9c07883a 	add	r3,r19,r16
   21a04:	3180004c 	andi	r6,r6,1
   21a08:	3420b03a 	or	r16,r6,r16
   21a0c:	9c000115 	stw	r16,4(r19)
   21a10:	18800117 	ldw	r2,4(r3)
   21a14:	10800054 	ori	r2,r2,1
   21a18:	18800115 	stw	r2,4(r3)
   21a1c:	a009883a 	mov	r4,r20
   21a20:	002345c0 	call	2345c <__malloc_unlock>
   21a24:	9005883a 	mov	r2,r18
   21a28:	dfc00917 	ldw	ra,36(sp)
   21a2c:	df000817 	ldw	fp,32(sp)
   21a30:	ddc00717 	ldw	r23,28(sp)
   21a34:	dd800617 	ldw	r22,24(sp)
   21a38:	dd400517 	ldw	r21,20(sp)
   21a3c:	dd000417 	ldw	r20,16(sp)
   21a40:	dcc00317 	ldw	r19,12(sp)
   21a44:	dc800217 	ldw	r18,8(sp)
   21a48:	dc400117 	ldw	r17,4(sp)
   21a4c:	dc000017 	ldw	r16,0(sp)
   21a50:	dec00a04 	addi	sp,sp,40
   21a54:	f800283a 	ret
   21a58:	017fff04 	movi	r5,-4
   21a5c:	414a703a 	and	r5,r8,r5
   21a60:	814d883a 	add	r6,r16,r5
   21a64:	30c01f16 	blt	r6,r3,21ae4 <_realloc_r+0x22c>
   21a68:	20800317 	ldw	r2,12(r4)
   21a6c:	20c00217 	ldw	r3,8(r4)
   21a70:	a825883a 	mov	r18,r21
   21a74:	3021883a 	mov	r16,r6
   21a78:	18800315 	stw	r2,12(r3)
   21a7c:	10c00215 	stw	r3,8(r2)
   21a80:	003fdb06 	br	219f0 <_realloc_r+0x138>
   21a84:	00800304 	movi	r2,12
   21a88:	a0800015 	stw	r2,0(r20)
   21a8c:	0005883a 	mov	r2,zero
   21a90:	003fe506 	br	21a28 <_realloc_r+0x170>
   21a94:	98c00117 	ldw	r3,4(r19)
   21a98:	9c4b883a 	add	r5,r19,r17
   21a9c:	11000054 	ori	r4,r2,1
   21aa0:	18c0004c 	andi	r3,r3,1
   21aa4:	1c62b03a 	or	r17,r3,r17
   21aa8:	9c400115 	stw	r17,4(r19)
   21aac:	29000115 	stw	r4,4(r5)
   21ab0:	2885883a 	add	r2,r5,r2
   21ab4:	10c00117 	ldw	r3,4(r2)
   21ab8:	29400204 	addi	r5,r5,8
   21abc:	a009883a 	mov	r4,r20
   21ac0:	18c00054 	ori	r3,r3,1
   21ac4:	10c00115 	stw	r3,4(r2)
   21ac8:	00226840 	call	22684 <_free_r>
   21acc:	003fd306 	br	21a1c <_realloc_r+0x164>
   21ad0:	017fff04 	movi	r5,-4
   21ad4:	414a703a 	and	r5,r8,r5
   21ad8:	89800404 	addi	r6,r17,16
   21adc:	8151883a 	add	r8,r16,r5
   21ae0:	4180590e 	bge	r8,r6,21c48 <_realloc_r+0x390>
   21ae4:	1080004c 	andi	r2,r2,1
   21ae8:	103f9e1e 	bne	r2,zero,21964 <_realloc_r+0xac>
   21aec:	adbffe17 	ldw	r22,-8(r21)
   21af0:	00bfff04 	movi	r2,-4
   21af4:	9dadc83a 	sub	r22,r19,r22
   21af8:	b1800117 	ldw	r6,4(r22)
   21afc:	3084703a 	and	r2,r6,r2
   21b00:	20002026 	beq	r4,zero,21b84 <_realloc_r+0x2cc>
   21b04:	80af883a 	add	r23,r16,r2
   21b08:	b96f883a 	add	r23,r23,r5
   21b0c:	21c05f26 	beq	r4,r7,21c8c <_realloc_r+0x3d4>
   21b10:	b8c01c16 	blt	r23,r3,21b84 <_realloc_r+0x2cc>
   21b14:	20800317 	ldw	r2,12(r4)
   21b18:	20c00217 	ldw	r3,8(r4)
   21b1c:	81bfff04 	addi	r6,r16,-4
   21b20:	01000904 	movi	r4,36
   21b24:	18800315 	stw	r2,12(r3)
   21b28:	10c00215 	stw	r3,8(r2)
   21b2c:	b0c00217 	ldw	r3,8(r22)
   21b30:	b0800317 	ldw	r2,12(r22)
   21b34:	b4800204 	addi	r18,r22,8
   21b38:	18800315 	stw	r2,12(r3)
   21b3c:	10c00215 	stw	r3,8(r2)
   21b40:	21801b36 	bltu	r4,r6,21bb0 <_realloc_r+0x2f8>
   21b44:	008004c4 	movi	r2,19
   21b48:	1180352e 	bgeu	r2,r6,21c20 <_realloc_r+0x368>
   21b4c:	a8800017 	ldw	r2,0(r21)
   21b50:	b0800215 	stw	r2,8(r22)
   21b54:	a8800117 	ldw	r2,4(r21)
   21b58:	b0800315 	stw	r2,12(r22)
   21b5c:	008006c4 	movi	r2,27
   21b60:	11807f36 	bltu	r2,r6,21d60 <_realloc_r+0x4a8>
   21b64:	b0800404 	addi	r2,r22,16
   21b68:	ad400204 	addi	r21,r21,8
   21b6c:	00002d06 	br	21c24 <_realloc_r+0x36c>
   21b70:	adbffe17 	ldw	r22,-8(r21)
   21b74:	00bfff04 	movi	r2,-4
   21b78:	9dadc83a 	sub	r22,r19,r22
   21b7c:	b1000117 	ldw	r4,4(r22)
   21b80:	2084703a 	and	r2,r4,r2
   21b84:	b03f7726 	beq	r22,zero,21964 <_realloc_r+0xac>
   21b88:	80af883a 	add	r23,r16,r2
   21b8c:	b8ff7516 	blt	r23,r3,21964 <_realloc_r+0xac>
   21b90:	b0800317 	ldw	r2,12(r22)
   21b94:	b0c00217 	ldw	r3,8(r22)
   21b98:	81bfff04 	addi	r6,r16,-4
   21b9c:	01000904 	movi	r4,36
   21ba0:	18800315 	stw	r2,12(r3)
   21ba4:	10c00215 	stw	r3,8(r2)
   21ba8:	b4800204 	addi	r18,r22,8
   21bac:	21bfe52e 	bgeu	r4,r6,21b44 <_realloc_r+0x28c>
   21bb0:	a80b883a 	mov	r5,r21
   21bb4:	9009883a 	mov	r4,r18
   21bb8:	00216340 	call	21634 <memmove>
   21bbc:	b821883a 	mov	r16,r23
   21bc0:	b027883a 	mov	r19,r22
   21bc4:	003f8a06 	br	219f0 <_realloc_r+0x138>
   21bc8:	300b883a 	mov	r5,r6
   21bcc:	dfc00917 	ldw	ra,36(sp)
   21bd0:	df000817 	ldw	fp,32(sp)
   21bd4:	ddc00717 	ldw	r23,28(sp)
   21bd8:	dd800617 	ldw	r22,24(sp)
   21bdc:	dd400517 	ldw	r21,20(sp)
   21be0:	dd000417 	ldw	r20,16(sp)
   21be4:	dcc00317 	ldw	r19,12(sp)
   21be8:	dc800217 	ldw	r18,8(sp)
   21bec:	dc400117 	ldw	r17,4(sp)
   21bf0:	dc000017 	ldw	r16,0(sp)
   21bf4:	dec00a04 	addi	sp,sp,40
   21bf8:	0020bfc1 	jmpi	20bfc <_malloc_r>
   21bfc:	a8c00017 	ldw	r3,0(r21)
   21c00:	90c00015 	stw	r3,0(r18)
   21c04:	a8c00117 	ldw	r3,4(r21)
   21c08:	90c00115 	stw	r3,4(r18)
   21c0c:	00c006c4 	movi	r3,27
   21c10:	19804536 	bltu	r3,r6,21d28 <_realloc_r+0x470>
   21c14:	90800204 	addi	r2,r18,8
   21c18:	a8c00204 	addi	r3,r21,8
   21c1c:	003f6306 	br	219ac <_realloc_r+0xf4>
   21c20:	9005883a 	mov	r2,r18
   21c24:	a8c00017 	ldw	r3,0(r21)
   21c28:	b821883a 	mov	r16,r23
   21c2c:	b027883a 	mov	r19,r22
   21c30:	10c00015 	stw	r3,0(r2)
   21c34:	a8c00117 	ldw	r3,4(r21)
   21c38:	10c00115 	stw	r3,4(r2)
   21c3c:	a8c00217 	ldw	r3,8(r21)
   21c40:	10c00215 	stw	r3,8(r2)
   21c44:	003f6a06 	br	219f0 <_realloc_r+0x138>
   21c48:	9c67883a 	add	r19,r19,r17
   21c4c:	4445c83a 	sub	r2,r8,r17
   21c50:	e4c00215 	stw	r19,8(fp)
   21c54:	10800054 	ori	r2,r2,1
   21c58:	98800115 	stw	r2,4(r19)
   21c5c:	a8bfff17 	ldw	r2,-4(r21)
   21c60:	a009883a 	mov	r4,r20
   21c64:	1080004c 	andi	r2,r2,1
   21c68:	1462b03a 	or	r17,r2,r17
   21c6c:	ac7fff15 	stw	r17,-4(r21)
   21c70:	002345c0 	call	2345c <__malloc_unlock>
   21c74:	a805883a 	mov	r2,r21
   21c78:	003f6b06 	br	21a28 <_realloc_r+0x170>
   21c7c:	a80b883a 	mov	r5,r21
   21c80:	9009883a 	mov	r4,r18
   21c84:	00216340 	call	21634 <memmove>
   21c88:	003f4e06 	br	219c4 <_realloc_r+0x10c>
   21c8c:	89000404 	addi	r4,r17,16
   21c90:	b93fbc16 	blt	r23,r4,21b84 <_realloc_r+0x2cc>
   21c94:	b0800317 	ldw	r2,12(r22)
   21c98:	b0c00217 	ldw	r3,8(r22)
   21c9c:	81bfff04 	addi	r6,r16,-4
   21ca0:	01000904 	movi	r4,36
   21ca4:	18800315 	stw	r2,12(r3)
   21ca8:	10c00215 	stw	r3,8(r2)
   21cac:	b4800204 	addi	r18,r22,8
   21cb0:	21804336 	bltu	r4,r6,21dc0 <_realloc_r+0x508>
   21cb4:	008004c4 	movi	r2,19
   21cb8:	11803f2e 	bgeu	r2,r6,21db8 <_realloc_r+0x500>
   21cbc:	a8800017 	ldw	r2,0(r21)
   21cc0:	b0800215 	stw	r2,8(r22)
   21cc4:	a8800117 	ldw	r2,4(r21)
   21cc8:	b0800315 	stw	r2,12(r22)
   21ccc:	008006c4 	movi	r2,27
   21cd0:	11803f36 	bltu	r2,r6,21dd0 <_realloc_r+0x518>
   21cd4:	b0800404 	addi	r2,r22,16
   21cd8:	ad400204 	addi	r21,r21,8
   21cdc:	a8c00017 	ldw	r3,0(r21)
   21ce0:	10c00015 	stw	r3,0(r2)
   21ce4:	a8c00117 	ldw	r3,4(r21)
   21ce8:	10c00115 	stw	r3,4(r2)
   21cec:	a8c00217 	ldw	r3,8(r21)
   21cf0:	10c00215 	stw	r3,8(r2)
   21cf4:	b447883a 	add	r3,r22,r17
   21cf8:	bc45c83a 	sub	r2,r23,r17
   21cfc:	e0c00215 	stw	r3,8(fp)
   21d00:	10800054 	ori	r2,r2,1
   21d04:	18800115 	stw	r2,4(r3)
   21d08:	b0800117 	ldw	r2,4(r22)
   21d0c:	a009883a 	mov	r4,r20
   21d10:	1080004c 	andi	r2,r2,1
   21d14:	1462b03a 	or	r17,r2,r17
   21d18:	b4400115 	stw	r17,4(r22)
   21d1c:	002345c0 	call	2345c <__malloc_unlock>
   21d20:	9005883a 	mov	r2,r18
   21d24:	003f4006 	br	21a28 <_realloc_r+0x170>
   21d28:	a8c00217 	ldw	r3,8(r21)
   21d2c:	90c00215 	stw	r3,8(r18)
   21d30:	a8c00317 	ldw	r3,12(r21)
   21d34:	90c00315 	stw	r3,12(r18)
   21d38:	30801126 	beq	r6,r2,21d80 <_realloc_r+0x4c8>
   21d3c:	90800404 	addi	r2,r18,16
   21d40:	a8c00404 	addi	r3,r21,16
   21d44:	003f1906 	br	219ac <_realloc_r+0xf4>
   21d48:	90ffff17 	ldw	r3,-4(r18)
   21d4c:	00bfff04 	movi	r2,-4
   21d50:	a825883a 	mov	r18,r21
   21d54:	1884703a 	and	r2,r3,r2
   21d58:	80a1883a 	add	r16,r16,r2
   21d5c:	003f2406 	br	219f0 <_realloc_r+0x138>
   21d60:	a8800217 	ldw	r2,8(r21)
   21d64:	b0800415 	stw	r2,16(r22)
   21d68:	a8800317 	ldw	r2,12(r21)
   21d6c:	b0800515 	stw	r2,20(r22)
   21d70:	31000a26 	beq	r6,r4,21d9c <_realloc_r+0x4e4>
   21d74:	b0800604 	addi	r2,r22,24
   21d78:	ad400404 	addi	r21,r21,16
   21d7c:	003fa906 	br	21c24 <_realloc_r+0x36c>
   21d80:	a9000417 	ldw	r4,16(r21)
   21d84:	90800604 	addi	r2,r18,24
   21d88:	a8c00604 	addi	r3,r21,24
   21d8c:	91000415 	stw	r4,16(r18)
   21d90:	a9000517 	ldw	r4,20(r21)
   21d94:	91000515 	stw	r4,20(r18)
   21d98:	003f0406 	br	219ac <_realloc_r+0xf4>
   21d9c:	a8c00417 	ldw	r3,16(r21)
   21da0:	ad400604 	addi	r21,r21,24
   21da4:	b0800804 	addi	r2,r22,32
   21da8:	b0c00615 	stw	r3,24(r22)
   21dac:	a8ffff17 	ldw	r3,-4(r21)
   21db0:	b0c00715 	stw	r3,28(r22)
   21db4:	003f9b06 	br	21c24 <_realloc_r+0x36c>
   21db8:	9005883a 	mov	r2,r18
   21dbc:	003fc706 	br	21cdc <_realloc_r+0x424>
   21dc0:	a80b883a 	mov	r5,r21
   21dc4:	9009883a 	mov	r4,r18
   21dc8:	00216340 	call	21634 <memmove>
   21dcc:	003fc906 	br	21cf4 <_realloc_r+0x43c>
   21dd0:	a8800217 	ldw	r2,8(r21)
   21dd4:	b0800415 	stw	r2,16(r22)
   21dd8:	a8800317 	ldw	r2,12(r21)
   21ddc:	b0800515 	stw	r2,20(r22)
   21de0:	31000726 	beq	r6,r4,21e00 <_realloc_r+0x548>
   21de4:	b0800604 	addi	r2,r22,24
   21de8:	ad400404 	addi	r21,r21,16
   21dec:	003fbb06 	br	21cdc <_realloc_r+0x424>
   21df0:	a009883a 	mov	r4,r20
   21df4:	002345c0 	call	2345c <__malloc_unlock>
   21df8:	0005883a 	mov	r2,zero
   21dfc:	003f0a06 	br	21a28 <_realloc_r+0x170>
   21e00:	a8c00417 	ldw	r3,16(r21)
   21e04:	ad400604 	addi	r21,r21,24
   21e08:	b0800804 	addi	r2,r22,32
   21e0c:	b0c00615 	stw	r3,24(r22)
   21e10:	a8ffff17 	ldw	r3,-4(r21)
   21e14:	b0c00715 	stw	r3,28(r22)
   21e18:	003fb006 	br	21cdc <_realloc_r+0x424>

00021e1c <_sbrk_r>:
   21e1c:	defffd04 	addi	sp,sp,-12
   21e20:	dc000015 	stw	r16,0(sp)
   21e24:	040000b4 	movhi	r16,2
   21e28:	dc400115 	stw	r17,4(sp)
   21e2c:	8416e704 	addi	r16,r16,23452
   21e30:	2023883a 	mov	r17,r4
   21e34:	2809883a 	mov	r4,r5
   21e38:	dfc00215 	stw	ra,8(sp)
   21e3c:	80000015 	stw	zero,0(r16)
   21e40:	00236440 	call	23644 <sbrk>
   21e44:	00ffffc4 	movi	r3,-1
   21e48:	10c00526 	beq	r2,r3,21e60 <_sbrk_r+0x44>
   21e4c:	dfc00217 	ldw	ra,8(sp)
   21e50:	dc400117 	ldw	r17,4(sp)
   21e54:	dc000017 	ldw	r16,0(sp)
   21e58:	dec00304 	addi	sp,sp,12
   21e5c:	f800283a 	ret
   21e60:	80c00017 	ldw	r3,0(r16)
   21e64:	183ff926 	beq	r3,zero,21e4c <_sbrk_r+0x30>
   21e68:	88c00015 	stw	r3,0(r17)
   21e6c:	003ff706 	br	21e4c <_sbrk_r+0x30>

00021e70 <__sread>:
   21e70:	defffe04 	addi	sp,sp,-8
   21e74:	dc000015 	stw	r16,0(sp)
   21e78:	2821883a 	mov	r16,r5
   21e7c:	2940038f 	ldh	r5,14(r5)
   21e80:	dfc00115 	stw	ra,4(sp)
   21e84:	0022bb00 	call	22bb0 <_read_r>
   21e88:	10000716 	blt	r2,zero,21ea8 <__sread+0x38>
   21e8c:	80c01417 	ldw	r3,80(r16)
   21e90:	1887883a 	add	r3,r3,r2
   21e94:	80c01415 	stw	r3,80(r16)
   21e98:	dfc00117 	ldw	ra,4(sp)
   21e9c:	dc000017 	ldw	r16,0(sp)
   21ea0:	dec00204 	addi	sp,sp,8
   21ea4:	f800283a 	ret
   21ea8:	80c0030b 	ldhu	r3,12(r16)
   21eac:	18fbffcc 	andi	r3,r3,61439
   21eb0:	80c0030d 	sth	r3,12(r16)
   21eb4:	dfc00117 	ldw	ra,4(sp)
   21eb8:	dc000017 	ldw	r16,0(sp)
   21ebc:	dec00204 	addi	sp,sp,8
   21ec0:	f800283a 	ret

00021ec4 <__seofread>:
   21ec4:	0005883a 	mov	r2,zero
   21ec8:	f800283a 	ret

00021ecc <__swrite>:
   21ecc:	2880030b 	ldhu	r2,12(r5)
   21ed0:	defffb04 	addi	sp,sp,-20
   21ed4:	dcc00315 	stw	r19,12(sp)
   21ed8:	dc800215 	stw	r18,8(sp)
   21edc:	dc400115 	stw	r17,4(sp)
   21ee0:	dc000015 	stw	r16,0(sp)
   21ee4:	dfc00415 	stw	ra,16(sp)
   21ee8:	10c0400c 	andi	r3,r2,256
   21eec:	2821883a 	mov	r16,r5
   21ef0:	2023883a 	mov	r17,r4
   21ef4:	3025883a 	mov	r18,r6
   21ef8:	3827883a 	mov	r19,r7
   21efc:	18000526 	beq	r3,zero,21f14 <__swrite+0x48>
   21f00:	2940038f 	ldh	r5,14(r5)
   21f04:	01c00084 	movi	r7,2
   21f08:	000d883a 	mov	r6,zero
   21f0c:	00229940 	call	22994 <_lseek_r>
   21f10:	8080030b 	ldhu	r2,12(r16)
   21f14:	8140038f 	ldh	r5,14(r16)
   21f18:	10bbffcc 	andi	r2,r2,61439
   21f1c:	980f883a 	mov	r7,r19
   21f20:	900d883a 	mov	r6,r18
   21f24:	8809883a 	mov	r4,r17
   21f28:	8080030d 	sth	r2,12(r16)
   21f2c:	dfc00417 	ldw	ra,16(sp)
   21f30:	dcc00317 	ldw	r19,12(sp)
   21f34:	dc800217 	ldw	r18,8(sp)
   21f38:	dc400117 	ldw	r17,4(sp)
   21f3c:	dc000017 	ldw	r16,0(sp)
   21f40:	dec00504 	addi	sp,sp,20
   21f44:	0021fac1 	jmpi	21fac <_write_r>

00021f48 <__sseek>:
   21f48:	defffe04 	addi	sp,sp,-8
   21f4c:	dc000015 	stw	r16,0(sp)
   21f50:	2821883a 	mov	r16,r5
   21f54:	2940038f 	ldh	r5,14(r5)
   21f58:	dfc00115 	stw	ra,4(sp)
   21f5c:	00229940 	call	22994 <_lseek_r>
   21f60:	00ffffc4 	movi	r3,-1
   21f64:	10c00826 	beq	r2,r3,21f88 <__sseek+0x40>
   21f68:	80c0030b 	ldhu	r3,12(r16)
   21f6c:	80801415 	stw	r2,80(r16)
   21f70:	18c40014 	ori	r3,r3,4096
   21f74:	80c0030d 	sth	r3,12(r16)
   21f78:	dfc00117 	ldw	ra,4(sp)
   21f7c:	dc000017 	ldw	r16,0(sp)
   21f80:	dec00204 	addi	sp,sp,8
   21f84:	f800283a 	ret
   21f88:	80c0030b 	ldhu	r3,12(r16)
   21f8c:	18fbffcc 	andi	r3,r3,61439
   21f90:	80c0030d 	sth	r3,12(r16)
   21f94:	dfc00117 	ldw	ra,4(sp)
   21f98:	dc000017 	ldw	r16,0(sp)
   21f9c:	dec00204 	addi	sp,sp,8
   21fa0:	f800283a 	ret

00021fa4 <__sclose>:
   21fa4:	2940038f 	ldh	r5,14(r5)
   21fa8:	00221601 	jmpi	22160 <_close_r>

00021fac <_write_r>:
   21fac:	defffd04 	addi	sp,sp,-12
   21fb0:	2805883a 	mov	r2,r5
   21fb4:	dc000015 	stw	r16,0(sp)
   21fb8:	040000b4 	movhi	r16,2
   21fbc:	dc400115 	stw	r17,4(sp)
   21fc0:	300b883a 	mov	r5,r6
   21fc4:	8416e704 	addi	r16,r16,23452
   21fc8:	2023883a 	mov	r17,r4
   21fcc:	380d883a 	mov	r6,r7
   21fd0:	1009883a 	mov	r4,r2
   21fd4:	dfc00215 	stw	ra,8(sp)
   21fd8:	80000015 	stw	zero,0(r16)
   21fdc:	00237300 	call	23730 <write>
   21fe0:	00ffffc4 	movi	r3,-1
   21fe4:	10c00526 	beq	r2,r3,21ffc <_write_r+0x50>
   21fe8:	dfc00217 	ldw	ra,8(sp)
   21fec:	dc400117 	ldw	r17,4(sp)
   21ff0:	dc000017 	ldw	r16,0(sp)
   21ff4:	dec00304 	addi	sp,sp,12
   21ff8:	f800283a 	ret
   21ffc:	80c00017 	ldw	r3,0(r16)
   22000:	183ff926 	beq	r3,zero,21fe8 <_write_r+0x3c>
   22004:	88c00015 	stw	r3,0(r17)
   22008:	003ff706 	br	21fe8 <_write_r+0x3c>

0002200c <__swsetup_r>:
   2200c:	008000b4 	movhi	r2,2
   22010:	defffd04 	addi	sp,sp,-12
   22014:	10944f04 	addi	r2,r2,20796
   22018:	dc400115 	stw	r17,4(sp)
   2201c:	2023883a 	mov	r17,r4
   22020:	11000017 	ldw	r4,0(r2)
   22024:	dc000015 	stw	r16,0(sp)
   22028:	dfc00215 	stw	ra,8(sp)
   2202c:	2821883a 	mov	r16,r5
   22030:	20000226 	beq	r4,zero,2203c <__swsetup_r+0x30>
   22034:	20800e17 	ldw	r2,56(r4)
   22038:	10003126 	beq	r2,zero,22100 <__swsetup_r+0xf4>
   2203c:	8080030b 	ldhu	r2,12(r16)
   22040:	10c0020c 	andi	r3,r2,8
   22044:	1009883a 	mov	r4,r2
   22048:	18000f26 	beq	r3,zero,22088 <__swsetup_r+0x7c>
   2204c:	80c00417 	ldw	r3,16(r16)
   22050:	18001526 	beq	r3,zero,220a8 <__swsetup_r+0x9c>
   22054:	1100004c 	andi	r4,r2,1
   22058:	20001c1e 	bne	r4,zero,220cc <__swsetup_r+0xc0>
   2205c:	1080008c 	andi	r2,r2,2
   22060:	1000291e 	bne	r2,zero,22108 <__swsetup_r+0xfc>
   22064:	80800517 	ldw	r2,20(r16)
   22068:	80800215 	stw	r2,8(r16)
   2206c:	18001c26 	beq	r3,zero,220e0 <__swsetup_r+0xd4>
   22070:	0005883a 	mov	r2,zero
   22074:	dfc00217 	ldw	ra,8(sp)
   22078:	dc400117 	ldw	r17,4(sp)
   2207c:	dc000017 	ldw	r16,0(sp)
   22080:	dec00304 	addi	sp,sp,12
   22084:	f800283a 	ret
   22088:	2080040c 	andi	r2,r4,16
   2208c:	10002e26 	beq	r2,zero,22148 <__swsetup_r+0x13c>
   22090:	2080010c 	andi	r2,r4,4
   22094:	10001e1e 	bne	r2,zero,22110 <__swsetup_r+0x104>
   22098:	80c00417 	ldw	r3,16(r16)
   2209c:	20800214 	ori	r2,r4,8
   220a0:	8080030d 	sth	r2,12(r16)
   220a4:	183feb1e 	bne	r3,zero,22054 <__swsetup_r+0x48>
   220a8:	1100a00c 	andi	r4,r2,640
   220ac:	01408004 	movi	r5,512
   220b0:	217fe826 	beq	r4,r5,22054 <__swsetup_r+0x48>
   220b4:	800b883a 	mov	r5,r16
   220b8:	8809883a 	mov	r4,r17
   220bc:	00229f40 	call	229f4 <__smakebuf_r>
   220c0:	8080030b 	ldhu	r2,12(r16)
   220c4:	80c00417 	ldw	r3,16(r16)
   220c8:	003fe206 	br	22054 <__swsetup_r+0x48>
   220cc:	80800517 	ldw	r2,20(r16)
   220d0:	80000215 	stw	zero,8(r16)
   220d4:	0085c83a 	sub	r2,zero,r2
   220d8:	80800615 	stw	r2,24(r16)
   220dc:	183fe41e 	bne	r3,zero,22070 <__swsetup_r+0x64>
   220e0:	80c0030b 	ldhu	r3,12(r16)
   220e4:	0005883a 	mov	r2,zero
   220e8:	1900200c 	andi	r4,r3,128
   220ec:	203fe126 	beq	r4,zero,22074 <__swsetup_r+0x68>
   220f0:	18c01014 	ori	r3,r3,64
   220f4:	80c0030d 	sth	r3,12(r16)
   220f8:	00bfffc4 	movi	r2,-1
   220fc:	003fdd06 	br	22074 <__swsetup_r+0x68>
   22100:	002055c0 	call	2055c <__sinit>
   22104:	003fcd06 	br	2203c <__swsetup_r+0x30>
   22108:	0005883a 	mov	r2,zero
   2210c:	003fd606 	br	22068 <__swsetup_r+0x5c>
   22110:	81400c17 	ldw	r5,48(r16)
   22114:	28000626 	beq	r5,zero,22130 <__swsetup_r+0x124>
   22118:	80801004 	addi	r2,r16,64
   2211c:	28800326 	beq	r5,r2,2212c <__swsetup_r+0x120>
   22120:	8809883a 	mov	r4,r17
   22124:	00226840 	call	22684 <_free_r>
   22128:	8100030b 	ldhu	r4,12(r16)
   2212c:	80000c15 	stw	zero,48(r16)
   22130:	80c00417 	ldw	r3,16(r16)
   22134:	00bff6c4 	movi	r2,-37
   22138:	1108703a 	and	r4,r2,r4
   2213c:	80000115 	stw	zero,4(r16)
   22140:	80c00015 	stw	r3,0(r16)
   22144:	003fd506 	br	2209c <__swsetup_r+0x90>
   22148:	00800244 	movi	r2,9
   2214c:	88800015 	stw	r2,0(r17)
   22150:	20801014 	ori	r2,r4,64
   22154:	8080030d 	sth	r2,12(r16)
   22158:	00bfffc4 	movi	r2,-1
   2215c:	003fc506 	br	22074 <__swsetup_r+0x68>

00022160 <_close_r>:
   22160:	defffd04 	addi	sp,sp,-12
   22164:	dc000015 	stw	r16,0(sp)
   22168:	040000b4 	movhi	r16,2
   2216c:	dc400115 	stw	r17,4(sp)
   22170:	8416e704 	addi	r16,r16,23452
   22174:	2023883a 	mov	r17,r4
   22178:	2809883a 	mov	r4,r5
   2217c:	dfc00215 	stw	ra,8(sp)
   22180:	80000015 	stw	zero,0(r16)
   22184:	0022ed80 	call	22ed8 <close>
   22188:	00ffffc4 	movi	r3,-1
   2218c:	10c00526 	beq	r2,r3,221a4 <_close_r+0x44>
   22190:	dfc00217 	ldw	ra,8(sp)
   22194:	dc400117 	ldw	r17,4(sp)
   22198:	dc000017 	ldw	r16,0(sp)
   2219c:	dec00304 	addi	sp,sp,12
   221a0:	f800283a 	ret
   221a4:	80c00017 	ldw	r3,0(r16)
   221a8:	183ff926 	beq	r3,zero,22190 <_close_r+0x30>
   221ac:	88c00015 	stw	r3,0(r17)
   221b0:	003ff706 	br	22190 <_close_r+0x30>

000221b4 <_fclose_r>:
   221b4:	28003926 	beq	r5,zero,2229c <_fclose_r+0xe8>
   221b8:	defffc04 	addi	sp,sp,-16
   221bc:	dc400115 	stw	r17,4(sp)
   221c0:	dc000015 	stw	r16,0(sp)
   221c4:	dfc00315 	stw	ra,12(sp)
   221c8:	dc800215 	stw	r18,8(sp)
   221cc:	2023883a 	mov	r17,r4
   221d0:	2821883a 	mov	r16,r5
   221d4:	20000226 	beq	r4,zero,221e0 <_fclose_r+0x2c>
   221d8:	20800e17 	ldw	r2,56(r4)
   221dc:	10002726 	beq	r2,zero,2227c <_fclose_r+0xc8>
   221e0:	8080030f 	ldh	r2,12(r16)
   221e4:	1000071e 	bne	r2,zero,22204 <_fclose_r+0x50>
   221e8:	0005883a 	mov	r2,zero
   221ec:	dfc00317 	ldw	ra,12(sp)
   221f0:	dc800217 	ldw	r18,8(sp)
   221f4:	dc400117 	ldw	r17,4(sp)
   221f8:	dc000017 	ldw	r16,0(sp)
   221fc:	dec00404 	addi	sp,sp,16
   22200:	f800283a 	ret
   22204:	800b883a 	mov	r5,r16
   22208:	8809883a 	mov	r4,r17
   2220c:	00222b80 	call	222b8 <__sflush_r>
   22210:	1025883a 	mov	r18,r2
   22214:	80800b17 	ldw	r2,44(r16)
   22218:	10000426 	beq	r2,zero,2222c <_fclose_r+0x78>
   2221c:	81400717 	ldw	r5,28(r16)
   22220:	8809883a 	mov	r4,r17
   22224:	103ee83a 	callr	r2
   22228:	10001616 	blt	r2,zero,22284 <_fclose_r+0xd0>
   2222c:	8080030b 	ldhu	r2,12(r16)
   22230:	1080200c 	andi	r2,r2,128
   22234:	1000151e 	bne	r2,zero,2228c <_fclose_r+0xd8>
   22238:	81400c17 	ldw	r5,48(r16)
   2223c:	28000526 	beq	r5,zero,22254 <_fclose_r+0xa0>
   22240:	80801004 	addi	r2,r16,64
   22244:	28800226 	beq	r5,r2,22250 <_fclose_r+0x9c>
   22248:	8809883a 	mov	r4,r17
   2224c:	00226840 	call	22684 <_free_r>
   22250:	80000c15 	stw	zero,48(r16)
   22254:	81401117 	ldw	r5,68(r16)
   22258:	28000326 	beq	r5,zero,22268 <_fclose_r+0xb4>
   2225c:	8809883a 	mov	r4,r17
   22260:	00226840 	call	22684 <_free_r>
   22264:	80001115 	stw	zero,68(r16)
   22268:	002056c0 	call	2056c <__sfp_lock_acquire>
   2226c:	8000030d 	sth	zero,12(r16)
   22270:	00205700 	call	20570 <__sfp_lock_release>
   22274:	9005883a 	mov	r2,r18
   22278:	003fdc06 	br	221ec <_fclose_r+0x38>
   2227c:	002055c0 	call	2055c <__sinit>
   22280:	003fd706 	br	221e0 <_fclose_r+0x2c>
   22284:	04bfffc4 	movi	r18,-1
   22288:	003fe806 	br	2222c <_fclose_r+0x78>
   2228c:	81400417 	ldw	r5,16(r16)
   22290:	8809883a 	mov	r4,r17
   22294:	00226840 	call	22684 <_free_r>
   22298:	003fe706 	br	22238 <_fclose_r+0x84>
   2229c:	0005883a 	mov	r2,zero
   222a0:	f800283a 	ret

000222a4 <fclose>:
   222a4:	008000b4 	movhi	r2,2
   222a8:	10944f04 	addi	r2,r2,20796
   222ac:	200b883a 	mov	r5,r4
   222b0:	11000017 	ldw	r4,0(r2)
   222b4:	00221b41 	jmpi	221b4 <_fclose_r>

000222b8 <__sflush_r>:
   222b8:	2880030b 	ldhu	r2,12(r5)
   222bc:	defffb04 	addi	sp,sp,-20
   222c0:	dcc00315 	stw	r19,12(sp)
   222c4:	dc400115 	stw	r17,4(sp)
   222c8:	dfc00415 	stw	ra,16(sp)
   222cc:	dc800215 	stw	r18,8(sp)
   222d0:	dc000015 	stw	r16,0(sp)
   222d4:	10c0020c 	andi	r3,r2,8
   222d8:	2823883a 	mov	r17,r5
   222dc:	2027883a 	mov	r19,r4
   222e0:	1800311e 	bne	r3,zero,223a8 <__sflush_r+0xf0>
   222e4:	28c00117 	ldw	r3,4(r5)
   222e8:	10820014 	ori	r2,r2,2048
   222ec:	2880030d 	sth	r2,12(r5)
   222f0:	00c04b0e 	bge	zero,r3,22420 <__sflush_r+0x168>
   222f4:	8a000a17 	ldw	r8,40(r17)
   222f8:	40002326 	beq	r8,zero,22388 <__sflush_r+0xd0>
   222fc:	9c000017 	ldw	r16,0(r19)
   22300:	10c4000c 	andi	r3,r2,4096
   22304:	98000015 	stw	zero,0(r19)
   22308:	18004826 	beq	r3,zero,2242c <__sflush_r+0x174>
   2230c:	89801417 	ldw	r6,80(r17)
   22310:	10c0010c 	andi	r3,r2,4
   22314:	18000626 	beq	r3,zero,22330 <__sflush_r+0x78>
   22318:	88c00117 	ldw	r3,4(r17)
   2231c:	88800c17 	ldw	r2,48(r17)
   22320:	30cdc83a 	sub	r6,r6,r3
   22324:	10000226 	beq	r2,zero,22330 <__sflush_r+0x78>
   22328:	88800f17 	ldw	r2,60(r17)
   2232c:	308dc83a 	sub	r6,r6,r2
   22330:	89400717 	ldw	r5,28(r17)
   22334:	000f883a 	mov	r7,zero
   22338:	9809883a 	mov	r4,r19
   2233c:	403ee83a 	callr	r8
   22340:	00ffffc4 	movi	r3,-1
   22344:	10c04426 	beq	r2,r3,22458 <__sflush_r+0x1a0>
   22348:	88c0030b 	ldhu	r3,12(r17)
   2234c:	89000417 	ldw	r4,16(r17)
   22350:	88000115 	stw	zero,4(r17)
   22354:	197dffcc 	andi	r5,r3,63487
   22358:	8940030d 	sth	r5,12(r17)
   2235c:	89000015 	stw	r4,0(r17)
   22360:	18c4000c 	andi	r3,r3,4096
   22364:	18002c1e 	bne	r3,zero,22418 <__sflush_r+0x160>
   22368:	89400c17 	ldw	r5,48(r17)
   2236c:	9c000015 	stw	r16,0(r19)
   22370:	28000526 	beq	r5,zero,22388 <__sflush_r+0xd0>
   22374:	88801004 	addi	r2,r17,64
   22378:	28800226 	beq	r5,r2,22384 <__sflush_r+0xcc>
   2237c:	9809883a 	mov	r4,r19
   22380:	00226840 	call	22684 <_free_r>
   22384:	88000c15 	stw	zero,48(r17)
   22388:	0005883a 	mov	r2,zero
   2238c:	dfc00417 	ldw	ra,16(sp)
   22390:	dcc00317 	ldw	r19,12(sp)
   22394:	dc800217 	ldw	r18,8(sp)
   22398:	dc400117 	ldw	r17,4(sp)
   2239c:	dc000017 	ldw	r16,0(sp)
   223a0:	dec00504 	addi	sp,sp,20
   223a4:	f800283a 	ret
   223a8:	2c800417 	ldw	r18,16(r5)
   223ac:	903ff626 	beq	r18,zero,22388 <__sflush_r+0xd0>
   223b0:	2c000017 	ldw	r16,0(r5)
   223b4:	108000cc 	andi	r2,r2,3
   223b8:	2c800015 	stw	r18,0(r5)
   223bc:	84a1c83a 	sub	r16,r16,r18
   223c0:	1000131e 	bne	r2,zero,22410 <__sflush_r+0x158>
   223c4:	28800517 	ldw	r2,20(r5)
   223c8:	88800215 	stw	r2,8(r17)
   223cc:	04000316 	blt	zero,r16,223dc <__sflush_r+0x124>
   223d0:	003fed06 	br	22388 <__sflush_r+0xd0>
   223d4:	90a5883a 	add	r18,r18,r2
   223d8:	043feb0e 	bge	zero,r16,22388 <__sflush_r+0xd0>
   223dc:	88800917 	ldw	r2,36(r17)
   223e0:	89400717 	ldw	r5,28(r17)
   223e4:	800f883a 	mov	r7,r16
   223e8:	900d883a 	mov	r6,r18
   223ec:	9809883a 	mov	r4,r19
   223f0:	103ee83a 	callr	r2
   223f4:	80a1c83a 	sub	r16,r16,r2
   223f8:	00bff616 	blt	zero,r2,223d4 <__sflush_r+0x11c>
   223fc:	88c0030b 	ldhu	r3,12(r17)
   22400:	00bfffc4 	movi	r2,-1
   22404:	18c01014 	ori	r3,r3,64
   22408:	88c0030d 	sth	r3,12(r17)
   2240c:	003fdf06 	br	2238c <__sflush_r+0xd4>
   22410:	0005883a 	mov	r2,zero
   22414:	003fec06 	br	223c8 <__sflush_r+0x110>
   22418:	88801415 	stw	r2,80(r17)
   2241c:	003fd206 	br	22368 <__sflush_r+0xb0>
   22420:	28c00f17 	ldw	r3,60(r5)
   22424:	00ffb316 	blt	zero,r3,222f4 <__sflush_r+0x3c>
   22428:	003fd706 	br	22388 <__sflush_r+0xd0>
   2242c:	89400717 	ldw	r5,28(r17)
   22430:	000d883a 	mov	r6,zero
   22434:	01c00044 	movi	r7,1
   22438:	9809883a 	mov	r4,r19
   2243c:	403ee83a 	callr	r8
   22440:	100d883a 	mov	r6,r2
   22444:	00bfffc4 	movi	r2,-1
   22448:	30801426 	beq	r6,r2,2249c <__sflush_r+0x1e4>
   2244c:	8880030b 	ldhu	r2,12(r17)
   22450:	8a000a17 	ldw	r8,40(r17)
   22454:	003fae06 	br	22310 <__sflush_r+0x58>
   22458:	98c00017 	ldw	r3,0(r19)
   2245c:	183fba26 	beq	r3,zero,22348 <__sflush_r+0x90>
   22460:	01000744 	movi	r4,29
   22464:	19000626 	beq	r3,r4,22480 <__sflush_r+0x1c8>
   22468:	01000584 	movi	r4,22
   2246c:	19000426 	beq	r3,r4,22480 <__sflush_r+0x1c8>
   22470:	88c0030b 	ldhu	r3,12(r17)
   22474:	18c01014 	ori	r3,r3,64
   22478:	88c0030d 	sth	r3,12(r17)
   2247c:	003fc306 	br	2238c <__sflush_r+0xd4>
   22480:	8880030b 	ldhu	r2,12(r17)
   22484:	88c00417 	ldw	r3,16(r17)
   22488:	88000115 	stw	zero,4(r17)
   2248c:	10bdffcc 	andi	r2,r2,63487
   22490:	8880030d 	sth	r2,12(r17)
   22494:	88c00015 	stw	r3,0(r17)
   22498:	003fb306 	br	22368 <__sflush_r+0xb0>
   2249c:	98800017 	ldw	r2,0(r19)
   224a0:	103fea26 	beq	r2,zero,2244c <__sflush_r+0x194>
   224a4:	00c00744 	movi	r3,29
   224a8:	10c00226 	beq	r2,r3,224b4 <__sflush_r+0x1fc>
   224ac:	00c00584 	movi	r3,22
   224b0:	10c0031e 	bne	r2,r3,224c0 <__sflush_r+0x208>
   224b4:	9c000015 	stw	r16,0(r19)
   224b8:	0005883a 	mov	r2,zero
   224bc:	003fb306 	br	2238c <__sflush_r+0xd4>
   224c0:	88c0030b 	ldhu	r3,12(r17)
   224c4:	3005883a 	mov	r2,r6
   224c8:	18c01014 	ori	r3,r3,64
   224cc:	88c0030d 	sth	r3,12(r17)
   224d0:	003fae06 	br	2238c <__sflush_r+0xd4>

000224d4 <_fflush_r>:
   224d4:	defffd04 	addi	sp,sp,-12
   224d8:	dc000115 	stw	r16,4(sp)
   224dc:	dfc00215 	stw	ra,8(sp)
   224e0:	2021883a 	mov	r16,r4
   224e4:	20000226 	beq	r4,zero,224f0 <_fflush_r+0x1c>
   224e8:	20800e17 	ldw	r2,56(r4)
   224ec:	10000c26 	beq	r2,zero,22520 <_fflush_r+0x4c>
   224f0:	2880030f 	ldh	r2,12(r5)
   224f4:	1000051e 	bne	r2,zero,2250c <_fflush_r+0x38>
   224f8:	0005883a 	mov	r2,zero
   224fc:	dfc00217 	ldw	ra,8(sp)
   22500:	dc000117 	ldw	r16,4(sp)
   22504:	dec00304 	addi	sp,sp,12
   22508:	f800283a 	ret
   2250c:	8009883a 	mov	r4,r16
   22510:	dfc00217 	ldw	ra,8(sp)
   22514:	dc000117 	ldw	r16,4(sp)
   22518:	dec00304 	addi	sp,sp,12
   2251c:	00222b81 	jmpi	222b8 <__sflush_r>
   22520:	d9400015 	stw	r5,0(sp)
   22524:	002055c0 	call	2055c <__sinit>
   22528:	d9400017 	ldw	r5,0(sp)
   2252c:	003ff006 	br	224f0 <_fflush_r+0x1c>

00022530 <fflush>:
   22530:	20000526 	beq	r4,zero,22548 <fflush+0x18>
   22534:	008000b4 	movhi	r2,2
   22538:	10944f04 	addi	r2,r2,20796
   2253c:	200b883a 	mov	r5,r4
   22540:	11000017 	ldw	r4,0(r2)
   22544:	00224d41 	jmpi	224d4 <_fflush_r>
   22548:	008000b4 	movhi	r2,2
   2254c:	10944e04 	addi	r2,r2,20792
   22550:	11000017 	ldw	r4,0(r2)
   22554:	014000b4 	movhi	r5,2
   22558:	29493504 	addi	r5,r5,9428
   2255c:	0020b381 	jmpi	20b38 <_fwalk_reent>

00022560 <_malloc_trim_r>:
   22560:	defffb04 	addi	sp,sp,-20
   22564:	dcc00315 	stw	r19,12(sp)
   22568:	04c000b4 	movhi	r19,2
   2256c:	dc800215 	stw	r18,8(sp)
   22570:	dc400115 	stw	r17,4(sp)
   22574:	dc000015 	stw	r16,0(sp)
   22578:	dfc00415 	stw	ra,16(sp)
   2257c:	2821883a 	mov	r16,r5
   22580:	9cd2d704 	addi	r19,r19,19292
   22584:	2025883a 	mov	r18,r4
   22588:	00234380 	call	23438 <__malloc_lock>
   2258c:	98800217 	ldw	r2,8(r19)
   22590:	14400117 	ldw	r17,4(r2)
   22594:	00bfff04 	movi	r2,-4
   22598:	88a2703a 	and	r17,r17,r2
   2259c:	8c21c83a 	sub	r16,r17,r16
   225a0:	8403fbc4 	addi	r16,r16,4079
   225a4:	8020d33a 	srli	r16,r16,12
   225a8:	0083ffc4 	movi	r2,4095
   225ac:	843fffc4 	addi	r16,r16,-1
   225b0:	8020933a 	slli	r16,r16,12
   225b4:	1400060e 	bge	r2,r16,225d0 <_malloc_trim_r+0x70>
   225b8:	000b883a 	mov	r5,zero
   225bc:	9009883a 	mov	r4,r18
   225c0:	0021e1c0 	call	21e1c <_sbrk_r>
   225c4:	98c00217 	ldw	r3,8(r19)
   225c8:	1c47883a 	add	r3,r3,r17
   225cc:	10c00a26 	beq	r2,r3,225f8 <_malloc_trim_r+0x98>
   225d0:	9009883a 	mov	r4,r18
   225d4:	002345c0 	call	2345c <__malloc_unlock>
   225d8:	0005883a 	mov	r2,zero
   225dc:	dfc00417 	ldw	ra,16(sp)
   225e0:	dcc00317 	ldw	r19,12(sp)
   225e4:	dc800217 	ldw	r18,8(sp)
   225e8:	dc400117 	ldw	r17,4(sp)
   225ec:	dc000017 	ldw	r16,0(sp)
   225f0:	dec00504 	addi	sp,sp,20
   225f4:	f800283a 	ret
   225f8:	040bc83a 	sub	r5,zero,r16
   225fc:	9009883a 	mov	r4,r18
   22600:	0021e1c0 	call	21e1c <_sbrk_r>
   22604:	00ffffc4 	movi	r3,-1
   22608:	10c00d26 	beq	r2,r3,22640 <_malloc_trim_r+0xe0>
   2260c:	00c000b4 	movhi	r3,2
   22610:	18d6eb04 	addi	r3,r3,23468
   22614:	18800017 	ldw	r2,0(r3)
   22618:	99000217 	ldw	r4,8(r19)
   2261c:	8c23c83a 	sub	r17,r17,r16
   22620:	8c400054 	ori	r17,r17,1
   22624:	1421c83a 	sub	r16,r2,r16
   22628:	24400115 	stw	r17,4(r4)
   2262c:	9009883a 	mov	r4,r18
   22630:	1c000015 	stw	r16,0(r3)
   22634:	002345c0 	call	2345c <__malloc_unlock>
   22638:	00800044 	movi	r2,1
   2263c:	003fe706 	br	225dc <_malloc_trim_r+0x7c>
   22640:	000b883a 	mov	r5,zero
   22644:	9009883a 	mov	r4,r18
   22648:	0021e1c0 	call	21e1c <_sbrk_r>
   2264c:	99000217 	ldw	r4,8(r19)
   22650:	014003c4 	movi	r5,15
   22654:	1107c83a 	sub	r3,r2,r4
   22658:	28ffdd0e 	bge	r5,r3,225d0 <_malloc_trim_r+0x70>
   2265c:	014000b4 	movhi	r5,2
   22660:	29545004 	addi	r5,r5,20800
   22664:	29400017 	ldw	r5,0(r5)
   22668:	18c00054 	ori	r3,r3,1
   2266c:	20c00115 	stw	r3,4(r4)
   22670:	00c000b4 	movhi	r3,2
   22674:	1145c83a 	sub	r2,r2,r5
   22678:	18d6eb04 	addi	r3,r3,23468
   2267c:	18800015 	stw	r2,0(r3)
   22680:	003fd306 	br	225d0 <_malloc_trim_r+0x70>

00022684 <_free_r>:
   22684:	28004126 	beq	r5,zero,2278c <_free_r+0x108>
   22688:	defffd04 	addi	sp,sp,-12
   2268c:	dc400115 	stw	r17,4(sp)
   22690:	dc000015 	stw	r16,0(sp)
   22694:	2023883a 	mov	r17,r4
   22698:	2821883a 	mov	r16,r5
   2269c:	dfc00215 	stw	ra,8(sp)
   226a0:	00234380 	call	23438 <__malloc_lock>
   226a4:	81ffff17 	ldw	r7,-4(r16)
   226a8:	00bfff84 	movi	r2,-2
   226ac:	010000b4 	movhi	r4,2
   226b0:	81bffe04 	addi	r6,r16,-8
   226b4:	3884703a 	and	r2,r7,r2
   226b8:	2112d704 	addi	r4,r4,19292
   226bc:	308b883a 	add	r5,r6,r2
   226c0:	2a400117 	ldw	r9,4(r5)
   226c4:	22000217 	ldw	r8,8(r4)
   226c8:	00ffff04 	movi	r3,-4
   226cc:	48c6703a 	and	r3,r9,r3
   226d0:	2a005726 	beq	r5,r8,22830 <_free_r+0x1ac>
   226d4:	28c00115 	stw	r3,4(r5)
   226d8:	39c0004c 	andi	r7,r7,1
   226dc:	3800091e 	bne	r7,zero,22704 <_free_r+0x80>
   226e0:	823ffe17 	ldw	r8,-8(r16)
   226e4:	22400204 	addi	r9,r4,8
   226e8:	320dc83a 	sub	r6,r6,r8
   226ec:	31c00217 	ldw	r7,8(r6)
   226f0:	1205883a 	add	r2,r2,r8
   226f4:	3a406526 	beq	r7,r9,2288c <_free_r+0x208>
   226f8:	32000317 	ldw	r8,12(r6)
   226fc:	3a000315 	stw	r8,12(r7)
   22700:	41c00215 	stw	r7,8(r8)
   22704:	28cf883a 	add	r7,r5,r3
   22708:	39c00117 	ldw	r7,4(r7)
   2270c:	39c0004c 	andi	r7,r7,1
   22710:	38003a26 	beq	r7,zero,227fc <_free_r+0x178>
   22714:	10c00054 	ori	r3,r2,1
   22718:	30c00115 	stw	r3,4(r6)
   2271c:	3087883a 	add	r3,r6,r2
   22720:	18800015 	stw	r2,0(r3)
   22724:	00c07fc4 	movi	r3,511
   22728:	18801936 	bltu	r3,r2,22790 <_free_r+0x10c>
   2272c:	1004d0fa 	srli	r2,r2,3
   22730:	01c00044 	movi	r7,1
   22734:	21400117 	ldw	r5,4(r4)
   22738:	10c00044 	addi	r3,r2,1
   2273c:	18c7883a 	add	r3,r3,r3
   22740:	1005d0ba 	srai	r2,r2,2
   22744:	18c7883a 	add	r3,r3,r3
   22748:	18c7883a 	add	r3,r3,r3
   2274c:	1907883a 	add	r3,r3,r4
   22750:	3884983a 	sll	r2,r7,r2
   22754:	19c00017 	ldw	r7,0(r3)
   22758:	1a3ffe04 	addi	r8,r3,-8
   2275c:	1144b03a 	or	r2,r2,r5
   22760:	32000315 	stw	r8,12(r6)
   22764:	31c00215 	stw	r7,8(r6)
   22768:	20800115 	stw	r2,4(r4)
   2276c:	19800015 	stw	r6,0(r3)
   22770:	39800315 	stw	r6,12(r7)
   22774:	8809883a 	mov	r4,r17
   22778:	dfc00217 	ldw	ra,8(sp)
   2277c:	dc400117 	ldw	r17,4(sp)
   22780:	dc000017 	ldw	r16,0(sp)
   22784:	dec00304 	addi	sp,sp,12
   22788:	002345c1 	jmpi	2345c <__malloc_unlock>
   2278c:	f800283a 	ret
   22790:	100ad27a 	srli	r5,r2,9
   22794:	00c00104 	movi	r3,4
   22798:	19404a36 	bltu	r3,r5,228c4 <_free_r+0x240>
   2279c:	100ad1ba 	srli	r5,r2,6
   227a0:	28c00e44 	addi	r3,r5,57
   227a4:	18c7883a 	add	r3,r3,r3
   227a8:	29400e04 	addi	r5,r5,56
   227ac:	18c7883a 	add	r3,r3,r3
   227b0:	18c7883a 	add	r3,r3,r3
   227b4:	1909883a 	add	r4,r3,r4
   227b8:	20c00017 	ldw	r3,0(r4)
   227bc:	01c000b4 	movhi	r7,2
   227c0:	213ffe04 	addi	r4,r4,-8
   227c4:	39d2d704 	addi	r7,r7,19292
   227c8:	20c04426 	beq	r4,r3,228dc <_free_r+0x258>
   227cc:	01ffff04 	movi	r7,-4
   227d0:	19400117 	ldw	r5,4(r3)
   227d4:	29ca703a 	and	r5,r5,r7
   227d8:	1140022e 	bgeu	r2,r5,227e4 <_free_r+0x160>
   227dc:	18c00217 	ldw	r3,8(r3)
   227e0:	20fffb1e 	bne	r4,r3,227d0 <_free_r+0x14c>
   227e4:	19000317 	ldw	r4,12(r3)
   227e8:	31000315 	stw	r4,12(r6)
   227ec:	30c00215 	stw	r3,8(r6)
   227f0:	21800215 	stw	r6,8(r4)
   227f4:	19800315 	stw	r6,12(r3)
   227f8:	003fde06 	br	22774 <_free_r+0xf0>
   227fc:	29c00217 	ldw	r7,8(r5)
   22800:	10c5883a 	add	r2,r2,r3
   22804:	00c000b4 	movhi	r3,2
   22808:	18d2d904 	addi	r3,r3,19300
   2280c:	38c03b26 	beq	r7,r3,228fc <_free_r+0x278>
   22810:	2a000317 	ldw	r8,12(r5)
   22814:	11400054 	ori	r5,r2,1
   22818:	3087883a 	add	r3,r6,r2
   2281c:	3a000315 	stw	r8,12(r7)
   22820:	41c00215 	stw	r7,8(r8)
   22824:	31400115 	stw	r5,4(r6)
   22828:	18800015 	stw	r2,0(r3)
   2282c:	003fbd06 	br	22724 <_free_r+0xa0>
   22830:	39c0004c 	andi	r7,r7,1
   22834:	10c5883a 	add	r2,r2,r3
   22838:	3800071e 	bne	r7,zero,22858 <_free_r+0x1d4>
   2283c:	81fffe17 	ldw	r7,-8(r16)
   22840:	31cdc83a 	sub	r6,r6,r7
   22844:	30c00317 	ldw	r3,12(r6)
   22848:	31400217 	ldw	r5,8(r6)
   2284c:	11c5883a 	add	r2,r2,r7
   22850:	28c00315 	stw	r3,12(r5)
   22854:	19400215 	stw	r5,8(r3)
   22858:	10c00054 	ori	r3,r2,1
   2285c:	30c00115 	stw	r3,4(r6)
   22860:	00c000b4 	movhi	r3,2
   22864:	18d45104 	addi	r3,r3,20804
   22868:	18c00017 	ldw	r3,0(r3)
   2286c:	21800215 	stw	r6,8(r4)
   22870:	10ffc036 	bltu	r2,r3,22774 <_free_r+0xf0>
   22874:	008000b4 	movhi	r2,2
   22878:	1096e604 	addi	r2,r2,23448
   2287c:	11400017 	ldw	r5,0(r2)
   22880:	8809883a 	mov	r4,r17
   22884:	00225600 	call	22560 <_malloc_trim_r>
   22888:	003fba06 	br	22774 <_free_r+0xf0>
   2288c:	28c9883a 	add	r4,r5,r3
   22890:	21000117 	ldw	r4,4(r4)
   22894:	2100004c 	andi	r4,r4,1
   22898:	2000391e 	bne	r4,zero,22980 <_free_r+0x2fc>
   2289c:	29c00217 	ldw	r7,8(r5)
   228a0:	29000317 	ldw	r4,12(r5)
   228a4:	1885883a 	add	r2,r3,r2
   228a8:	10c00054 	ori	r3,r2,1
   228ac:	39000315 	stw	r4,12(r7)
   228b0:	21c00215 	stw	r7,8(r4)
   228b4:	30c00115 	stw	r3,4(r6)
   228b8:	308d883a 	add	r6,r6,r2
   228bc:	30800015 	stw	r2,0(r6)
   228c0:	003fac06 	br	22774 <_free_r+0xf0>
   228c4:	00c00504 	movi	r3,20
   228c8:	19401536 	bltu	r3,r5,22920 <_free_r+0x29c>
   228cc:	28c01704 	addi	r3,r5,92
   228d0:	18c7883a 	add	r3,r3,r3
   228d4:	294016c4 	addi	r5,r5,91
   228d8:	003fb406 	br	227ac <_free_r+0x128>
   228dc:	280bd0ba 	srai	r5,r5,2
   228e0:	00c00044 	movi	r3,1
   228e4:	38800117 	ldw	r2,4(r7)
   228e8:	194a983a 	sll	r5,r3,r5
   228ec:	2007883a 	mov	r3,r4
   228f0:	2884b03a 	or	r2,r5,r2
   228f4:	38800115 	stw	r2,4(r7)
   228f8:	003fbb06 	br	227e8 <_free_r+0x164>
   228fc:	21800515 	stw	r6,20(r4)
   22900:	21800415 	stw	r6,16(r4)
   22904:	10c00054 	ori	r3,r2,1
   22908:	31c00315 	stw	r7,12(r6)
   2290c:	31c00215 	stw	r7,8(r6)
   22910:	30c00115 	stw	r3,4(r6)
   22914:	308d883a 	add	r6,r6,r2
   22918:	30800015 	stw	r2,0(r6)
   2291c:	003f9506 	br	22774 <_free_r+0xf0>
   22920:	00c01504 	movi	r3,84
   22924:	19400536 	bltu	r3,r5,2293c <_free_r+0x2b8>
   22928:	100ad33a 	srli	r5,r2,12
   2292c:	28c01bc4 	addi	r3,r5,111
   22930:	18c7883a 	add	r3,r3,r3
   22934:	29401b84 	addi	r5,r5,110
   22938:	003f9c06 	br	227ac <_free_r+0x128>
   2293c:	00c05504 	movi	r3,340
   22940:	19400536 	bltu	r3,r5,22958 <_free_r+0x2d4>
   22944:	100ad3fa 	srli	r5,r2,15
   22948:	28c01e04 	addi	r3,r5,120
   2294c:	18c7883a 	add	r3,r3,r3
   22950:	29401dc4 	addi	r5,r5,119
   22954:	003f9506 	br	227ac <_free_r+0x128>
   22958:	00c15504 	movi	r3,1364
   2295c:	19400536 	bltu	r3,r5,22974 <_free_r+0x2f0>
   22960:	100ad4ba 	srli	r5,r2,18
   22964:	28c01f44 	addi	r3,r5,125
   22968:	18c7883a 	add	r3,r3,r3
   2296c:	29401f04 	addi	r5,r5,124
   22970:	003f8e06 	br	227ac <_free_r+0x128>
   22974:	00c03f84 	movi	r3,254
   22978:	01401f84 	movi	r5,126
   2297c:	003f8b06 	br	227ac <_free_r+0x128>
   22980:	10c00054 	ori	r3,r2,1
   22984:	30c00115 	stw	r3,4(r6)
   22988:	308d883a 	add	r6,r6,r2
   2298c:	30800015 	stw	r2,0(r6)
   22990:	003f7806 	br	22774 <_free_r+0xf0>

00022994 <_lseek_r>:
   22994:	defffd04 	addi	sp,sp,-12
   22998:	2805883a 	mov	r2,r5
   2299c:	dc000015 	stw	r16,0(sp)
   229a0:	040000b4 	movhi	r16,2
   229a4:	dc400115 	stw	r17,4(sp)
   229a8:	300b883a 	mov	r5,r6
   229ac:	8416e704 	addi	r16,r16,23452
   229b0:	2023883a 	mov	r17,r4
   229b4:	380d883a 	mov	r6,r7
   229b8:	1009883a 	mov	r4,r2
   229bc:	dfc00215 	stw	ra,8(sp)
   229c0:	80000015 	stw	zero,0(r16)
   229c4:	00232e00 	call	232e0 <lseek>
   229c8:	00ffffc4 	movi	r3,-1
   229cc:	10c00526 	beq	r2,r3,229e4 <_lseek_r+0x50>
   229d0:	dfc00217 	ldw	ra,8(sp)
   229d4:	dc400117 	ldw	r17,4(sp)
   229d8:	dc000017 	ldw	r16,0(sp)
   229dc:	dec00304 	addi	sp,sp,12
   229e0:	f800283a 	ret
   229e4:	80c00017 	ldw	r3,0(r16)
   229e8:	183ff926 	beq	r3,zero,229d0 <_lseek_r+0x3c>
   229ec:	88c00015 	stw	r3,0(r17)
   229f0:	003ff706 	br	229d0 <_lseek_r+0x3c>

000229f4 <__smakebuf_r>:
   229f4:	2880030b 	ldhu	r2,12(r5)
   229f8:	10c0008c 	andi	r3,r2,2
   229fc:	1800411e 	bne	r3,zero,22b04 <__smakebuf_r+0x110>
   22a00:	deffec04 	addi	sp,sp,-80
   22a04:	dc000f15 	stw	r16,60(sp)
   22a08:	2821883a 	mov	r16,r5
   22a0c:	2940038f 	ldh	r5,14(r5)
   22a10:	dc401015 	stw	r17,64(sp)
   22a14:	dfc01315 	stw	ra,76(sp)
   22a18:	dcc01215 	stw	r19,72(sp)
   22a1c:	dc801115 	stw	r18,68(sp)
   22a20:	2023883a 	mov	r17,r4
   22a24:	28001c16 	blt	r5,zero,22a98 <__smakebuf_r+0xa4>
   22a28:	d80d883a 	mov	r6,sp
   22a2c:	0022c100 	call	22c10 <_fstat_r>
   22a30:	10001816 	blt	r2,zero,22a94 <__smakebuf_r+0xa0>
   22a34:	d8800117 	ldw	r2,4(sp)
   22a38:	00e00014 	movui	r3,32768
   22a3c:	10bc000c 	andi	r2,r2,61440
   22a40:	14c80020 	cmpeqi	r19,r2,8192
   22a44:	10c03726 	beq	r2,r3,22b24 <__smakebuf_r+0x130>
   22a48:	80c0030b 	ldhu	r3,12(r16)
   22a4c:	18c20014 	ori	r3,r3,2048
   22a50:	80c0030d 	sth	r3,12(r16)
   22a54:	00c80004 	movi	r3,8192
   22a58:	10c0521e 	bne	r2,r3,22ba4 <__smakebuf_r+0x1b0>
   22a5c:	8140038f 	ldh	r5,14(r16)
   22a60:	8809883a 	mov	r4,r17
   22a64:	0022c6c0 	call	22c6c <_isatty_r>
   22a68:	10004c26 	beq	r2,zero,22b9c <__smakebuf_r+0x1a8>
   22a6c:	8080030b 	ldhu	r2,12(r16)
   22a70:	80c010c4 	addi	r3,r16,67
   22a74:	80c00015 	stw	r3,0(r16)
   22a78:	10800054 	ori	r2,r2,1
   22a7c:	8080030d 	sth	r2,12(r16)
   22a80:	00800044 	movi	r2,1
   22a84:	80c00415 	stw	r3,16(r16)
   22a88:	80800515 	stw	r2,20(r16)
   22a8c:	04810004 	movi	r18,1024
   22a90:	00000706 	br	22ab0 <__smakebuf_r+0xbc>
   22a94:	8080030b 	ldhu	r2,12(r16)
   22a98:	10c0200c 	andi	r3,r2,128
   22a9c:	18001f1e 	bne	r3,zero,22b1c <__smakebuf_r+0x128>
   22aa0:	04810004 	movi	r18,1024
   22aa4:	10820014 	ori	r2,r2,2048
   22aa8:	8080030d 	sth	r2,12(r16)
   22aac:	0027883a 	mov	r19,zero
   22ab0:	900b883a 	mov	r5,r18
   22ab4:	8809883a 	mov	r4,r17
   22ab8:	0020bfc0 	call	20bfc <_malloc_r>
   22abc:	10002c26 	beq	r2,zero,22b70 <__smakebuf_r+0x17c>
   22ac0:	80c0030b 	ldhu	r3,12(r16)
   22ac4:	010000b4 	movhi	r4,2
   22ac8:	21008104 	addi	r4,r4,516
   22acc:	89000f15 	stw	r4,60(r17)
   22ad0:	18c02014 	ori	r3,r3,128
   22ad4:	80c0030d 	sth	r3,12(r16)
   22ad8:	80800015 	stw	r2,0(r16)
   22adc:	80800415 	stw	r2,16(r16)
   22ae0:	84800515 	stw	r18,20(r16)
   22ae4:	98001a1e 	bne	r19,zero,22b50 <__smakebuf_r+0x15c>
   22ae8:	dfc01317 	ldw	ra,76(sp)
   22aec:	dcc01217 	ldw	r19,72(sp)
   22af0:	dc801117 	ldw	r18,68(sp)
   22af4:	dc401017 	ldw	r17,64(sp)
   22af8:	dc000f17 	ldw	r16,60(sp)
   22afc:	dec01404 	addi	sp,sp,80
   22b00:	f800283a 	ret
   22b04:	288010c4 	addi	r2,r5,67
   22b08:	28800015 	stw	r2,0(r5)
   22b0c:	28800415 	stw	r2,16(r5)
   22b10:	00800044 	movi	r2,1
   22b14:	28800515 	stw	r2,20(r5)
   22b18:	f800283a 	ret
   22b1c:	04801004 	movi	r18,64
   22b20:	003fe006 	br	22aa4 <__smakebuf_r+0xb0>
   22b24:	81000a17 	ldw	r4,40(r16)
   22b28:	00c000b4 	movhi	r3,2
   22b2c:	18c7d204 	addi	r3,r3,8008
   22b30:	20ffc51e 	bne	r4,r3,22a48 <__smakebuf_r+0x54>
   22b34:	8080030b 	ldhu	r2,12(r16)
   22b38:	04810004 	movi	r18,1024
   22b3c:	84801315 	stw	r18,76(r16)
   22b40:	1484b03a 	or	r2,r2,r18
   22b44:	8080030d 	sth	r2,12(r16)
   22b48:	0027883a 	mov	r19,zero
   22b4c:	003fd806 	br	22ab0 <__smakebuf_r+0xbc>
   22b50:	8140038f 	ldh	r5,14(r16)
   22b54:	8809883a 	mov	r4,r17
   22b58:	0022c6c0 	call	22c6c <_isatty_r>
   22b5c:	103fe226 	beq	r2,zero,22ae8 <__smakebuf_r+0xf4>
   22b60:	8080030b 	ldhu	r2,12(r16)
   22b64:	10800054 	ori	r2,r2,1
   22b68:	8080030d 	sth	r2,12(r16)
   22b6c:	003fde06 	br	22ae8 <__smakebuf_r+0xf4>
   22b70:	8080030b 	ldhu	r2,12(r16)
   22b74:	10c0800c 	andi	r3,r2,512
   22b78:	183fdb1e 	bne	r3,zero,22ae8 <__smakebuf_r+0xf4>
   22b7c:	10800094 	ori	r2,r2,2
   22b80:	80c010c4 	addi	r3,r16,67
   22b84:	8080030d 	sth	r2,12(r16)
   22b88:	00800044 	movi	r2,1
   22b8c:	80c00015 	stw	r3,0(r16)
   22b90:	80c00415 	stw	r3,16(r16)
   22b94:	80800515 	stw	r2,20(r16)
   22b98:	003fd306 	br	22ae8 <__smakebuf_r+0xf4>
   22b9c:	04810004 	movi	r18,1024
   22ba0:	003fc306 	br	22ab0 <__smakebuf_r+0xbc>
   22ba4:	0027883a 	mov	r19,zero
   22ba8:	04810004 	movi	r18,1024
   22bac:	003fc006 	br	22ab0 <__smakebuf_r+0xbc>

00022bb0 <_read_r>:
   22bb0:	defffd04 	addi	sp,sp,-12
   22bb4:	2805883a 	mov	r2,r5
   22bb8:	dc000015 	stw	r16,0(sp)
   22bbc:	040000b4 	movhi	r16,2
   22bc0:	dc400115 	stw	r17,4(sp)
   22bc4:	300b883a 	mov	r5,r6
   22bc8:	8416e704 	addi	r16,r16,23452
   22bcc:	2023883a 	mov	r17,r4
   22bd0:	380d883a 	mov	r6,r7
   22bd4:	1009883a 	mov	r4,r2
   22bd8:	dfc00215 	stw	ra,8(sp)
   22bdc:	80000015 	stw	zero,0(r16)
   22be0:	00234bc0 	call	234bc <read>
   22be4:	00ffffc4 	movi	r3,-1
   22be8:	10c00526 	beq	r2,r3,22c00 <_read_r+0x50>
   22bec:	dfc00217 	ldw	ra,8(sp)
   22bf0:	dc400117 	ldw	r17,4(sp)
   22bf4:	dc000017 	ldw	r16,0(sp)
   22bf8:	dec00304 	addi	sp,sp,12
   22bfc:	f800283a 	ret
   22c00:	80c00017 	ldw	r3,0(r16)
   22c04:	183ff926 	beq	r3,zero,22bec <_read_r+0x3c>
   22c08:	88c00015 	stw	r3,0(r17)
   22c0c:	003ff706 	br	22bec <_read_r+0x3c>

00022c10 <_fstat_r>:
   22c10:	defffd04 	addi	sp,sp,-12
   22c14:	2805883a 	mov	r2,r5
   22c18:	dc000015 	stw	r16,0(sp)
   22c1c:	040000b4 	movhi	r16,2
   22c20:	dc400115 	stw	r17,4(sp)
   22c24:	8416e704 	addi	r16,r16,23452
   22c28:	2023883a 	mov	r17,r4
   22c2c:	300b883a 	mov	r5,r6
   22c30:	1009883a 	mov	r4,r2
   22c34:	dfc00215 	stw	ra,8(sp)
   22c38:	80000015 	stw	zero,0(r16)
   22c3c:	00230180 	call	23018 <fstat>
   22c40:	00ffffc4 	movi	r3,-1
   22c44:	10c00526 	beq	r2,r3,22c5c <_fstat_r+0x4c>
   22c48:	dfc00217 	ldw	ra,8(sp)
   22c4c:	dc400117 	ldw	r17,4(sp)
   22c50:	dc000017 	ldw	r16,0(sp)
   22c54:	dec00304 	addi	sp,sp,12
   22c58:	f800283a 	ret
   22c5c:	80c00017 	ldw	r3,0(r16)
   22c60:	183ff926 	beq	r3,zero,22c48 <_fstat_r+0x38>
   22c64:	88c00015 	stw	r3,0(r17)
   22c68:	003ff706 	br	22c48 <_fstat_r+0x38>

00022c6c <_isatty_r>:
   22c6c:	defffd04 	addi	sp,sp,-12
   22c70:	dc000015 	stw	r16,0(sp)
   22c74:	040000b4 	movhi	r16,2
   22c78:	dc400115 	stw	r17,4(sp)
   22c7c:	8416e704 	addi	r16,r16,23452
   22c80:	2023883a 	mov	r17,r4
   22c84:	2809883a 	mov	r4,r5
   22c88:	dfc00215 	stw	ra,8(sp)
   22c8c:	80000015 	stw	zero,0(r16)
   22c90:	002310c0 	call	2310c <isatty>
   22c94:	00ffffc4 	movi	r3,-1
   22c98:	10c00526 	beq	r2,r3,22cb0 <_isatty_r+0x44>
   22c9c:	dfc00217 	ldw	ra,8(sp)
   22ca0:	dc400117 	ldw	r17,4(sp)
   22ca4:	dc000017 	ldw	r16,0(sp)
   22ca8:	dec00304 	addi	sp,sp,12
   22cac:	f800283a 	ret
   22cb0:	80c00017 	ldw	r3,0(r16)
   22cb4:	183ff926 	beq	r3,zero,22c9c <_isatty_r+0x30>
   22cb8:	88c00015 	stw	r3,0(r17)
   22cbc:	003ff706 	br	22c9c <_isatty_r+0x30>

00022cc0 <__divsi3>:
   22cc0:	20001b16 	blt	r4,zero,22d30 <__divsi3+0x70>
   22cc4:	000f883a 	mov	r7,zero
   22cc8:	28001616 	blt	r5,zero,22d24 <__divsi3+0x64>
   22ccc:	200d883a 	mov	r6,r4
   22cd0:	29001a2e 	bgeu	r5,r4,22d3c <__divsi3+0x7c>
   22cd4:	00800804 	movi	r2,32
   22cd8:	00c00044 	movi	r3,1
   22cdc:	00000106 	br	22ce4 <__divsi3+0x24>
   22ce0:	10000d26 	beq	r2,zero,22d18 <__divsi3+0x58>
   22ce4:	294b883a 	add	r5,r5,r5
   22ce8:	10bfffc4 	addi	r2,r2,-1
   22cec:	18c7883a 	add	r3,r3,r3
   22cf0:	293ffb36 	bltu	r5,r4,22ce0 <__divsi3+0x20>
   22cf4:	0005883a 	mov	r2,zero
   22cf8:	18000726 	beq	r3,zero,22d18 <__divsi3+0x58>
   22cfc:	0005883a 	mov	r2,zero
   22d00:	31400236 	bltu	r6,r5,22d0c <__divsi3+0x4c>
   22d04:	314dc83a 	sub	r6,r6,r5
   22d08:	10c4b03a 	or	r2,r2,r3
   22d0c:	1806d07a 	srli	r3,r3,1
   22d10:	280ad07a 	srli	r5,r5,1
   22d14:	183ffa1e 	bne	r3,zero,22d00 <__divsi3+0x40>
   22d18:	38000126 	beq	r7,zero,22d20 <__divsi3+0x60>
   22d1c:	0085c83a 	sub	r2,zero,r2
   22d20:	f800283a 	ret
   22d24:	014bc83a 	sub	r5,zero,r5
   22d28:	39c0005c 	xori	r7,r7,1
   22d2c:	003fe706 	br	22ccc <__divsi3+0xc>
   22d30:	0109c83a 	sub	r4,zero,r4
   22d34:	01c00044 	movi	r7,1
   22d38:	003fe306 	br	22cc8 <__divsi3+0x8>
   22d3c:	00c00044 	movi	r3,1
   22d40:	003fee06 	br	22cfc <__divsi3+0x3c>

00022d44 <__modsi3>:
   22d44:	20001716 	blt	r4,zero,22da4 <__modsi3+0x60>
   22d48:	000f883a 	mov	r7,zero
   22d4c:	2005883a 	mov	r2,r4
   22d50:	28001216 	blt	r5,zero,22d9c <__modsi3+0x58>
   22d54:	2900162e 	bgeu	r5,r4,22db0 <__modsi3+0x6c>
   22d58:	01800804 	movi	r6,32
   22d5c:	00c00044 	movi	r3,1
   22d60:	00000106 	br	22d68 <__modsi3+0x24>
   22d64:	30000a26 	beq	r6,zero,22d90 <__modsi3+0x4c>
   22d68:	294b883a 	add	r5,r5,r5
   22d6c:	31bfffc4 	addi	r6,r6,-1
   22d70:	18c7883a 	add	r3,r3,r3
   22d74:	293ffb36 	bltu	r5,r4,22d64 <__modsi3+0x20>
   22d78:	18000526 	beq	r3,zero,22d90 <__modsi3+0x4c>
   22d7c:	1806d07a 	srli	r3,r3,1
   22d80:	11400136 	bltu	r2,r5,22d88 <__modsi3+0x44>
   22d84:	1145c83a 	sub	r2,r2,r5
   22d88:	280ad07a 	srli	r5,r5,1
   22d8c:	183ffb1e 	bne	r3,zero,22d7c <__modsi3+0x38>
   22d90:	38000126 	beq	r7,zero,22d98 <__modsi3+0x54>
   22d94:	0085c83a 	sub	r2,zero,r2
   22d98:	f800283a 	ret
   22d9c:	014bc83a 	sub	r5,zero,r5
   22da0:	003fec06 	br	22d54 <__modsi3+0x10>
   22da4:	0109c83a 	sub	r4,zero,r4
   22da8:	01c00044 	movi	r7,1
   22dac:	003fe706 	br	22d4c <__modsi3+0x8>
   22db0:	00c00044 	movi	r3,1
   22db4:	003ff106 	br	22d7c <__modsi3+0x38>

00022db8 <__udivsi3>:
   22db8:	200d883a 	mov	r6,r4
   22dbc:	2900152e 	bgeu	r5,r4,22e14 <__udivsi3+0x5c>
   22dc0:	28001416 	blt	r5,zero,22e14 <__udivsi3+0x5c>
   22dc4:	00800804 	movi	r2,32
   22dc8:	00c00044 	movi	r3,1
   22dcc:	00000206 	br	22dd8 <__udivsi3+0x20>
   22dd0:	10000e26 	beq	r2,zero,22e0c <__udivsi3+0x54>
   22dd4:	28000516 	blt	r5,zero,22dec <__udivsi3+0x34>
   22dd8:	294b883a 	add	r5,r5,r5
   22ddc:	10bfffc4 	addi	r2,r2,-1
   22de0:	18c7883a 	add	r3,r3,r3
   22de4:	293ffa36 	bltu	r5,r4,22dd0 <__udivsi3+0x18>
   22de8:	18000826 	beq	r3,zero,22e0c <__udivsi3+0x54>
   22dec:	0005883a 	mov	r2,zero
   22df0:	31400236 	bltu	r6,r5,22dfc <__udivsi3+0x44>
   22df4:	314dc83a 	sub	r6,r6,r5
   22df8:	10c4b03a 	or	r2,r2,r3
   22dfc:	1806d07a 	srli	r3,r3,1
   22e00:	280ad07a 	srli	r5,r5,1
   22e04:	183ffa1e 	bne	r3,zero,22df0 <__udivsi3+0x38>
   22e08:	f800283a 	ret
   22e0c:	0005883a 	mov	r2,zero
   22e10:	f800283a 	ret
   22e14:	00c00044 	movi	r3,1
   22e18:	003ff406 	br	22dec <__udivsi3+0x34>

00022e1c <__umodsi3>:
   22e1c:	2005883a 	mov	r2,r4
   22e20:	2900122e 	bgeu	r5,r4,22e6c <__umodsi3+0x50>
   22e24:	28001116 	blt	r5,zero,22e6c <__umodsi3+0x50>
   22e28:	01800804 	movi	r6,32
   22e2c:	00c00044 	movi	r3,1
   22e30:	00000206 	br	22e3c <__umodsi3+0x20>
   22e34:	30000c26 	beq	r6,zero,22e68 <__umodsi3+0x4c>
   22e38:	28000516 	blt	r5,zero,22e50 <__umodsi3+0x34>
   22e3c:	294b883a 	add	r5,r5,r5
   22e40:	31bfffc4 	addi	r6,r6,-1
   22e44:	18c7883a 	add	r3,r3,r3
   22e48:	293ffa36 	bltu	r5,r4,22e34 <__umodsi3+0x18>
   22e4c:	18000626 	beq	r3,zero,22e68 <__umodsi3+0x4c>
   22e50:	1806d07a 	srli	r3,r3,1
   22e54:	11400136 	bltu	r2,r5,22e5c <__umodsi3+0x40>
   22e58:	1145c83a 	sub	r2,r2,r5
   22e5c:	280ad07a 	srli	r5,r5,1
   22e60:	183ffb1e 	bne	r3,zero,22e50 <__umodsi3+0x34>
   22e64:	f800283a 	ret
   22e68:	f800283a 	ret
   22e6c:	00c00044 	movi	r3,1
   22e70:	003ff706 	br	22e50 <__umodsi3+0x34>

00022e74 <__mulsi3>:
   22e74:	0005883a 	mov	r2,zero
   22e78:	20000726 	beq	r4,zero,22e98 <__mulsi3+0x24>
   22e7c:	20c0004c 	andi	r3,r4,1
   22e80:	2008d07a 	srli	r4,r4,1
   22e84:	18000126 	beq	r3,zero,22e8c <__mulsi3+0x18>
   22e88:	1145883a 	add	r2,r2,r5
   22e8c:	294b883a 	add	r5,r5,r5
   22e90:	203ffa1e 	bne	r4,zero,22e7c <__mulsi3+0x8>
   22e94:	f800283a 	ret
   22e98:	f800283a 	ret

00022e9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22e9c:	defffe04 	addi	sp,sp,-8
   22ea0:	dfc00115 	stw	ra,4(sp)
   22ea4:	df000015 	stw	fp,0(sp)
   22ea8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22eac:	d0a00917 	ldw	r2,-32732(gp)
   22eb0:	10000326 	beq	r2,zero,22ec0 <alt_get_errno+0x24>
   22eb4:	d0a00917 	ldw	r2,-32732(gp)
   22eb8:	103ee83a 	callr	r2
   22ebc:	00000106 	br	22ec4 <alt_get_errno+0x28>
   22ec0:	d0a29904 	addi	r2,gp,-30108
}
   22ec4:	e037883a 	mov	sp,fp
   22ec8:	dfc00117 	ldw	ra,4(sp)
   22ecc:	df000017 	ldw	fp,0(sp)
   22ed0:	dec00204 	addi	sp,sp,8
   22ed4:	f800283a 	ret

00022ed8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22ed8:	defffb04 	addi	sp,sp,-20
   22edc:	dfc00415 	stw	ra,16(sp)
   22ee0:	df000315 	stw	fp,12(sp)
   22ee4:	df000304 	addi	fp,sp,12
   22ee8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22eec:	e0bfff17 	ldw	r2,-4(fp)
   22ef0:	10000816 	blt	r2,zero,22f14 <close+0x3c>
   22ef4:	01400304 	movi	r5,12
   22ef8:	e13fff17 	ldw	r4,-4(fp)
   22efc:	0022e740 	call	22e74 <__mulsi3>
   22f00:	1007883a 	mov	r3,r2
   22f04:	008000b4 	movhi	r2,2
   22f08:	1093e304 	addi	r2,r2,20364
   22f0c:	1885883a 	add	r2,r3,r2
   22f10:	00000106 	br	22f18 <close+0x40>
   22f14:	0005883a 	mov	r2,zero
   22f18:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22f1c:	e0bffd17 	ldw	r2,-12(fp)
   22f20:	10001926 	beq	r2,zero,22f88 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22f24:	e0bffd17 	ldw	r2,-12(fp)
   22f28:	10800017 	ldw	r2,0(r2)
   22f2c:	10800417 	ldw	r2,16(r2)
   22f30:	10000626 	beq	r2,zero,22f4c <close+0x74>
   22f34:	e0bffd17 	ldw	r2,-12(fp)
   22f38:	10800017 	ldw	r2,0(r2)
   22f3c:	10800417 	ldw	r2,16(r2)
   22f40:	e13ffd17 	ldw	r4,-12(fp)
   22f44:	103ee83a 	callr	r2
   22f48:	00000106 	br	22f50 <close+0x78>
   22f4c:	0005883a 	mov	r2,zero
   22f50:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22f54:	e13fff17 	ldw	r4,-4(fp)
   22f58:	00235c00 	call	235c0 <alt_release_fd>
    if (rval < 0)
   22f5c:	e0bffe17 	ldw	r2,-8(fp)
   22f60:	1000070e 	bge	r2,zero,22f80 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   22f64:	0022e9c0 	call	22e9c <alt_get_errno>
   22f68:	1007883a 	mov	r3,r2
   22f6c:	e0bffe17 	ldw	r2,-8(fp)
   22f70:	0085c83a 	sub	r2,zero,r2
   22f74:	18800015 	stw	r2,0(r3)
      return -1;
   22f78:	00bfffc4 	movi	r2,-1
   22f7c:	00000706 	br	22f9c <close+0xc4>
    }
    return 0;
   22f80:	0005883a 	mov	r2,zero
   22f84:	00000506 	br	22f9c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22f88:	0022e9c0 	call	22e9c <alt_get_errno>
   22f8c:	1007883a 	mov	r3,r2
   22f90:	00801444 	movi	r2,81
   22f94:	18800015 	stw	r2,0(r3)
    return -1;
   22f98:	00bfffc4 	movi	r2,-1
  }
}
   22f9c:	e037883a 	mov	sp,fp
   22fa0:	dfc00117 	ldw	ra,4(sp)
   22fa4:	df000017 	ldw	fp,0(sp)
   22fa8:	dec00204 	addi	sp,sp,8
   22fac:	f800283a 	ret

00022fb0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22fb0:	defffc04 	addi	sp,sp,-16
   22fb4:	df000315 	stw	fp,12(sp)
   22fb8:	df000304 	addi	fp,sp,12
   22fbc:	e13ffd15 	stw	r4,-12(fp)
   22fc0:	e17ffe15 	stw	r5,-8(fp)
   22fc4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   22fc8:	e0bfff17 	ldw	r2,-4(fp)
}
   22fcc:	e037883a 	mov	sp,fp
   22fd0:	df000017 	ldw	fp,0(sp)
   22fd4:	dec00104 	addi	sp,sp,4
   22fd8:	f800283a 	ret

00022fdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22fdc:	defffe04 	addi	sp,sp,-8
   22fe0:	dfc00115 	stw	ra,4(sp)
   22fe4:	df000015 	stw	fp,0(sp)
   22fe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22fec:	d0a00917 	ldw	r2,-32732(gp)
   22ff0:	10000326 	beq	r2,zero,23000 <alt_get_errno+0x24>
   22ff4:	d0a00917 	ldw	r2,-32732(gp)
   22ff8:	103ee83a 	callr	r2
   22ffc:	00000106 	br	23004 <alt_get_errno+0x28>
   23000:	d0a29904 	addi	r2,gp,-30108
}
   23004:	e037883a 	mov	sp,fp
   23008:	dfc00117 	ldw	ra,4(sp)
   2300c:	df000017 	ldw	fp,0(sp)
   23010:	dec00204 	addi	sp,sp,8
   23014:	f800283a 	ret

00023018 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23018:	defffb04 	addi	sp,sp,-20
   2301c:	dfc00415 	stw	ra,16(sp)
   23020:	df000315 	stw	fp,12(sp)
   23024:	df000304 	addi	fp,sp,12
   23028:	e13ffe15 	stw	r4,-8(fp)
   2302c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23030:	e0bffe17 	ldw	r2,-8(fp)
   23034:	10000816 	blt	r2,zero,23058 <fstat+0x40>
   23038:	01400304 	movi	r5,12
   2303c:	e13ffe17 	ldw	r4,-8(fp)
   23040:	0022e740 	call	22e74 <__mulsi3>
   23044:	1007883a 	mov	r3,r2
   23048:	008000b4 	movhi	r2,2
   2304c:	1093e304 	addi	r2,r2,20364
   23050:	1885883a 	add	r2,r3,r2
   23054:	00000106 	br	2305c <fstat+0x44>
   23058:	0005883a 	mov	r2,zero
   2305c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23060:	e0bffd17 	ldw	r2,-12(fp)
   23064:	10001026 	beq	r2,zero,230a8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23068:	e0bffd17 	ldw	r2,-12(fp)
   2306c:	10800017 	ldw	r2,0(r2)
   23070:	10800817 	ldw	r2,32(r2)
   23074:	10000726 	beq	r2,zero,23094 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   23078:	e0bffd17 	ldw	r2,-12(fp)
   2307c:	10800017 	ldw	r2,0(r2)
   23080:	10800817 	ldw	r2,32(r2)
   23084:	e17fff17 	ldw	r5,-4(fp)
   23088:	e13ffd17 	ldw	r4,-12(fp)
   2308c:	103ee83a 	callr	r2
   23090:	00000a06 	br	230bc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23094:	e0bfff17 	ldw	r2,-4(fp)
   23098:	00c80004 	movi	r3,8192
   2309c:	10c00115 	stw	r3,4(r2)
      return 0;
   230a0:	0005883a 	mov	r2,zero
   230a4:	00000506 	br	230bc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   230a8:	0022fdc0 	call	22fdc <alt_get_errno>
   230ac:	1007883a 	mov	r3,r2
   230b0:	00801444 	movi	r2,81
   230b4:	18800015 	stw	r2,0(r3)
    return -1;
   230b8:	00bfffc4 	movi	r2,-1
  }
}
   230bc:	e037883a 	mov	sp,fp
   230c0:	dfc00117 	ldw	ra,4(sp)
   230c4:	df000017 	ldw	fp,0(sp)
   230c8:	dec00204 	addi	sp,sp,8
   230cc:	f800283a 	ret

000230d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   230d0:	defffe04 	addi	sp,sp,-8
   230d4:	dfc00115 	stw	ra,4(sp)
   230d8:	df000015 	stw	fp,0(sp)
   230dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   230e0:	d0a00917 	ldw	r2,-32732(gp)
   230e4:	10000326 	beq	r2,zero,230f4 <alt_get_errno+0x24>
   230e8:	d0a00917 	ldw	r2,-32732(gp)
   230ec:	103ee83a 	callr	r2
   230f0:	00000106 	br	230f8 <alt_get_errno+0x28>
   230f4:	d0a29904 	addi	r2,gp,-30108
}
   230f8:	e037883a 	mov	sp,fp
   230fc:	dfc00117 	ldw	ra,4(sp)
   23100:	df000017 	ldw	fp,0(sp)
   23104:	dec00204 	addi	sp,sp,8
   23108:	f800283a 	ret

0002310c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2310c:	deffed04 	addi	sp,sp,-76
   23110:	dfc01215 	stw	ra,72(sp)
   23114:	df001115 	stw	fp,68(sp)
   23118:	df001104 	addi	fp,sp,68
   2311c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23120:	e0bfff17 	ldw	r2,-4(fp)
   23124:	10000816 	blt	r2,zero,23148 <isatty+0x3c>
   23128:	01400304 	movi	r5,12
   2312c:	e13fff17 	ldw	r4,-4(fp)
   23130:	0022e740 	call	22e74 <__mulsi3>
   23134:	1007883a 	mov	r3,r2
   23138:	008000b4 	movhi	r2,2
   2313c:	1093e304 	addi	r2,r2,20364
   23140:	1885883a 	add	r2,r3,r2
   23144:	00000106 	br	2314c <isatty+0x40>
   23148:	0005883a 	mov	r2,zero
   2314c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23150:	e0bfef17 	ldw	r2,-68(fp)
   23154:	10000e26 	beq	r2,zero,23190 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23158:	e0bfef17 	ldw	r2,-68(fp)
   2315c:	10800017 	ldw	r2,0(r2)
   23160:	10800817 	ldw	r2,32(r2)
   23164:	1000021e 	bne	r2,zero,23170 <isatty+0x64>
    {
      return 1;
   23168:	00800044 	movi	r2,1
   2316c:	00000d06 	br	231a4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23170:	e0bff004 	addi	r2,fp,-64
   23174:	100b883a 	mov	r5,r2
   23178:	e13fff17 	ldw	r4,-4(fp)
   2317c:	00230180 	call	23018 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23180:	e0bff117 	ldw	r2,-60(fp)
   23184:	10880020 	cmpeqi	r2,r2,8192
   23188:	10803fcc 	andi	r2,r2,255
   2318c:	00000506 	br	231a4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23190:	00230d00 	call	230d0 <alt_get_errno>
   23194:	1007883a 	mov	r3,r2
   23198:	00801444 	movi	r2,81
   2319c:	18800015 	stw	r2,0(r3)
    return 0;
   231a0:	0005883a 	mov	r2,zero
  }
}
   231a4:	e037883a 	mov	sp,fp
   231a8:	dfc00117 	ldw	ra,4(sp)
   231ac:	df000017 	ldw	fp,0(sp)
   231b0:	dec00204 	addi	sp,sp,8
   231b4:	f800283a 	ret

000231b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   231b8:	defffc04 	addi	sp,sp,-16
   231bc:	df000315 	stw	fp,12(sp)
   231c0:	df000304 	addi	fp,sp,12
   231c4:	e13ffd15 	stw	r4,-12(fp)
   231c8:	e17ffe15 	stw	r5,-8(fp)
   231cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   231d0:	e0fffe17 	ldw	r3,-8(fp)
   231d4:	e0bffd17 	ldw	r2,-12(fp)
   231d8:	18800c26 	beq	r3,r2,2320c <alt_load_section+0x54>
  {
    while( to != end )
   231dc:	00000806 	br	23200 <alt_load_section+0x48>
    {
      *to++ = *from++;
   231e0:	e0bffe17 	ldw	r2,-8(fp)
   231e4:	10c00104 	addi	r3,r2,4
   231e8:	e0fffe15 	stw	r3,-8(fp)
   231ec:	e0fffd17 	ldw	r3,-12(fp)
   231f0:	19000104 	addi	r4,r3,4
   231f4:	e13ffd15 	stw	r4,-12(fp)
   231f8:	18c00017 	ldw	r3,0(r3)
   231fc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23200:	e0fffe17 	ldw	r3,-8(fp)
   23204:	e0bfff17 	ldw	r2,-4(fp)
   23208:	18bff51e 	bne	r3,r2,231e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2320c:	0001883a 	nop
   23210:	e037883a 	mov	sp,fp
   23214:	df000017 	ldw	fp,0(sp)
   23218:	dec00104 	addi	sp,sp,4
   2321c:	f800283a 	ret

00023220 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23220:	defffe04 	addi	sp,sp,-8
   23224:	dfc00115 	stw	ra,4(sp)
   23228:	df000015 	stw	fp,0(sp)
   2322c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23230:	018000b4 	movhi	r6,2
   23234:	31945904 	addi	r6,r6,20836
   23238:	014000b4 	movhi	r5,2
   2323c:	2951ce04 	addi	r5,r5,18232
   23240:	010000b4 	movhi	r4,2
   23244:	21145904 	addi	r4,r4,20836
   23248:	00231b80 	call	231b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2324c:	018000b4 	movhi	r6,2
   23250:	31800804 	addi	r6,r6,32
   23254:	014000b4 	movhi	r5,2
   23258:	29400804 	addi	r5,r5,32
   2325c:	010000b4 	movhi	r4,2
   23260:	21000804 	addi	r4,r4,32
   23264:	00231b80 	call	231b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23268:	018000b4 	movhi	r6,2
   2326c:	3191ce04 	addi	r6,r6,18232
   23270:	014000b4 	movhi	r5,2
   23274:	2951ba04 	addi	r5,r5,18152
   23278:	010000b4 	movhi	r4,2
   2327c:	2111ba04 	addi	r4,r4,18152
   23280:	00231b80 	call	231b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23284:	0023b100 	call	23b10 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23288:	0023cd00 	call	23cd0 <alt_icache_flush_all>
}
   2328c:	0001883a 	nop
   23290:	e037883a 	mov	sp,fp
   23294:	dfc00117 	ldw	ra,4(sp)
   23298:	df000017 	ldw	fp,0(sp)
   2329c:	dec00204 	addi	sp,sp,8
   232a0:	f800283a 	ret

000232a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   232a4:	defffe04 	addi	sp,sp,-8
   232a8:	dfc00115 	stw	ra,4(sp)
   232ac:	df000015 	stw	fp,0(sp)
   232b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   232b4:	d0a00917 	ldw	r2,-32732(gp)
   232b8:	10000326 	beq	r2,zero,232c8 <alt_get_errno+0x24>
   232bc:	d0a00917 	ldw	r2,-32732(gp)
   232c0:	103ee83a 	callr	r2
   232c4:	00000106 	br	232cc <alt_get_errno+0x28>
   232c8:	d0a29904 	addi	r2,gp,-30108
}
   232cc:	e037883a 	mov	sp,fp
   232d0:	dfc00117 	ldw	ra,4(sp)
   232d4:	df000017 	ldw	fp,0(sp)
   232d8:	dec00204 	addi	sp,sp,8
   232dc:	f800283a 	ret

000232e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   232e0:	defff904 	addi	sp,sp,-28
   232e4:	dfc00615 	stw	ra,24(sp)
   232e8:	df000515 	stw	fp,20(sp)
   232ec:	df000504 	addi	fp,sp,20
   232f0:	e13ffd15 	stw	r4,-12(fp)
   232f4:	e17ffe15 	stw	r5,-8(fp)
   232f8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   232fc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23300:	e0bffd17 	ldw	r2,-12(fp)
   23304:	10000816 	blt	r2,zero,23328 <lseek+0x48>
   23308:	01400304 	movi	r5,12
   2330c:	e13ffd17 	ldw	r4,-12(fp)
   23310:	0022e740 	call	22e74 <__mulsi3>
   23314:	1007883a 	mov	r3,r2
   23318:	008000b4 	movhi	r2,2
   2331c:	1093e304 	addi	r2,r2,20364
   23320:	1885883a 	add	r2,r3,r2
   23324:	00000106 	br	2332c <lseek+0x4c>
   23328:	0005883a 	mov	r2,zero
   2332c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23330:	e0bffc17 	ldw	r2,-16(fp)
   23334:	10001026 	beq	r2,zero,23378 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23338:	e0bffc17 	ldw	r2,-16(fp)
   2333c:	10800017 	ldw	r2,0(r2)
   23340:	10800717 	ldw	r2,28(r2)
   23344:	10000926 	beq	r2,zero,2336c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23348:	e0bffc17 	ldw	r2,-16(fp)
   2334c:	10800017 	ldw	r2,0(r2)
   23350:	10800717 	ldw	r2,28(r2)
   23354:	e1bfff17 	ldw	r6,-4(fp)
   23358:	e17ffe17 	ldw	r5,-8(fp)
   2335c:	e13ffc17 	ldw	r4,-16(fp)
   23360:	103ee83a 	callr	r2
   23364:	e0bffb15 	stw	r2,-20(fp)
   23368:	00000506 	br	23380 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2336c:	00bfde84 	movi	r2,-134
   23370:	e0bffb15 	stw	r2,-20(fp)
   23374:	00000206 	br	23380 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   23378:	00bfebc4 	movi	r2,-81
   2337c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23380:	e0bffb17 	ldw	r2,-20(fp)
   23384:	1000070e 	bge	r2,zero,233a4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   23388:	00232a40 	call	232a4 <alt_get_errno>
   2338c:	1007883a 	mov	r3,r2
   23390:	e0bffb17 	ldw	r2,-20(fp)
   23394:	0085c83a 	sub	r2,zero,r2
   23398:	18800015 	stw	r2,0(r3)
    rc = -1;
   2339c:	00bfffc4 	movi	r2,-1
   233a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   233a4:	e0bffb17 	ldw	r2,-20(fp)
}
   233a8:	e037883a 	mov	sp,fp
   233ac:	dfc00117 	ldw	ra,4(sp)
   233b0:	df000017 	ldw	fp,0(sp)
   233b4:	dec00204 	addi	sp,sp,8
   233b8:	f800283a 	ret

000233bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   233bc:	defffd04 	addi	sp,sp,-12
   233c0:	dfc00215 	stw	ra,8(sp)
   233c4:	df000115 	stw	fp,4(sp)
   233c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   233cc:	0009883a 	mov	r4,zero
   233d0:	00238640 	call	23864 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   233d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   233d8:	002389c0 	call	2389c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   233dc:	018000b4 	movhi	r6,2
   233e0:	3191c404 	addi	r6,r6,18192
   233e4:	014000b4 	movhi	r5,2
   233e8:	2951c404 	addi	r5,r5,18192
   233ec:	010000b4 	movhi	r4,2
   233f0:	2111c404 	addi	r4,r4,18192
   233f4:	0023dd40 	call	23dd4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   233f8:	0023c100 	call	23c10 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   233fc:	010000b4 	movhi	r4,2
   23400:	210f1c04 	addi	r4,r4,15472
   23404:	00243540 	call	24354 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23408:	d0a29a17 	ldw	r2,-30104(gp)
   2340c:	d0e29b17 	ldw	r3,-30100(gp)
   23410:	d1229c17 	ldw	r4,-30096(gp)
   23414:	200d883a 	mov	r6,r4
   23418:	180b883a 	mov	r5,r3
   2341c:	1009883a 	mov	r4,r2
   23420:	002005c0 	call	2005c <main>
   23424:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23428:	01000044 	movi	r4,1
   2342c:	0022ed80 	call	22ed8 <close>
  exit (result);
   23430:	e13fff17 	ldw	r4,-4(fp)
   23434:	00243680 	call	24368 <exit>

00023438 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23438:	defffe04 	addi	sp,sp,-8
   2343c:	df000115 	stw	fp,4(sp)
   23440:	df000104 	addi	fp,sp,4
   23444:	e13fff15 	stw	r4,-4(fp)
}
   23448:	0001883a 	nop
   2344c:	e037883a 	mov	sp,fp
   23450:	df000017 	ldw	fp,0(sp)
   23454:	dec00104 	addi	sp,sp,4
   23458:	f800283a 	ret

0002345c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2345c:	defffe04 	addi	sp,sp,-8
   23460:	df000115 	stw	fp,4(sp)
   23464:	df000104 	addi	fp,sp,4
   23468:	e13fff15 	stw	r4,-4(fp)
}
   2346c:	0001883a 	nop
   23470:	e037883a 	mov	sp,fp
   23474:	df000017 	ldw	fp,0(sp)
   23478:	dec00104 	addi	sp,sp,4
   2347c:	f800283a 	ret

00023480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23480:	defffe04 	addi	sp,sp,-8
   23484:	dfc00115 	stw	ra,4(sp)
   23488:	df000015 	stw	fp,0(sp)
   2348c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23490:	d0a00917 	ldw	r2,-32732(gp)
   23494:	10000326 	beq	r2,zero,234a4 <alt_get_errno+0x24>
   23498:	d0a00917 	ldw	r2,-32732(gp)
   2349c:	103ee83a 	callr	r2
   234a0:	00000106 	br	234a8 <alt_get_errno+0x28>
   234a4:	d0a29904 	addi	r2,gp,-30108
}
   234a8:	e037883a 	mov	sp,fp
   234ac:	dfc00117 	ldw	ra,4(sp)
   234b0:	df000017 	ldw	fp,0(sp)
   234b4:	dec00204 	addi	sp,sp,8
   234b8:	f800283a 	ret

000234bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   234bc:	defff904 	addi	sp,sp,-28
   234c0:	dfc00615 	stw	ra,24(sp)
   234c4:	df000515 	stw	fp,20(sp)
   234c8:	df000504 	addi	fp,sp,20
   234cc:	e13ffd15 	stw	r4,-12(fp)
   234d0:	e17ffe15 	stw	r5,-8(fp)
   234d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   234d8:	e0bffd17 	ldw	r2,-12(fp)
   234dc:	10000816 	blt	r2,zero,23500 <read+0x44>
   234e0:	01400304 	movi	r5,12
   234e4:	e13ffd17 	ldw	r4,-12(fp)
   234e8:	0022e740 	call	22e74 <__mulsi3>
   234ec:	1007883a 	mov	r3,r2
   234f0:	008000b4 	movhi	r2,2
   234f4:	1093e304 	addi	r2,r2,20364
   234f8:	1885883a 	add	r2,r3,r2
   234fc:	00000106 	br	23504 <read+0x48>
   23500:	0005883a 	mov	r2,zero
   23504:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23508:	e0bffb17 	ldw	r2,-20(fp)
   2350c:	10002226 	beq	r2,zero,23598 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23510:	e0bffb17 	ldw	r2,-20(fp)
   23514:	10800217 	ldw	r2,8(r2)
   23518:	108000cc 	andi	r2,r2,3
   2351c:	10800060 	cmpeqi	r2,r2,1
   23520:	1000181e 	bne	r2,zero,23584 <read+0xc8>
        (fd->dev->read))
   23524:	e0bffb17 	ldw	r2,-20(fp)
   23528:	10800017 	ldw	r2,0(r2)
   2352c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23530:	10001426 	beq	r2,zero,23584 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23534:	e0bffb17 	ldw	r2,-20(fp)
   23538:	10800017 	ldw	r2,0(r2)
   2353c:	10800517 	ldw	r2,20(r2)
   23540:	e0ffff17 	ldw	r3,-4(fp)
   23544:	180d883a 	mov	r6,r3
   23548:	e17ffe17 	ldw	r5,-8(fp)
   2354c:	e13ffb17 	ldw	r4,-20(fp)
   23550:	103ee83a 	callr	r2
   23554:	e0bffc15 	stw	r2,-16(fp)
   23558:	e0bffc17 	ldw	r2,-16(fp)
   2355c:	1000070e 	bge	r2,zero,2357c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23560:	00234800 	call	23480 <alt_get_errno>
   23564:	1007883a 	mov	r3,r2
   23568:	e0bffc17 	ldw	r2,-16(fp)
   2356c:	0085c83a 	sub	r2,zero,r2
   23570:	18800015 	stw	r2,0(r3)
          return -1;
   23574:	00bfffc4 	movi	r2,-1
   23578:	00000c06 	br	235ac <read+0xf0>
        }
        return rval;
   2357c:	e0bffc17 	ldw	r2,-16(fp)
   23580:	00000a06 	br	235ac <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23584:	00234800 	call	23480 <alt_get_errno>
   23588:	1007883a 	mov	r3,r2
   2358c:	00800344 	movi	r2,13
   23590:	18800015 	stw	r2,0(r3)
   23594:	00000406 	br	235a8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23598:	00234800 	call	23480 <alt_get_errno>
   2359c:	1007883a 	mov	r3,r2
   235a0:	00801444 	movi	r2,81
   235a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   235a8:	00bfffc4 	movi	r2,-1
}
   235ac:	e037883a 	mov	sp,fp
   235b0:	dfc00117 	ldw	ra,4(sp)
   235b4:	df000017 	ldw	fp,0(sp)
   235b8:	dec00204 	addi	sp,sp,8
   235bc:	f800283a 	ret

000235c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   235c0:	defffc04 	addi	sp,sp,-16
   235c4:	dfc00315 	stw	ra,12(sp)
   235c8:	df000215 	stw	fp,8(sp)
   235cc:	dc000115 	stw	r16,4(sp)
   235d0:	df000204 	addi	fp,sp,8
   235d4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   235d8:	e0bffe17 	ldw	r2,-8(fp)
   235dc:	108000d0 	cmplti	r2,r2,3
   235e0:	1000111e 	bne	r2,zero,23628 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   235e4:	040000b4 	movhi	r16,2
   235e8:	8413e304 	addi	r16,r16,20364
   235ec:	e0bffe17 	ldw	r2,-8(fp)
   235f0:	01400304 	movi	r5,12
   235f4:	1009883a 	mov	r4,r2
   235f8:	0022e740 	call	22e74 <__mulsi3>
   235fc:	8085883a 	add	r2,r16,r2
   23600:	10800204 	addi	r2,r2,8
   23604:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23608:	040000b4 	movhi	r16,2
   2360c:	8413e304 	addi	r16,r16,20364
   23610:	e0bffe17 	ldw	r2,-8(fp)
   23614:	01400304 	movi	r5,12
   23618:	1009883a 	mov	r4,r2
   2361c:	0022e740 	call	22e74 <__mulsi3>
   23620:	8085883a 	add	r2,r16,r2
   23624:	10000015 	stw	zero,0(r2)
  }
}
   23628:	0001883a 	nop
   2362c:	e6ffff04 	addi	sp,fp,-4
   23630:	dfc00217 	ldw	ra,8(sp)
   23634:	df000117 	ldw	fp,4(sp)
   23638:	dc000017 	ldw	r16,0(sp)
   2363c:	dec00304 	addi	sp,sp,12
   23640:	f800283a 	ret

00023644 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23644:	defff904 	addi	sp,sp,-28
   23648:	df000615 	stw	fp,24(sp)
   2364c:	df000604 	addi	fp,sp,24
   23650:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23654:	0005303a 	rdctl	r2,status
   23658:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2365c:	e0fffe17 	ldw	r3,-8(fp)
   23660:	00bfff84 	movi	r2,-2
   23664:	1884703a 	and	r2,r3,r2
   23668:	1001703a 	wrctl	status,r2
  
  return context;
   2366c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23670:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23674:	d0a00a17 	ldw	r2,-32728(gp)
   23678:	10c000c4 	addi	r3,r2,3
   2367c:	00bfff04 	movi	r2,-4
   23680:	1884703a 	and	r2,r3,r2
   23684:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23688:	d0e00a17 	ldw	r3,-32728(gp)
   2368c:	e0bfff17 	ldw	r2,-4(fp)
   23690:	1887883a 	add	r3,r3,r2
   23694:	00800134 	movhi	r2,4
   23698:	10b53004 	addi	r2,r2,-11072
   2369c:	10c0062e 	bgeu	r2,r3,236b8 <sbrk+0x74>
   236a0:	e0bffb17 	ldw	r2,-20(fp)
   236a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   236a8:	e0bffa17 	ldw	r2,-24(fp)
   236ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   236b0:	00bfffc4 	movi	r2,-1
   236b4:	00000b06 	br	236e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   236b8:	d0a00a17 	ldw	r2,-32728(gp)
   236bc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   236c0:	d0e00a17 	ldw	r3,-32728(gp)
   236c4:	e0bfff17 	ldw	r2,-4(fp)
   236c8:	1885883a 	add	r2,r3,r2
   236cc:	d0a00a15 	stw	r2,-32728(gp)
   236d0:	e0bffb17 	ldw	r2,-20(fp)
   236d4:	e0bffc15 	stw	r2,-16(fp)
   236d8:	e0bffc17 	ldw	r2,-16(fp)
   236dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   236e0:	e0bffd17 	ldw	r2,-12(fp)
} 
   236e4:	e037883a 	mov	sp,fp
   236e8:	df000017 	ldw	fp,0(sp)
   236ec:	dec00104 	addi	sp,sp,4
   236f0:	f800283a 	ret

000236f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   236f4:	defffe04 	addi	sp,sp,-8
   236f8:	dfc00115 	stw	ra,4(sp)
   236fc:	df000015 	stw	fp,0(sp)
   23700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23704:	d0a00917 	ldw	r2,-32732(gp)
   23708:	10000326 	beq	r2,zero,23718 <alt_get_errno+0x24>
   2370c:	d0a00917 	ldw	r2,-32732(gp)
   23710:	103ee83a 	callr	r2
   23714:	00000106 	br	2371c <alt_get_errno+0x28>
   23718:	d0a29904 	addi	r2,gp,-30108
}
   2371c:	e037883a 	mov	sp,fp
   23720:	dfc00117 	ldw	ra,4(sp)
   23724:	df000017 	ldw	fp,0(sp)
   23728:	dec00204 	addi	sp,sp,8
   2372c:	f800283a 	ret

00023730 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23730:	defff904 	addi	sp,sp,-28
   23734:	dfc00615 	stw	ra,24(sp)
   23738:	df000515 	stw	fp,20(sp)
   2373c:	df000504 	addi	fp,sp,20
   23740:	e13ffd15 	stw	r4,-12(fp)
   23744:	e17ffe15 	stw	r5,-8(fp)
   23748:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2374c:	e0bffd17 	ldw	r2,-12(fp)
   23750:	10000816 	blt	r2,zero,23774 <write+0x44>
   23754:	01400304 	movi	r5,12
   23758:	e13ffd17 	ldw	r4,-12(fp)
   2375c:	0022e740 	call	22e74 <__mulsi3>
   23760:	1007883a 	mov	r3,r2
   23764:	008000b4 	movhi	r2,2
   23768:	1093e304 	addi	r2,r2,20364
   2376c:	1885883a 	add	r2,r3,r2
   23770:	00000106 	br	23778 <write+0x48>
   23774:	0005883a 	mov	r2,zero
   23778:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2377c:	e0bffb17 	ldw	r2,-20(fp)
   23780:	10002126 	beq	r2,zero,23808 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23784:	e0bffb17 	ldw	r2,-20(fp)
   23788:	10800217 	ldw	r2,8(r2)
   2378c:	108000cc 	andi	r2,r2,3
   23790:	10001826 	beq	r2,zero,237f4 <write+0xc4>
   23794:	e0bffb17 	ldw	r2,-20(fp)
   23798:	10800017 	ldw	r2,0(r2)
   2379c:	10800617 	ldw	r2,24(r2)
   237a0:	10001426 	beq	r2,zero,237f4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   237a4:	e0bffb17 	ldw	r2,-20(fp)
   237a8:	10800017 	ldw	r2,0(r2)
   237ac:	10800617 	ldw	r2,24(r2)
   237b0:	e0ffff17 	ldw	r3,-4(fp)
   237b4:	180d883a 	mov	r6,r3
   237b8:	e17ffe17 	ldw	r5,-8(fp)
   237bc:	e13ffb17 	ldw	r4,-20(fp)
   237c0:	103ee83a 	callr	r2
   237c4:	e0bffc15 	stw	r2,-16(fp)
   237c8:	e0bffc17 	ldw	r2,-16(fp)
   237cc:	1000070e 	bge	r2,zero,237ec <write+0xbc>
      {
        ALT_ERRNO = -rval;
   237d0:	00236f40 	call	236f4 <alt_get_errno>
   237d4:	1007883a 	mov	r3,r2
   237d8:	e0bffc17 	ldw	r2,-16(fp)
   237dc:	0085c83a 	sub	r2,zero,r2
   237e0:	18800015 	stw	r2,0(r3)
        return -1;
   237e4:	00bfffc4 	movi	r2,-1
   237e8:	00000c06 	br	2381c <write+0xec>
      }
      return rval;
   237ec:	e0bffc17 	ldw	r2,-16(fp)
   237f0:	00000a06 	br	2381c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   237f4:	00236f40 	call	236f4 <alt_get_errno>
   237f8:	1007883a 	mov	r3,r2
   237fc:	00800344 	movi	r2,13
   23800:	18800015 	stw	r2,0(r3)
   23804:	00000406 	br	23818 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23808:	00236f40 	call	236f4 <alt_get_errno>
   2380c:	1007883a 	mov	r3,r2
   23810:	00801444 	movi	r2,81
   23814:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23818:	00bfffc4 	movi	r2,-1
}
   2381c:	e037883a 	mov	sp,fp
   23820:	dfc00117 	ldw	ra,4(sp)
   23824:	df000017 	ldw	fp,0(sp)
   23828:	dec00204 	addi	sp,sp,8
   2382c:	f800283a 	ret

00023830 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23830:	defffd04 	addi	sp,sp,-12
   23834:	dfc00215 	stw	ra,8(sp)
   23838:	df000115 	stw	fp,4(sp)
   2383c:	df000104 	addi	fp,sp,4
   23840:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23844:	d1600604 	addi	r5,gp,-32744
   23848:	e13fff17 	ldw	r4,-4(fp)
   2384c:	0023b6c0 	call	23b6c <alt_dev_llist_insert>
}
   23850:	e037883a 	mov	sp,fp
   23854:	dfc00117 	ldw	ra,4(sp)
   23858:	df000017 	ldw	fp,0(sp)
   2385c:	dec00204 	addi	sp,sp,8
   23860:	f800283a 	ret

00023864 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23864:	defffd04 	addi	sp,sp,-12
   23868:	dfc00215 	stw	ra,8(sp)
   2386c:	df000115 	stw	fp,4(sp)
   23870:	df000104 	addi	fp,sp,4
   23874:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   23878:	00240d40 	call	240d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2387c:	00800044 	movi	r2,1
   23880:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23884:	0001883a 	nop
   23888:	e037883a 	mov	sp,fp
   2388c:	dfc00117 	ldw	ra,4(sp)
   23890:	df000017 	ldw	fp,0(sp)
   23894:	dec00204 	addi	sp,sp,8
   23898:	f800283a 	ret

0002389c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2389c:	defffe04 	addi	sp,sp,-8
   238a0:	dfc00115 	stw	ra,4(sp)
   238a4:	df000015 	stw	fp,0(sp)
   238a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   238ac:	010000b4 	movhi	r4,2
   238b0:	21144304 	addi	r4,r4,20748
   238b4:	00238300 	call	23830 <alt_dev_reg>
}
   238b8:	0001883a 	nop
   238bc:	e037883a 	mov	sp,fp
   238c0:	dfc00117 	ldw	ra,4(sp)
   238c4:	df000017 	ldw	fp,0(sp)
   238c8:	dec00204 	addi	sp,sp,8
   238cc:	f800283a 	ret

000238d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   238d0:	defffa04 	addi	sp,sp,-24
   238d4:	dfc00515 	stw	ra,20(sp)
   238d8:	df000415 	stw	fp,16(sp)
   238dc:	df000404 	addi	fp,sp,16
   238e0:	e13ffd15 	stw	r4,-12(fp)
   238e4:	e17ffe15 	stw	r5,-8(fp)
   238e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   238ec:	e0bffd17 	ldw	r2,-12(fp)
   238f0:	10800017 	ldw	r2,0(r2)
   238f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   238f8:	e0bffc17 	ldw	r2,-16(fp)
   238fc:	10c00a04 	addi	r3,r2,40
   23900:	e0bffd17 	ldw	r2,-12(fp)
   23904:	10800217 	ldw	r2,8(r2)
   23908:	100f883a 	mov	r7,r2
   2390c:	e1bfff17 	ldw	r6,-4(fp)
   23910:	e17ffe17 	ldw	r5,-8(fp)
   23914:	1809883a 	mov	r4,r3
   23918:	00239900 	call	23990 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2391c:	e037883a 	mov	sp,fp
   23920:	dfc00117 	ldw	ra,4(sp)
   23924:	df000017 	ldw	fp,0(sp)
   23928:	dec00204 	addi	sp,sp,8
   2392c:	f800283a 	ret

00023930 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23930:	defffa04 	addi	sp,sp,-24
   23934:	dfc00515 	stw	ra,20(sp)
   23938:	df000415 	stw	fp,16(sp)
   2393c:	df000404 	addi	fp,sp,16
   23940:	e13ffd15 	stw	r4,-12(fp)
   23944:	e17ffe15 	stw	r5,-8(fp)
   23948:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2394c:	e0bffd17 	ldw	r2,-12(fp)
   23950:	10800017 	ldw	r2,0(r2)
   23954:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23958:	e0bffc17 	ldw	r2,-16(fp)
   2395c:	10c00a04 	addi	r3,r2,40
   23960:	e0bffd17 	ldw	r2,-12(fp)
   23964:	10800217 	ldw	r2,8(r2)
   23968:	100f883a 	mov	r7,r2
   2396c:	e1bfff17 	ldw	r6,-4(fp)
   23970:	e17ffe17 	ldw	r5,-8(fp)
   23974:	1809883a 	mov	r4,r3
   23978:	0023a7c0 	call	23a7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2397c:	e037883a 	mov	sp,fp
   23980:	dfc00117 	ldw	ra,4(sp)
   23984:	df000017 	ldw	fp,0(sp)
   23988:	dec00204 	addi	sp,sp,8
   2398c:	f800283a 	ret

00023990 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23990:	defff704 	addi	sp,sp,-36
   23994:	df000815 	stw	fp,32(sp)
   23998:	df000804 	addi	fp,sp,32
   2399c:	e13ffc15 	stw	r4,-16(fp)
   239a0:	e17ffd15 	stw	r5,-12(fp)
   239a4:	e1bffe15 	stw	r6,-8(fp)
   239a8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   239ac:	e0bffc17 	ldw	r2,-16(fp)
   239b0:	10800017 	ldw	r2,0(r2)
   239b4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   239b8:	e0bffd17 	ldw	r2,-12(fp)
   239bc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   239c0:	e0bffe17 	ldw	r2,-8(fp)
   239c4:	e0fffd17 	ldw	r3,-12(fp)
   239c8:	1885883a 	add	r2,r3,r2
   239cc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   239d0:	00001206 	br	23a1c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   239d4:	e0bff917 	ldw	r2,-28(fp)
   239d8:	10800037 	ldwio	r2,0(r2)
   239dc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   239e0:	e0bffb17 	ldw	r2,-20(fp)
   239e4:	10a0000c 	andi	r2,r2,32768
   239e8:	10000626 	beq	r2,zero,23a04 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   239ec:	e0bff817 	ldw	r2,-32(fp)
   239f0:	10c00044 	addi	r3,r2,1
   239f4:	e0fff815 	stw	r3,-32(fp)
   239f8:	e0fffb17 	ldw	r3,-20(fp)
   239fc:	10c00005 	stb	r3,0(r2)
   23a00:	00000606 	br	23a1c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   23a04:	e0fff817 	ldw	r3,-32(fp)
   23a08:	e0bffd17 	ldw	r2,-12(fp)
   23a0c:	1880071e 	bne	r3,r2,23a2c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   23a10:	e0bfff17 	ldw	r2,-4(fp)
   23a14:	1090000c 	andi	r2,r2,16384
   23a18:	1000061e 	bne	r2,zero,23a34 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   23a1c:	e0fff817 	ldw	r3,-32(fp)
   23a20:	e0bffa17 	ldw	r2,-24(fp)
   23a24:	18bfeb36 	bltu	r3,r2,239d4 <altera_avalon_jtag_uart_read+0x44>
   23a28:	00000306 	br	23a38 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23a2c:	0001883a 	nop
   23a30:	00000106 	br	23a38 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   23a34:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23a38:	e0fff817 	ldw	r3,-32(fp)
   23a3c:	e0bffd17 	ldw	r2,-12(fp)
   23a40:	18800426 	beq	r3,r2,23a54 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   23a44:	e0fff817 	ldw	r3,-32(fp)
   23a48:	e0bffd17 	ldw	r2,-12(fp)
   23a4c:	1885c83a 	sub	r2,r3,r2
   23a50:	00000606 	br	23a6c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   23a54:	e0bfff17 	ldw	r2,-4(fp)
   23a58:	1090000c 	andi	r2,r2,16384
   23a5c:	10000226 	beq	r2,zero,23a68 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   23a60:	00bffd44 	movi	r2,-11
   23a64:	00000106 	br	23a6c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   23a68:	00bffec4 	movi	r2,-5
}
   23a6c:	e037883a 	mov	sp,fp
   23a70:	df000017 	ldw	fp,0(sp)
   23a74:	dec00104 	addi	sp,sp,4
   23a78:	f800283a 	ret

00023a7c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23a7c:	defff904 	addi	sp,sp,-28
   23a80:	df000615 	stw	fp,24(sp)
   23a84:	df000604 	addi	fp,sp,24
   23a88:	e13ffc15 	stw	r4,-16(fp)
   23a8c:	e17ffd15 	stw	r5,-12(fp)
   23a90:	e1bffe15 	stw	r6,-8(fp)
   23a94:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23a98:	e0bffc17 	ldw	r2,-16(fp)
   23a9c:	10800017 	ldw	r2,0(r2)
   23aa0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   23aa4:	e0bffe17 	ldw	r2,-8(fp)
   23aa8:	e0fffd17 	ldw	r3,-12(fp)
   23aac:	1885883a 	add	r2,r3,r2
   23ab0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   23ab4:	00000e06 	br	23af0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   23ab8:	e0bffa17 	ldw	r2,-24(fp)
   23abc:	10800104 	addi	r2,r2,4
   23ac0:	10800037 	ldwio	r2,0(r2)
   23ac4:	10bfffec 	andhi	r2,r2,65535
   23ac8:	10000926 	beq	r2,zero,23af0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   23acc:	e0fffa17 	ldw	r3,-24(fp)
   23ad0:	e0bffd17 	ldw	r2,-12(fp)
   23ad4:	11000044 	addi	r4,r2,1
   23ad8:	e13ffd15 	stw	r4,-12(fp)
   23adc:	10800003 	ldbu	r2,0(r2)
   23ae0:	10803fcc 	andi	r2,r2,255
   23ae4:	1080201c 	xori	r2,r2,128
   23ae8:	10bfe004 	addi	r2,r2,-128
   23aec:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   23af0:	e0fffd17 	ldw	r3,-12(fp)
   23af4:	e0bffb17 	ldw	r2,-20(fp)
   23af8:	18bfef36 	bltu	r3,r2,23ab8 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   23afc:	e0bffe17 	ldw	r2,-8(fp)
}
   23b00:	e037883a 	mov	sp,fp
   23b04:	df000017 	ldw	fp,0(sp)
   23b08:	dec00104 	addi	sp,sp,4
   23b0c:	f800283a 	ret

00023b10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23b10:	deffff04 	addi	sp,sp,-4
   23b14:	df000015 	stw	fp,0(sp)
   23b18:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23b1c:	0001883a 	nop
   23b20:	e037883a 	mov	sp,fp
   23b24:	df000017 	ldw	fp,0(sp)
   23b28:	dec00104 	addi	sp,sp,4
   23b2c:	f800283a 	ret

00023b30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23b30:	defffe04 	addi	sp,sp,-8
   23b34:	dfc00115 	stw	ra,4(sp)
   23b38:	df000015 	stw	fp,0(sp)
   23b3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23b40:	d0a00917 	ldw	r2,-32732(gp)
   23b44:	10000326 	beq	r2,zero,23b54 <alt_get_errno+0x24>
   23b48:	d0a00917 	ldw	r2,-32732(gp)
   23b4c:	103ee83a 	callr	r2
   23b50:	00000106 	br	23b58 <alt_get_errno+0x28>
   23b54:	d0a29904 	addi	r2,gp,-30108
}
   23b58:	e037883a 	mov	sp,fp
   23b5c:	dfc00117 	ldw	ra,4(sp)
   23b60:	df000017 	ldw	fp,0(sp)
   23b64:	dec00204 	addi	sp,sp,8
   23b68:	f800283a 	ret

00023b6c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23b6c:	defffa04 	addi	sp,sp,-24
   23b70:	dfc00515 	stw	ra,20(sp)
   23b74:	df000415 	stw	fp,16(sp)
   23b78:	df000404 	addi	fp,sp,16
   23b7c:	e13ffe15 	stw	r4,-8(fp)
   23b80:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23b84:	e0bffe17 	ldw	r2,-8(fp)
   23b88:	10000326 	beq	r2,zero,23b98 <alt_dev_llist_insert+0x2c>
   23b8c:	e0bffe17 	ldw	r2,-8(fp)
   23b90:	10800217 	ldw	r2,8(r2)
   23b94:	1000061e 	bne	r2,zero,23bb0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23b98:	0023b300 	call	23b30 <alt_get_errno>
   23b9c:	1007883a 	mov	r3,r2
   23ba0:	00800584 	movi	r2,22
   23ba4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23ba8:	00bffa84 	movi	r2,-22
   23bac:	00001306 	br	23bfc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23bb0:	e0bffe17 	ldw	r2,-8(fp)
   23bb4:	e0ffff17 	ldw	r3,-4(fp)
   23bb8:	e0fffc15 	stw	r3,-16(fp)
   23bbc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23bc0:	e0bffd17 	ldw	r2,-12(fp)
   23bc4:	e0fffc17 	ldw	r3,-16(fp)
   23bc8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23bcc:	e0bffc17 	ldw	r2,-16(fp)
   23bd0:	10c00017 	ldw	r3,0(r2)
   23bd4:	e0bffd17 	ldw	r2,-12(fp)
   23bd8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23bdc:	e0bffc17 	ldw	r2,-16(fp)
   23be0:	10800017 	ldw	r2,0(r2)
   23be4:	e0fffd17 	ldw	r3,-12(fp)
   23be8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23bec:	e0bffc17 	ldw	r2,-16(fp)
   23bf0:	e0fffd17 	ldw	r3,-12(fp)
   23bf4:	10c00015 	stw	r3,0(r2)

  return 0;  
   23bf8:	0005883a 	mov	r2,zero
}
   23bfc:	e037883a 	mov	sp,fp
   23c00:	dfc00117 	ldw	ra,4(sp)
   23c04:	df000017 	ldw	fp,0(sp)
   23c08:	dec00204 	addi	sp,sp,8
   23c0c:	f800283a 	ret

00023c10 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23c10:	defffd04 	addi	sp,sp,-12
   23c14:	dfc00215 	stw	ra,8(sp)
   23c18:	df000115 	stw	fp,4(sp)
   23c1c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23c20:	008000b4 	movhi	r2,2
   23c24:	1091b904 	addi	r2,r2,18148
   23c28:	e0bfff15 	stw	r2,-4(fp)
   23c2c:	00000606 	br	23c48 <_do_ctors+0x38>
        (*ctor) (); 
   23c30:	e0bfff17 	ldw	r2,-4(fp)
   23c34:	10800017 	ldw	r2,0(r2)
   23c38:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23c3c:	e0bfff17 	ldw	r2,-4(fp)
   23c40:	10bfff04 	addi	r2,r2,-4
   23c44:	e0bfff15 	stw	r2,-4(fp)
   23c48:	e0ffff17 	ldw	r3,-4(fp)
   23c4c:	008000b4 	movhi	r2,2
   23c50:	1091ba04 	addi	r2,r2,18152
   23c54:	18bff62e 	bgeu	r3,r2,23c30 <_do_ctors+0x20>
        (*ctor) (); 
}
   23c58:	0001883a 	nop
   23c5c:	e037883a 	mov	sp,fp
   23c60:	dfc00117 	ldw	ra,4(sp)
   23c64:	df000017 	ldw	fp,0(sp)
   23c68:	dec00204 	addi	sp,sp,8
   23c6c:	f800283a 	ret

00023c70 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23c70:	defffd04 	addi	sp,sp,-12
   23c74:	dfc00215 	stw	ra,8(sp)
   23c78:	df000115 	stw	fp,4(sp)
   23c7c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23c80:	008000b4 	movhi	r2,2
   23c84:	1091b904 	addi	r2,r2,18148
   23c88:	e0bfff15 	stw	r2,-4(fp)
   23c8c:	00000606 	br	23ca8 <_do_dtors+0x38>
        (*dtor) (); 
   23c90:	e0bfff17 	ldw	r2,-4(fp)
   23c94:	10800017 	ldw	r2,0(r2)
   23c98:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23c9c:	e0bfff17 	ldw	r2,-4(fp)
   23ca0:	10bfff04 	addi	r2,r2,-4
   23ca4:	e0bfff15 	stw	r2,-4(fp)
   23ca8:	e0ffff17 	ldw	r3,-4(fp)
   23cac:	008000b4 	movhi	r2,2
   23cb0:	1091ba04 	addi	r2,r2,18152
   23cb4:	18bff62e 	bgeu	r3,r2,23c90 <_do_dtors+0x20>
        (*dtor) (); 
}
   23cb8:	0001883a 	nop
   23cbc:	e037883a 	mov	sp,fp
   23cc0:	dfc00117 	ldw	ra,4(sp)
   23cc4:	df000017 	ldw	fp,0(sp)
   23cc8:	dec00204 	addi	sp,sp,8
   23ccc:	f800283a 	ret

00023cd0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23cd0:	deffff04 	addi	sp,sp,-4
   23cd4:	df000015 	stw	fp,0(sp)
   23cd8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23cdc:	0001883a 	nop
   23ce0:	e037883a 	mov	sp,fp
   23ce4:	df000017 	ldw	fp,0(sp)
   23ce8:	dec00104 	addi	sp,sp,4
   23cec:	f800283a 	ret

00023cf0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23cf0:	defff804 	addi	sp,sp,-32
   23cf4:	dfc00715 	stw	ra,28(sp)
   23cf8:	df000615 	stw	fp,24(sp)
   23cfc:	dc000515 	stw	r16,20(sp)
   23d00:	df000604 	addi	fp,sp,24
   23d04:	e13ffb15 	stw	r4,-20(fp)
   23d08:	e17ffc15 	stw	r5,-16(fp)
   23d0c:	e1bffd15 	stw	r6,-12(fp)
   23d10:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   23d14:	e1bffe17 	ldw	r6,-8(fp)
   23d18:	e17ffd17 	ldw	r5,-12(fp)
   23d1c:	e13ffc17 	ldw	r4,-16(fp)
   23d20:	0023f780 	call	23f78 <open>
   23d24:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   23d28:	e0bffa17 	ldw	r2,-24(fp)
   23d2c:	10002216 	blt	r2,zero,23db8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23d30:	040000b4 	movhi	r16,2
   23d34:	8413e304 	addi	r16,r16,20364
   23d38:	e0bffa17 	ldw	r2,-24(fp)
   23d3c:	01400304 	movi	r5,12
   23d40:	1009883a 	mov	r4,r2
   23d44:	0022e740 	call	22e74 <__mulsi3>
   23d48:	8085883a 	add	r2,r16,r2
   23d4c:	10c00017 	ldw	r3,0(r2)
   23d50:	e0bffb17 	ldw	r2,-20(fp)
   23d54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23d58:	040000b4 	movhi	r16,2
   23d5c:	8413e304 	addi	r16,r16,20364
   23d60:	e0bffa17 	ldw	r2,-24(fp)
   23d64:	01400304 	movi	r5,12
   23d68:	1009883a 	mov	r4,r2
   23d6c:	0022e740 	call	22e74 <__mulsi3>
   23d70:	8085883a 	add	r2,r16,r2
   23d74:	10800104 	addi	r2,r2,4
   23d78:	10c00017 	ldw	r3,0(r2)
   23d7c:	e0bffb17 	ldw	r2,-20(fp)
   23d80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23d84:	040000b4 	movhi	r16,2
   23d88:	8413e304 	addi	r16,r16,20364
   23d8c:	e0bffa17 	ldw	r2,-24(fp)
   23d90:	01400304 	movi	r5,12
   23d94:	1009883a 	mov	r4,r2
   23d98:	0022e740 	call	22e74 <__mulsi3>
   23d9c:	8085883a 	add	r2,r16,r2
   23da0:	10800204 	addi	r2,r2,8
   23da4:	10c00017 	ldw	r3,0(r2)
   23da8:	e0bffb17 	ldw	r2,-20(fp)
   23dac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23db0:	e13ffa17 	ldw	r4,-24(fp)
   23db4:	00235c00 	call	235c0 <alt_release_fd>
  }
} 
   23db8:	0001883a 	nop
   23dbc:	e6ffff04 	addi	sp,fp,-4
   23dc0:	dfc00217 	ldw	ra,8(sp)
   23dc4:	df000117 	ldw	fp,4(sp)
   23dc8:	dc000017 	ldw	r16,0(sp)
   23dcc:	dec00304 	addi	sp,sp,12
   23dd0:	f800283a 	ret

00023dd4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23dd4:	defffb04 	addi	sp,sp,-20
   23dd8:	dfc00415 	stw	ra,16(sp)
   23ddc:	df000315 	stw	fp,12(sp)
   23de0:	df000304 	addi	fp,sp,12
   23de4:	e13ffd15 	stw	r4,-12(fp)
   23de8:	e17ffe15 	stw	r5,-8(fp)
   23dec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23df0:	01c07fc4 	movi	r7,511
   23df4:	01800044 	movi	r6,1
   23df8:	e17ffd17 	ldw	r5,-12(fp)
   23dfc:	010000b4 	movhi	r4,2
   23e00:	2113e604 	addi	r4,r4,20376
   23e04:	0023cf00 	call	23cf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23e08:	01c07fc4 	movi	r7,511
   23e0c:	000d883a 	mov	r6,zero
   23e10:	e17ffe17 	ldw	r5,-8(fp)
   23e14:	010000b4 	movhi	r4,2
   23e18:	2113e304 	addi	r4,r4,20364
   23e1c:	0023cf00 	call	23cf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23e20:	01c07fc4 	movi	r7,511
   23e24:	01800044 	movi	r6,1
   23e28:	e17fff17 	ldw	r5,-4(fp)
   23e2c:	010000b4 	movhi	r4,2
   23e30:	2113e904 	addi	r4,r4,20388
   23e34:	0023cf00 	call	23cf0 <alt_open_fd>
}  
   23e38:	0001883a 	nop
   23e3c:	e037883a 	mov	sp,fp
   23e40:	dfc00117 	ldw	ra,4(sp)
   23e44:	df000017 	ldw	fp,0(sp)
   23e48:	dec00204 	addi	sp,sp,8
   23e4c:	f800283a 	ret

00023e50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23e50:	defffe04 	addi	sp,sp,-8
   23e54:	dfc00115 	stw	ra,4(sp)
   23e58:	df000015 	stw	fp,0(sp)
   23e5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23e60:	d0a00917 	ldw	r2,-32732(gp)
   23e64:	10000326 	beq	r2,zero,23e74 <alt_get_errno+0x24>
   23e68:	d0a00917 	ldw	r2,-32732(gp)
   23e6c:	103ee83a 	callr	r2
   23e70:	00000106 	br	23e78 <alt_get_errno+0x28>
   23e74:	d0a29904 	addi	r2,gp,-30108
}
   23e78:	e037883a 	mov	sp,fp
   23e7c:	dfc00117 	ldw	ra,4(sp)
   23e80:	df000017 	ldw	fp,0(sp)
   23e84:	dec00204 	addi	sp,sp,8
   23e88:	f800283a 	ret

00023e8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23e8c:	defffb04 	addi	sp,sp,-20
   23e90:	dfc00415 	stw	ra,16(sp)
   23e94:	df000315 	stw	fp,12(sp)
   23e98:	dc000215 	stw	r16,8(sp)
   23e9c:	df000304 	addi	fp,sp,12
   23ea0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23ea4:	e0bffe17 	ldw	r2,-8(fp)
   23ea8:	10800217 	ldw	r2,8(r2)
   23eac:	10d00034 	orhi	r3,r2,16384
   23eb0:	e0bffe17 	ldw	r2,-8(fp)
   23eb4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23eb8:	e03ffd15 	stw	zero,-12(fp)
   23ebc:	00002306 	br	23f4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23ec0:	040000b4 	movhi	r16,2
   23ec4:	8413e304 	addi	r16,r16,20364
   23ec8:	e0bffd17 	ldw	r2,-12(fp)
   23ecc:	01400304 	movi	r5,12
   23ed0:	1009883a 	mov	r4,r2
   23ed4:	0022e740 	call	22e74 <__mulsi3>
   23ed8:	8085883a 	add	r2,r16,r2
   23edc:	10c00017 	ldw	r3,0(r2)
   23ee0:	e0bffe17 	ldw	r2,-8(fp)
   23ee4:	10800017 	ldw	r2,0(r2)
   23ee8:	1880151e 	bne	r3,r2,23f40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23eec:	040000b4 	movhi	r16,2
   23ef0:	8413e304 	addi	r16,r16,20364
   23ef4:	e0bffd17 	ldw	r2,-12(fp)
   23ef8:	01400304 	movi	r5,12
   23efc:	1009883a 	mov	r4,r2
   23f00:	0022e740 	call	22e74 <__mulsi3>
   23f04:	8085883a 	add	r2,r16,r2
   23f08:	10800204 	addi	r2,r2,8
   23f0c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23f10:	10000b0e 	bge	r2,zero,23f40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   23f14:	01400304 	movi	r5,12
   23f18:	e13ffd17 	ldw	r4,-12(fp)
   23f1c:	0022e740 	call	22e74 <__mulsi3>
   23f20:	1007883a 	mov	r3,r2
   23f24:	008000b4 	movhi	r2,2
   23f28:	1093e304 	addi	r2,r2,20364
   23f2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23f30:	e0bffe17 	ldw	r2,-8(fp)
   23f34:	18800226 	beq	r3,r2,23f40 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   23f38:	00bffcc4 	movi	r2,-13
   23f3c:	00000806 	br	23f60 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23f40:	e0bffd17 	ldw	r2,-12(fp)
   23f44:	10800044 	addi	r2,r2,1
   23f48:	e0bffd15 	stw	r2,-12(fp)
   23f4c:	d0a00817 	ldw	r2,-32736(gp)
   23f50:	1007883a 	mov	r3,r2
   23f54:	e0bffd17 	ldw	r2,-12(fp)
   23f58:	18bfd92e 	bgeu	r3,r2,23ec0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   23f5c:	0005883a 	mov	r2,zero
}
   23f60:	e6ffff04 	addi	sp,fp,-4
   23f64:	dfc00217 	ldw	ra,8(sp)
   23f68:	df000117 	ldw	fp,4(sp)
   23f6c:	dc000017 	ldw	r16,0(sp)
   23f70:	dec00304 	addi	sp,sp,12
   23f74:	f800283a 	ret

00023f78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   23f78:	defff604 	addi	sp,sp,-40
   23f7c:	dfc00915 	stw	ra,36(sp)
   23f80:	df000815 	stw	fp,32(sp)
   23f84:	df000804 	addi	fp,sp,32
   23f88:	e13ffd15 	stw	r4,-12(fp)
   23f8c:	e17ffe15 	stw	r5,-8(fp)
   23f90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   23f94:	00bfffc4 	movi	r2,-1
   23f98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   23f9c:	00bffb44 	movi	r2,-19
   23fa0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   23fa4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   23fa8:	d1600604 	addi	r5,gp,-32744
   23fac:	e13ffd17 	ldw	r4,-12(fp)
   23fb0:	00240f80 	call	240f8 <alt_find_dev>
   23fb4:	e0bff815 	stw	r2,-32(fp)
   23fb8:	e0bff817 	ldw	r2,-32(fp)
   23fbc:	1000051e 	bne	r2,zero,23fd4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   23fc0:	e13ffd17 	ldw	r4,-12(fp)
   23fc4:	00241880 	call	24188 <alt_find_file>
   23fc8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   23fcc:	00800044 	movi	r2,1
   23fd0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   23fd4:	e0bff817 	ldw	r2,-32(fp)
   23fd8:	10002b26 	beq	r2,zero,24088 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   23fdc:	e13ff817 	ldw	r4,-32(fp)
   23fe0:	00242900 	call	24290 <alt_get_fd>
   23fe4:	e0bff915 	stw	r2,-28(fp)
   23fe8:	e0bff917 	ldw	r2,-28(fp)
   23fec:	1000030e 	bge	r2,zero,23ffc <open+0x84>
    {
      status = index;
   23ff0:	e0bff917 	ldw	r2,-28(fp)
   23ff4:	e0bffa15 	stw	r2,-24(fp)
   23ff8:	00002506 	br	24090 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   23ffc:	01400304 	movi	r5,12
   24000:	e13ff917 	ldw	r4,-28(fp)
   24004:	0022e740 	call	22e74 <__mulsi3>
   24008:	1007883a 	mov	r3,r2
   2400c:	008000b4 	movhi	r2,2
   24010:	1093e304 	addi	r2,r2,20364
   24014:	1885883a 	add	r2,r3,r2
   24018:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2401c:	e0fffe17 	ldw	r3,-8(fp)
   24020:	00900034 	movhi	r2,16384
   24024:	10bfffc4 	addi	r2,r2,-1
   24028:	1886703a 	and	r3,r3,r2
   2402c:	e0bffc17 	ldw	r2,-16(fp)
   24030:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24034:	e0bffb17 	ldw	r2,-20(fp)
   24038:	1000051e 	bne	r2,zero,24050 <open+0xd8>
   2403c:	e13ffc17 	ldw	r4,-16(fp)
   24040:	0023e8c0 	call	23e8c <alt_file_locked>
   24044:	e0bffa15 	stw	r2,-24(fp)
   24048:	e0bffa17 	ldw	r2,-24(fp)
   2404c:	10001016 	blt	r2,zero,24090 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24050:	e0bff817 	ldw	r2,-32(fp)
   24054:	10800317 	ldw	r2,12(r2)
   24058:	10000826 	beq	r2,zero,2407c <open+0x104>
   2405c:	e0bff817 	ldw	r2,-32(fp)
   24060:	10800317 	ldw	r2,12(r2)
   24064:	e1ffff17 	ldw	r7,-4(fp)
   24068:	e1bffe17 	ldw	r6,-8(fp)
   2406c:	e17ffd17 	ldw	r5,-12(fp)
   24070:	e13ffc17 	ldw	r4,-16(fp)
   24074:	103ee83a 	callr	r2
   24078:	00000106 	br	24080 <open+0x108>
   2407c:	0005883a 	mov	r2,zero
   24080:	e0bffa15 	stw	r2,-24(fp)
   24084:	00000206 	br	24090 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24088:	00bffb44 	movi	r2,-19
   2408c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24090:	e0bffa17 	ldw	r2,-24(fp)
   24094:	1000090e 	bge	r2,zero,240bc <open+0x144>
  {
    alt_release_fd (index);  
   24098:	e13ff917 	ldw	r4,-28(fp)
   2409c:	00235c00 	call	235c0 <alt_release_fd>
    ALT_ERRNO = -status;
   240a0:	0023e500 	call	23e50 <alt_get_errno>
   240a4:	1007883a 	mov	r3,r2
   240a8:	e0bffa17 	ldw	r2,-24(fp)
   240ac:	0085c83a 	sub	r2,zero,r2
   240b0:	18800015 	stw	r2,0(r3)
    return -1;
   240b4:	00bfffc4 	movi	r2,-1
   240b8:	00000106 	br	240c0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   240bc:	e0bff917 	ldw	r2,-28(fp)
}
   240c0:	e037883a 	mov	sp,fp
   240c4:	dfc00117 	ldw	ra,4(sp)
   240c8:	df000017 	ldw	fp,0(sp)
   240cc:	dec00204 	addi	sp,sp,8
   240d0:	f800283a 	ret

000240d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   240d4:	deffff04 	addi	sp,sp,-4
   240d8:	df000015 	stw	fp,0(sp)
   240dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   240e0:	000170fa 	wrctl	ienable,zero
}
   240e4:	0001883a 	nop
   240e8:	e037883a 	mov	sp,fp
   240ec:	df000017 	ldw	fp,0(sp)
   240f0:	dec00104 	addi	sp,sp,4
   240f4:	f800283a 	ret

000240f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   240f8:	defffa04 	addi	sp,sp,-24
   240fc:	dfc00515 	stw	ra,20(sp)
   24100:	df000415 	stw	fp,16(sp)
   24104:	df000404 	addi	fp,sp,16
   24108:	e13ffe15 	stw	r4,-8(fp)
   2410c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24110:	e0bfff17 	ldw	r2,-4(fp)
   24114:	10800017 	ldw	r2,0(r2)
   24118:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2411c:	e13ffe17 	ldw	r4,-8(fp)
   24120:	00201640 	call	20164 <strlen>
   24124:	10800044 	addi	r2,r2,1
   24128:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2412c:	00000d06 	br	24164 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24130:	e0bffc17 	ldw	r2,-16(fp)
   24134:	10800217 	ldw	r2,8(r2)
   24138:	e0fffd17 	ldw	r3,-12(fp)
   2413c:	180d883a 	mov	r6,r3
   24140:	e17ffe17 	ldw	r5,-8(fp)
   24144:	1009883a 	mov	r4,r2
   24148:	00243a00 	call	243a0 <memcmp>
   2414c:	1000021e 	bne	r2,zero,24158 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24150:	e0bffc17 	ldw	r2,-16(fp)
   24154:	00000706 	br	24174 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24158:	e0bffc17 	ldw	r2,-16(fp)
   2415c:	10800017 	ldw	r2,0(r2)
   24160:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24164:	e0fffc17 	ldw	r3,-16(fp)
   24168:	e0bfff17 	ldw	r2,-4(fp)
   2416c:	18bff01e 	bne	r3,r2,24130 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24170:	0005883a 	mov	r2,zero
}
   24174:	e037883a 	mov	sp,fp
   24178:	dfc00117 	ldw	ra,4(sp)
   2417c:	df000017 	ldw	fp,0(sp)
   24180:	dec00204 	addi	sp,sp,8
   24184:	f800283a 	ret

00024188 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24188:	defffb04 	addi	sp,sp,-20
   2418c:	dfc00415 	stw	ra,16(sp)
   24190:	df000315 	stw	fp,12(sp)
   24194:	df000304 	addi	fp,sp,12
   24198:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2419c:	d0a00417 	ldw	r2,-32752(gp)
   241a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   241a4:	00003106 	br	2426c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   241a8:	e0bffd17 	ldw	r2,-12(fp)
   241ac:	10800217 	ldw	r2,8(r2)
   241b0:	1009883a 	mov	r4,r2
   241b4:	00201640 	call	20164 <strlen>
   241b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   241bc:	e0bffd17 	ldw	r2,-12(fp)
   241c0:	10c00217 	ldw	r3,8(r2)
   241c4:	e0bffe17 	ldw	r2,-8(fp)
   241c8:	10bfffc4 	addi	r2,r2,-1
   241cc:	1885883a 	add	r2,r3,r2
   241d0:	10800003 	ldbu	r2,0(r2)
   241d4:	10803fcc 	andi	r2,r2,255
   241d8:	1080201c 	xori	r2,r2,128
   241dc:	10bfe004 	addi	r2,r2,-128
   241e0:	10800bd8 	cmpnei	r2,r2,47
   241e4:	1000031e 	bne	r2,zero,241f4 <alt_find_file+0x6c>
    {
      len -= 1;
   241e8:	e0bffe17 	ldw	r2,-8(fp)
   241ec:	10bfffc4 	addi	r2,r2,-1
   241f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   241f4:	e0bffe17 	ldw	r2,-8(fp)
   241f8:	e0ffff17 	ldw	r3,-4(fp)
   241fc:	1885883a 	add	r2,r3,r2
   24200:	10800003 	ldbu	r2,0(r2)
   24204:	10803fcc 	andi	r2,r2,255
   24208:	1080201c 	xori	r2,r2,128
   2420c:	10bfe004 	addi	r2,r2,-128
   24210:	10800be0 	cmpeqi	r2,r2,47
   24214:	1000081e 	bne	r2,zero,24238 <alt_find_file+0xb0>
   24218:	e0bffe17 	ldw	r2,-8(fp)
   2421c:	e0ffff17 	ldw	r3,-4(fp)
   24220:	1885883a 	add	r2,r3,r2
   24224:	10800003 	ldbu	r2,0(r2)
   24228:	10803fcc 	andi	r2,r2,255
   2422c:	1080201c 	xori	r2,r2,128
   24230:	10bfe004 	addi	r2,r2,-128
   24234:	10000a1e 	bne	r2,zero,24260 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24238:	e0bffd17 	ldw	r2,-12(fp)
   2423c:	10800217 	ldw	r2,8(r2)
   24240:	e0fffe17 	ldw	r3,-8(fp)
   24244:	180d883a 	mov	r6,r3
   24248:	e17fff17 	ldw	r5,-4(fp)
   2424c:	1009883a 	mov	r4,r2
   24250:	00243a00 	call	243a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24254:	1000021e 	bne	r2,zero,24260 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24258:	e0bffd17 	ldw	r2,-12(fp)
   2425c:	00000706 	br	2427c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24260:	e0bffd17 	ldw	r2,-12(fp)
   24264:	10800017 	ldw	r2,0(r2)
   24268:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2426c:	e0fffd17 	ldw	r3,-12(fp)
   24270:	d0a00404 	addi	r2,gp,-32752
   24274:	18bfcc1e 	bne	r3,r2,241a8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24278:	0005883a 	mov	r2,zero
}
   2427c:	e037883a 	mov	sp,fp
   24280:	dfc00117 	ldw	ra,4(sp)
   24284:	df000017 	ldw	fp,0(sp)
   24288:	dec00204 	addi	sp,sp,8
   2428c:	f800283a 	ret

00024290 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24290:	defffa04 	addi	sp,sp,-24
   24294:	dfc00515 	stw	ra,20(sp)
   24298:	df000415 	stw	fp,16(sp)
   2429c:	dc000315 	stw	r16,12(sp)
   242a0:	df000404 	addi	fp,sp,16
   242a4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   242a8:	00bffa04 	movi	r2,-24
   242ac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   242b0:	e03ffc15 	stw	zero,-16(fp)
   242b4:	00001d06 	br	2432c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   242b8:	040000b4 	movhi	r16,2
   242bc:	8413e304 	addi	r16,r16,20364
   242c0:	e0bffc17 	ldw	r2,-16(fp)
   242c4:	01400304 	movi	r5,12
   242c8:	1009883a 	mov	r4,r2
   242cc:	0022e740 	call	22e74 <__mulsi3>
   242d0:	8085883a 	add	r2,r16,r2
   242d4:	10800017 	ldw	r2,0(r2)
   242d8:	1000111e 	bne	r2,zero,24320 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   242dc:	040000b4 	movhi	r16,2
   242e0:	8413e304 	addi	r16,r16,20364
   242e4:	e0bffc17 	ldw	r2,-16(fp)
   242e8:	01400304 	movi	r5,12
   242ec:	1009883a 	mov	r4,r2
   242f0:	0022e740 	call	22e74 <__mulsi3>
   242f4:	8085883a 	add	r2,r16,r2
   242f8:	e0fffe17 	ldw	r3,-8(fp)
   242fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24300:	d0e00817 	ldw	r3,-32736(gp)
   24304:	e0bffc17 	ldw	r2,-16(fp)
   24308:	1880020e 	bge	r3,r2,24314 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   2430c:	e0bffc17 	ldw	r2,-16(fp)
   24310:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   24314:	e0bffc17 	ldw	r2,-16(fp)
   24318:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2431c:	00000606 	br	24338 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24320:	e0bffc17 	ldw	r2,-16(fp)
   24324:	10800044 	addi	r2,r2,1
   24328:	e0bffc15 	stw	r2,-16(fp)
   2432c:	e0bffc17 	ldw	r2,-16(fp)
   24330:	10800810 	cmplti	r2,r2,32
   24334:	103fe01e 	bne	r2,zero,242b8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24338:	e0bffd17 	ldw	r2,-12(fp)
}
   2433c:	e6ffff04 	addi	sp,fp,-4
   24340:	dfc00217 	ldw	ra,8(sp)
   24344:	df000117 	ldw	fp,4(sp)
   24348:	dc000017 	ldw	r16,0(sp)
   2434c:	dec00304 	addi	sp,sp,12
   24350:	f800283a 	ret

00024354 <atexit>:
   24354:	200b883a 	mov	r5,r4
   24358:	000f883a 	mov	r7,zero
   2435c:	000d883a 	mov	r6,zero
   24360:	0009883a 	mov	r4,zero
   24364:	002441c1 	jmpi	2441c <__register_exitproc>

00024368 <exit>:
   24368:	defffe04 	addi	sp,sp,-8
   2436c:	000b883a 	mov	r5,zero
   24370:	dc000015 	stw	r16,0(sp)
   24374:	dfc00115 	stw	ra,4(sp)
   24378:	2021883a 	mov	r16,r4
   2437c:	00245340 	call	24534 <__call_exitprocs>
   24380:	008000b4 	movhi	r2,2
   24384:	10944e04 	addi	r2,r2,20792
   24388:	11000017 	ldw	r4,0(r2)
   2438c:	20800f17 	ldw	r2,60(r4)
   24390:	10000126 	beq	r2,zero,24398 <exit+0x30>
   24394:	103ee83a 	callr	r2
   24398:	8009883a 	mov	r4,r16
   2439c:	00246b40 	call	246b4 <_exit>

000243a0 <memcmp>:
   243a0:	01c000c4 	movi	r7,3
   243a4:	3980192e 	bgeu	r7,r6,2440c <memcmp+0x6c>
   243a8:	2144b03a 	or	r2,r4,r5
   243ac:	11c4703a 	and	r2,r2,r7
   243b0:	10000f26 	beq	r2,zero,243f0 <memcmp+0x50>
   243b4:	20800003 	ldbu	r2,0(r4)
   243b8:	28c00003 	ldbu	r3,0(r5)
   243bc:	10c0151e 	bne	r2,r3,24414 <memcmp+0x74>
   243c0:	31bfff84 	addi	r6,r6,-2
   243c4:	01ffffc4 	movi	r7,-1
   243c8:	00000406 	br	243dc <memcmp+0x3c>
   243cc:	20800003 	ldbu	r2,0(r4)
   243d0:	28c00003 	ldbu	r3,0(r5)
   243d4:	31bfffc4 	addi	r6,r6,-1
   243d8:	10c00e1e 	bne	r2,r3,24414 <memcmp+0x74>
   243dc:	21000044 	addi	r4,r4,1
   243e0:	29400044 	addi	r5,r5,1
   243e4:	31fff91e 	bne	r6,r7,243cc <memcmp+0x2c>
   243e8:	0005883a 	mov	r2,zero
   243ec:	f800283a 	ret
   243f0:	20c00017 	ldw	r3,0(r4)
   243f4:	28800017 	ldw	r2,0(r5)
   243f8:	18bfee1e 	bne	r3,r2,243b4 <memcmp+0x14>
   243fc:	31bfff04 	addi	r6,r6,-4
   24400:	21000104 	addi	r4,r4,4
   24404:	29400104 	addi	r5,r5,4
   24408:	39bff936 	bltu	r7,r6,243f0 <memcmp+0x50>
   2440c:	303fe91e 	bne	r6,zero,243b4 <memcmp+0x14>
   24410:	003ff506 	br	243e8 <memcmp+0x48>
   24414:	10c5c83a 	sub	r2,r2,r3
   24418:	f800283a 	ret

0002441c <__register_exitproc>:
   2441c:	defffa04 	addi	sp,sp,-24
   24420:	dc000315 	stw	r16,12(sp)
   24424:	040000b4 	movhi	r16,2
   24428:	84144e04 	addi	r16,r16,20792
   2442c:	80c00017 	ldw	r3,0(r16)
   24430:	dc400415 	stw	r17,16(sp)
   24434:	dfc00515 	stw	ra,20(sp)
   24438:	18805217 	ldw	r2,328(r3)
   2443c:	2023883a 	mov	r17,r4
   24440:	10003726 	beq	r2,zero,24520 <__register_exitproc+0x104>
   24444:	10c00117 	ldw	r3,4(r2)
   24448:	010007c4 	movi	r4,31
   2444c:	20c00e16 	blt	r4,r3,24488 <__register_exitproc+0x6c>
   24450:	1a000044 	addi	r8,r3,1
   24454:	8800221e 	bne	r17,zero,244e0 <__register_exitproc+0xc4>
   24458:	18c00084 	addi	r3,r3,2
   2445c:	18c7883a 	add	r3,r3,r3
   24460:	18c7883a 	add	r3,r3,r3
   24464:	12000115 	stw	r8,4(r2)
   24468:	10c7883a 	add	r3,r2,r3
   2446c:	19400015 	stw	r5,0(r3)
   24470:	0005883a 	mov	r2,zero
   24474:	dfc00517 	ldw	ra,20(sp)
   24478:	dc400417 	ldw	r17,16(sp)
   2447c:	dc000317 	ldw	r16,12(sp)
   24480:	dec00604 	addi	sp,sp,24
   24484:	f800283a 	ret
   24488:	00800034 	movhi	r2,0
   2448c:	10800004 	addi	r2,r2,0
   24490:	10002626 	beq	r2,zero,2452c <__register_exitproc+0x110>
   24494:	01006404 	movi	r4,400
   24498:	d9400015 	stw	r5,0(sp)
   2449c:	d9800115 	stw	r6,4(sp)
   244a0:	d9c00215 	stw	r7,8(sp)
   244a4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   244a8:	d9400017 	ldw	r5,0(sp)
   244ac:	d9800117 	ldw	r6,4(sp)
   244b0:	d9c00217 	ldw	r7,8(sp)
   244b4:	10001d26 	beq	r2,zero,2452c <__register_exitproc+0x110>
   244b8:	81000017 	ldw	r4,0(r16)
   244bc:	10000115 	stw	zero,4(r2)
   244c0:	02000044 	movi	r8,1
   244c4:	22405217 	ldw	r9,328(r4)
   244c8:	0007883a 	mov	r3,zero
   244cc:	12400015 	stw	r9,0(r2)
   244d0:	20805215 	stw	r2,328(r4)
   244d4:	10006215 	stw	zero,392(r2)
   244d8:	10006315 	stw	zero,396(r2)
   244dc:	883fde26 	beq	r17,zero,24458 <__register_exitproc+0x3c>
   244e0:	18c9883a 	add	r4,r3,r3
   244e4:	2109883a 	add	r4,r4,r4
   244e8:	1109883a 	add	r4,r2,r4
   244ec:	21802215 	stw	r6,136(r4)
   244f0:	01800044 	movi	r6,1
   244f4:	12406217 	ldw	r9,392(r2)
   244f8:	30cc983a 	sll	r6,r6,r3
   244fc:	4992b03a 	or	r9,r9,r6
   24500:	12406215 	stw	r9,392(r2)
   24504:	21c04215 	stw	r7,264(r4)
   24508:	01000084 	movi	r4,2
   2450c:	893fd21e 	bne	r17,r4,24458 <__register_exitproc+0x3c>
   24510:	11006317 	ldw	r4,396(r2)
   24514:	218cb03a 	or	r6,r4,r6
   24518:	11806315 	stw	r6,396(r2)
   2451c:	003fce06 	br	24458 <__register_exitproc+0x3c>
   24520:	18805304 	addi	r2,r3,332
   24524:	18805215 	stw	r2,328(r3)
   24528:	003fc606 	br	24444 <__register_exitproc+0x28>
   2452c:	00bfffc4 	movi	r2,-1
   24530:	003fd006 	br	24474 <__register_exitproc+0x58>

00024534 <__call_exitprocs>:
   24534:	defff504 	addi	sp,sp,-44
   24538:	df000915 	stw	fp,36(sp)
   2453c:	dd400615 	stw	r21,24(sp)
   24540:	dc800315 	stw	r18,12(sp)
   24544:	dfc00a15 	stw	ra,40(sp)
   24548:	ddc00815 	stw	r23,32(sp)
   2454c:	dd800715 	stw	r22,28(sp)
   24550:	dd000515 	stw	r20,20(sp)
   24554:	dcc00415 	stw	r19,16(sp)
   24558:	dc400215 	stw	r17,8(sp)
   2455c:	dc000115 	stw	r16,4(sp)
   24560:	d9000015 	stw	r4,0(sp)
   24564:	2839883a 	mov	fp,r5
   24568:	04800044 	movi	r18,1
   2456c:	057fffc4 	movi	r21,-1
   24570:	008000b4 	movhi	r2,2
   24574:	10944e04 	addi	r2,r2,20792
   24578:	12000017 	ldw	r8,0(r2)
   2457c:	45005217 	ldw	r20,328(r8)
   24580:	44c05204 	addi	r19,r8,328
   24584:	a0001c26 	beq	r20,zero,245f8 <__call_exitprocs+0xc4>
   24588:	a0800117 	ldw	r2,4(r20)
   2458c:	15ffffc4 	addi	r23,r2,-1
   24590:	b8000d16 	blt	r23,zero,245c8 <__call_exitprocs+0x94>
   24594:	14000044 	addi	r16,r2,1
   24598:	8421883a 	add	r16,r16,r16
   2459c:	8421883a 	add	r16,r16,r16
   245a0:	84402004 	addi	r17,r16,128
   245a4:	a463883a 	add	r17,r20,r17
   245a8:	a421883a 	add	r16,r20,r16
   245ac:	e0001e26 	beq	fp,zero,24628 <__call_exitprocs+0xf4>
   245b0:	80804017 	ldw	r2,256(r16)
   245b4:	e0801c26 	beq	fp,r2,24628 <__call_exitprocs+0xf4>
   245b8:	bdffffc4 	addi	r23,r23,-1
   245bc:	843fff04 	addi	r16,r16,-4
   245c0:	8c7fff04 	addi	r17,r17,-4
   245c4:	bd7ff91e 	bne	r23,r21,245ac <__call_exitprocs+0x78>
   245c8:	00800034 	movhi	r2,0
   245cc:	10800004 	addi	r2,r2,0
   245d0:	10000926 	beq	r2,zero,245f8 <__call_exitprocs+0xc4>
   245d4:	a0800117 	ldw	r2,4(r20)
   245d8:	1000301e 	bne	r2,zero,2469c <__call_exitprocs+0x168>
   245dc:	a0800017 	ldw	r2,0(r20)
   245e0:	10003226 	beq	r2,zero,246ac <__call_exitprocs+0x178>
   245e4:	a009883a 	mov	r4,r20
   245e8:	98800015 	stw	r2,0(r19)
   245ec:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   245f0:	9d000017 	ldw	r20,0(r19)
   245f4:	a03fe41e 	bne	r20,zero,24588 <__call_exitprocs+0x54>
   245f8:	dfc00a17 	ldw	ra,40(sp)
   245fc:	df000917 	ldw	fp,36(sp)
   24600:	ddc00817 	ldw	r23,32(sp)
   24604:	dd800717 	ldw	r22,28(sp)
   24608:	dd400617 	ldw	r21,24(sp)
   2460c:	dd000517 	ldw	r20,20(sp)
   24610:	dcc00417 	ldw	r19,16(sp)
   24614:	dc800317 	ldw	r18,12(sp)
   24618:	dc400217 	ldw	r17,8(sp)
   2461c:	dc000117 	ldw	r16,4(sp)
   24620:	dec00b04 	addi	sp,sp,44
   24624:	f800283a 	ret
   24628:	a0800117 	ldw	r2,4(r20)
   2462c:	80c00017 	ldw	r3,0(r16)
   24630:	10bfffc4 	addi	r2,r2,-1
   24634:	15c01426 	beq	r2,r23,24688 <__call_exitprocs+0x154>
   24638:	80000015 	stw	zero,0(r16)
   2463c:	183fde26 	beq	r3,zero,245b8 <__call_exitprocs+0x84>
   24640:	95c8983a 	sll	r4,r18,r23
   24644:	a0806217 	ldw	r2,392(r20)
   24648:	a5800117 	ldw	r22,4(r20)
   2464c:	2084703a 	and	r2,r4,r2
   24650:	10000b26 	beq	r2,zero,24680 <__call_exitprocs+0x14c>
   24654:	a0806317 	ldw	r2,396(r20)
   24658:	2088703a 	and	r4,r4,r2
   2465c:	20000c1e 	bne	r4,zero,24690 <__call_exitprocs+0x15c>
   24660:	89400017 	ldw	r5,0(r17)
   24664:	d9000017 	ldw	r4,0(sp)
   24668:	183ee83a 	callr	r3
   2466c:	a0800117 	ldw	r2,4(r20)
   24670:	15bfbf1e 	bne	r2,r22,24570 <__call_exitprocs+0x3c>
   24674:	98800017 	ldw	r2,0(r19)
   24678:	153fcf26 	beq	r2,r20,245b8 <__call_exitprocs+0x84>
   2467c:	003fbc06 	br	24570 <__call_exitprocs+0x3c>
   24680:	183ee83a 	callr	r3
   24684:	003ff906 	br	2466c <__call_exitprocs+0x138>
   24688:	a5c00115 	stw	r23,4(r20)
   2468c:	003feb06 	br	2463c <__call_exitprocs+0x108>
   24690:	89000017 	ldw	r4,0(r17)
   24694:	183ee83a 	callr	r3
   24698:	003ff406 	br	2466c <__call_exitprocs+0x138>
   2469c:	a0800017 	ldw	r2,0(r20)
   246a0:	a027883a 	mov	r19,r20
   246a4:	1029883a 	mov	r20,r2
   246a8:	003fb606 	br	24584 <__call_exitprocs+0x50>
   246ac:	0005883a 	mov	r2,zero
   246b0:	003ffb06 	br	246a0 <__call_exitprocs+0x16c>

000246b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   246b4:	defffd04 	addi	sp,sp,-12
   246b8:	df000215 	stw	fp,8(sp)
   246bc:	df000204 	addi	fp,sp,8
   246c0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   246c4:	0001883a 	nop
   246c8:	e0bfff17 	ldw	r2,-4(fp)
   246cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   246d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   246d4:	10000226 	beq	r2,zero,246e0 <_exit+0x2c>
    ALT_SIM_FAIL();
   246d8:	002af070 	cmpltui	zero,zero,43969
   246dc:	00000106 	br	246e4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   246e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   246e4:	003fff06 	br	246e4 <_exit+0x30>
