
RUN_ON_HDL_SIMULATOR_ONLY_niosLab3.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_niosLab3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00001618 memsz 0x00001618 flags r-x
    LOAD off    0x00002638 vaddr 0x00021638 paddr 0x0002190c align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002be0 vaddr 0x00021be0 paddr 0x00021be0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  0000290c  2**0
                  CONTENTS
  2 .text         000015d0  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  000215f0  000215f0  000025f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00021638  0002190c  00002638  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00021be0  00021be0  00002be0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00021bf0  00021bf0  0000290c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004d8  00000000  00000000  00002930  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006039  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020fa  00000000  00000000  00008e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002577  00000000  00000000  0000af3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008f0  00000000  00000000  0000d4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000013f8  00000000  00000000  0000dda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006f2  00000000  00000000  0000f19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  0000f890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00010f32  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00010f35  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00010f41  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00010f42  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00010f43  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00010f4e  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00010f59  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  00010f64  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000002b  00000000  00000000  00010f6c  2**0
                  CONTENTS, READONLY
 25 .jdi          00004e8b  00000000  00000000  00010f97  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003df09  00000000  00000000  00015e22  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
000215f0 l    d  .rodata	00000000 .rodata
00021638 l    d  .rwdata	00000000 .rwdata
00021be0 l    d  .bss	00000000 .bss
00021bf0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab3_bsp//obj/HAL/src/crt0.o
00020038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00021638 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00020268 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00020400 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002053c l     F .text	00000034 alt_dev_reg
00021718 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00020840 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00020974 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000209a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00020b60 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00020cc0 l     F .text	0000003c alt_get_errno
00020cfc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00020354 g     F .text	0000007c alt_main
000200a8 g     F .text	00000080 _puts_r
0002190c g       *ABS*	00000000 __flash_rwdata_start
00020fc8 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021be0 g     O .bss	00000004 errno
00021be8 g     O .bss	00000004 alt_argv
000298ec g       *ABS*	00000000 _gp
000203d0 g     F .text	00000030 usleep
0002176c g     O .rwdata	00000180 alt_fd_list
00020fec g     F .text	00000090 alt_find_dev
00020c44 g     F .text	0000007c alt_io_redirect
000215f0 g       *ABS*	00000000 __DTOR_END__
00020128 g     F .text	00000014 puts
0002069c g     F .text	000000ec altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00021904 g     O .rwdata	00000004 alt_max_fd
000218ec g     O .rwdata	00000004 _global_impure_ptr
00021bf0 g       *ABS*	00000000 __bss_end
00021744 g     O .rwdata	00000028 alt_dev_null
00020954 g     F .text	00000020 alt_dcache_flush_all
0002190c g       *ABS*	00000000 __ram_rwdata_end
000218fc g     O .rwdata	00000008 alt_dev_list
0002043c g     F .text	00000100 write
00021638 g       *ABS*	00000000 __ram_rodata_end
00021bf0 g       *ABS*	00000000 end
000215f0 g       *ABS*	00000000 __CTOR_LIST__
0003d4c0 g       *ABS*	00000000 __alt_stack_pointer
00020788 g     F .text	00000094 altera_avalon_jtag_uart_write
00021404 g     F .text	00000190 __call_exitprocs
00020020 g     F .text	0000001c _start
000205a8 g     F .text	00000034 alt_sys_init
000212ac g     F .text	00000158 __register_exitproc
00021594 g     F .text	00000028 .hidden __mulsi3
00021638 g       *ABS*	00000000 __ram_rwdata_start
000215f0 g       *ABS*	00000000 __ram_rodata_start
000205dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00021184 g     F .text	000000c4 alt_get_fd
0002081c g     F .text	00000024 alt_busy_sleep
0002127c g     F .text	00000030 memcmp
00021bf0 g       *ABS*	00000000 __alt_stack_base
0002107c g     F .text	00000108 alt_find_file
000209dc g     F .text	000000a4 alt_dev_llist_insert
00020158 g     F .text	000000b8 __sfvwrite_small_dev
00021be0 g       *ABS*	00000000 __bss_start
0002003c g     F .text	0000006c main
00021bec g     O .bss	00000004 alt_envp
0002063c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00021908 g     O .rwdata	00000004 alt_errno
000215f0 g       *ABS*	00000000 __CTOR_END__
000215f0 g       *ABS*	00000000 __flash_rodata_start
000215f0 g       *ABS*	00000000 __DTOR_LIST__
00020570 g     F .text	00000038 alt_irq_init
00020f44 g     F .text	00000084 alt_release_fd
00021248 g     F .text	00000014 atexit
00020210 g     F .text	00000058 _write_r
000218f0 g     O .rwdata	00000004 _impure_ptr
00021be4 g     O .bss	00000004 alt_argc
00020ae0 g     F .text	00000060 _do_dtors
000218f4 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002190c g       *ABS*	00000000 _edata
00021bf0 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
0002125c g     F .text	00000020 exit
0003d4c0 g       *ABS*	00000000 __alt_data_end
000215bc g     F .text	00000034 _exit
0002013c g     F .text	0000001c strlen
00020de8 g     F .text	0000015c open
00020b40 g     F .text	00000020 alt_icache_flush_all
00020a80 g     F .text	00000060 _do_ctors
0002087c g     F .text	000000d8 close
000202d0 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a63b14 	ori	gp,gp,39148
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20030:	00202d00 	call	202d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20034:	00203540 	call	20354 <alt_main>

00020038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20038:	003fff06 	br	20038 <alt_after_alt_main>

0002003c <main>:
// LED Peripheral
#define REG_DATA_OFFSET 1
#define PERIPHERAL_LED_0_BASE 4


int main(void){
   2003c:	defffc04 	addi	sp,sp,-16
   20040:	dfc00315 	stw	ra,12(sp)
   20044:	df000215 	stw	fp,8(sp)
   20048:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   2004c:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   20050:	00800104 	movi	r2,4
   20054:	e0bfff15 	stw	r2,-4(fp)

#ifndef SIM
  printf("Embarcados++ \n");
   20058:	010000b4 	movhi	r4,2
   2005c:	21057c04 	addi	r4,r4,5616
   20060:	00201280 	call	20128 <puts>
#endif

  while(1){
      if (led < 4){
   20064:	e0bffe17 	ldw	r2,-8(fp)
   20068:	10800128 	cmpgeui	r2,r2,4
   2006c:	10000c1e 	bne	r2,zero,200a0 <main+0x64>
          *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
   20070:	e0bfff17 	ldw	r2,-4(fp)
   20074:	10c00104 	addi	r3,r2,4
   20078:	e0bffe17 	ldw	r2,-8(fp)
   2007c:	11000044 	addi	r4,r2,1
   20080:	e13ffe15 	stw	r4,-8(fp)
   20084:	01000044 	movi	r4,1
   20088:	2084983a 	sll	r2,r4,r2
   2008c:	18800015 	stw	r2,0(r3)
#ifndef SIM
          usleep(500000); // remover durante a simulacao
   20090:	01000234 	movhi	r4,8
   20094:	21284804 	addi	r4,r4,-24288
   20098:	00203d00 	call	203d0 <usleep>
   2009c:	003ff106 	br	20064 <main+0x28>
#endif
      }
      else{
          led = 0;
   200a0:	e03ffe15 	stw	zero,-8(fp)
      }
  };
   200a4:	003fef06 	br	20064 <main+0x28>

000200a8 <_puts_r>:
   200a8:	defffd04 	addi	sp,sp,-12
   200ac:	dc000015 	stw	r16,0(sp)
   200b0:	2021883a 	mov	r16,r4
   200b4:	2809883a 	mov	r4,r5
   200b8:	dfc00215 	stw	ra,8(sp)
   200bc:	dc400115 	stw	r17,4(sp)
   200c0:	2823883a 	mov	r17,r5
   200c4:	002013c0 	call	2013c <strlen>
   200c8:	81400217 	ldw	r5,8(r16)
   200cc:	010000b4 	movhi	r4,2
   200d0:	21005604 	addi	r4,r4,344
   200d4:	29000115 	stw	r4,4(r5)
   200d8:	100f883a 	mov	r7,r2
   200dc:	880d883a 	mov	r6,r17
   200e0:	8009883a 	mov	r4,r16
   200e4:	00201580 	call	20158 <__sfvwrite_small_dev>
   200e8:	00ffffc4 	movi	r3,-1
   200ec:	10c00926 	beq	r2,r3,20114 <_puts_r+0x6c>
   200f0:	81400217 	ldw	r5,8(r16)
   200f4:	018000b4 	movhi	r6,2
   200f8:	01c00044 	movi	r7,1
   200fc:	28800117 	ldw	r2,4(r5)
   20100:	31858004 	addi	r6,r6,5632
   20104:	8009883a 	mov	r4,r16
   20108:	103ee83a 	callr	r2
   2010c:	10bfffe0 	cmpeqi	r2,r2,-1
   20110:	0085c83a 	sub	r2,zero,r2
   20114:	dfc00217 	ldw	ra,8(sp)
   20118:	dc400117 	ldw	r17,4(sp)
   2011c:	dc000017 	ldw	r16,0(sp)
   20120:	dec00304 	addi	sp,sp,12
   20124:	f800283a 	ret

00020128 <puts>:
   20128:	008000b4 	movhi	r2,2
   2012c:	10863c04 	addi	r2,r2,6384
   20130:	200b883a 	mov	r5,r4
   20134:	11000017 	ldw	r4,0(r2)
   20138:	00200a81 	jmpi	200a8 <_puts_r>

0002013c <strlen>:
   2013c:	2005883a 	mov	r2,r4
   20140:	10c00007 	ldb	r3,0(r2)
   20144:	18000226 	beq	r3,zero,20150 <strlen+0x14>
   20148:	10800044 	addi	r2,r2,1
   2014c:	003ffc06 	br	20140 <strlen+0x4>
   20150:	1105c83a 	sub	r2,r2,r4
   20154:	f800283a 	ret

00020158 <__sfvwrite_small_dev>:
   20158:	2880000b 	ldhu	r2,0(r5)
   2015c:	1080020c 	andi	r2,r2,8
   20160:	10002126 	beq	r2,zero,201e8 <__sfvwrite_small_dev+0x90>
   20164:	2880008f 	ldh	r2,2(r5)
   20168:	defffa04 	addi	sp,sp,-24
   2016c:	dc000015 	stw	r16,0(sp)
   20170:	dfc00515 	stw	ra,20(sp)
   20174:	dd000415 	stw	r20,16(sp)
   20178:	dcc00315 	stw	r19,12(sp)
   2017c:	dc800215 	stw	r18,8(sp)
   20180:	dc400115 	stw	r17,4(sp)
   20184:	2821883a 	mov	r16,r5
   20188:	10001216 	blt	r2,zero,201d4 <__sfvwrite_small_dev+0x7c>
   2018c:	2027883a 	mov	r19,r4
   20190:	3025883a 	mov	r18,r6
   20194:	3823883a 	mov	r17,r7
   20198:	05010004 	movi	r20,1024
   2019c:	04400b0e 	bge	zero,r17,201cc <__sfvwrite_small_dev+0x74>
   201a0:	880f883a 	mov	r7,r17
   201a4:	a440010e 	bge	r20,r17,201ac <__sfvwrite_small_dev+0x54>
   201a8:	01c10004 	movi	r7,1024
   201ac:	8140008f 	ldh	r5,2(r16)
   201b0:	900d883a 	mov	r6,r18
   201b4:	9809883a 	mov	r4,r19
   201b8:	00202100 	call	20210 <_write_r>
   201bc:	0080050e 	bge	zero,r2,201d4 <__sfvwrite_small_dev+0x7c>
   201c0:	88a3c83a 	sub	r17,r17,r2
   201c4:	90a5883a 	add	r18,r18,r2
   201c8:	003ff406 	br	2019c <__sfvwrite_small_dev+0x44>
   201cc:	0005883a 	mov	r2,zero
   201d0:	00000706 	br	201f0 <__sfvwrite_small_dev+0x98>
   201d4:	8080000b 	ldhu	r2,0(r16)
   201d8:	10801014 	ori	r2,r2,64
   201dc:	8080000d 	sth	r2,0(r16)
   201e0:	00bfffc4 	movi	r2,-1
   201e4:	00000206 	br	201f0 <__sfvwrite_small_dev+0x98>
   201e8:	00bfffc4 	movi	r2,-1
   201ec:	f800283a 	ret
   201f0:	dfc00517 	ldw	ra,20(sp)
   201f4:	dd000417 	ldw	r20,16(sp)
   201f8:	dcc00317 	ldw	r19,12(sp)
   201fc:	dc800217 	ldw	r18,8(sp)
   20200:	dc400117 	ldw	r17,4(sp)
   20204:	dc000017 	ldw	r16,0(sp)
   20208:	dec00604 	addi	sp,sp,24
   2020c:	f800283a 	ret

00020210 <_write_r>:
   20210:	defffd04 	addi	sp,sp,-12
   20214:	dc000015 	stw	r16,0(sp)
   20218:	040000b4 	movhi	r16,2
   2021c:	dc400115 	stw	r17,4(sp)
   20220:	8406f804 	addi	r16,r16,7136
   20224:	2023883a 	mov	r17,r4
   20228:	2809883a 	mov	r4,r5
   2022c:	300b883a 	mov	r5,r6
   20230:	380d883a 	mov	r6,r7
   20234:	dfc00215 	stw	ra,8(sp)
   20238:	80000015 	stw	zero,0(r16)
   2023c:	002043c0 	call	2043c <write>
   20240:	00ffffc4 	movi	r3,-1
   20244:	10c0031e 	bne	r2,r3,20254 <_write_r+0x44>
   20248:	80c00017 	ldw	r3,0(r16)
   2024c:	18000126 	beq	r3,zero,20254 <_write_r+0x44>
   20250:	88c00015 	stw	r3,0(r17)
   20254:	dfc00217 	ldw	ra,8(sp)
   20258:	dc400117 	ldw	r17,4(sp)
   2025c:	dc000017 	ldw	r16,0(sp)
   20260:	dec00304 	addi	sp,sp,12
   20264:	f800283a 	ret

00020268 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   20268:	defffc04 	addi	sp,sp,-16
   2026c:	df000315 	stw	fp,12(sp)
   20270:	df000304 	addi	fp,sp,12
   20274:	e13ffd15 	stw	r4,-12(fp)
   20278:	e17ffe15 	stw	r5,-8(fp)
   2027c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20280:	e0fffe17 	ldw	r3,-8(fp)
   20284:	e0bffd17 	ldw	r2,-12(fp)
   20288:	18800c26 	beq	r3,r2,202bc <alt_load_section+0x54>
  {
    while( to != end )
   2028c:	00000806 	br	202b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20290:	e0bffe17 	ldw	r2,-8(fp)
   20294:	10c00104 	addi	r3,r2,4
   20298:	e0fffe15 	stw	r3,-8(fp)
   2029c:	e0fffd17 	ldw	r3,-12(fp)
   202a0:	19000104 	addi	r4,r3,4
   202a4:	e13ffd15 	stw	r4,-12(fp)
   202a8:	18c00017 	ldw	r3,0(r3)
   202ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   202b0:	e0fffe17 	ldw	r3,-8(fp)
   202b4:	e0bfff17 	ldw	r2,-4(fp)
   202b8:	18bff51e 	bne	r3,r2,20290 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   202bc:	0001883a 	nop
   202c0:	e037883a 	mov	sp,fp
   202c4:	df000017 	ldw	fp,0(sp)
   202c8:	dec00104 	addi	sp,sp,4
   202cc:	f800283a 	ret

000202d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   202d0:	defffe04 	addi	sp,sp,-8
   202d4:	dfc00115 	stw	ra,4(sp)
   202d8:	df000015 	stw	fp,0(sp)
   202dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   202e0:	018000b4 	movhi	r6,2
   202e4:	31864304 	addi	r6,r6,6412
   202e8:	014000b4 	movhi	r5,2
   202ec:	29458e04 	addi	r5,r5,5688
   202f0:	010000b4 	movhi	r4,2
   202f4:	21064304 	addi	r4,r4,6412
   202f8:	00202680 	call	20268 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   202fc:	018000b4 	movhi	r6,2
   20300:	31800804 	addi	r6,r6,32
   20304:	014000b4 	movhi	r5,2
   20308:	29400804 	addi	r5,r5,32
   2030c:	010000b4 	movhi	r4,2
   20310:	21000804 	addi	r4,r4,32
   20314:	00202680 	call	20268 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20318:	018000b4 	movhi	r6,2
   2031c:	31858e04 	addi	r6,r6,5688
   20320:	014000b4 	movhi	r5,2
   20324:	29457c04 	addi	r5,r5,5616
   20328:	010000b4 	movhi	r4,2
   2032c:	21057c04 	addi	r4,r4,5616
   20330:	00202680 	call	20268 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20334:	00209540 	call	20954 <alt_dcache_flush_all>
  alt_icache_flush_all();
   20338:	0020b400 	call	20b40 <alt_icache_flush_all>
}
   2033c:	0001883a 	nop
   20340:	e037883a 	mov	sp,fp
   20344:	dfc00117 	ldw	ra,4(sp)
   20348:	df000017 	ldw	fp,0(sp)
   2034c:	dec00204 	addi	sp,sp,8
   20350:	f800283a 	ret

00020354 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20354:	defffd04 	addi	sp,sp,-12
   20358:	dfc00215 	stw	ra,8(sp)
   2035c:	df000115 	stw	fp,4(sp)
   20360:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20364:	0009883a 	mov	r4,zero
   20368:	00205700 	call	20570 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2036c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20370:	00205a80 	call	205a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20374:	018000b4 	movhi	r6,2
   20378:	31858104 	addi	r6,r6,5636
   2037c:	014000b4 	movhi	r5,2
   20380:	29458104 	addi	r5,r5,5636
   20384:	010000b4 	movhi	r4,2
   20388:	21058104 	addi	r4,r4,5636
   2038c:	0020c440 	call	20c44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20390:	0020a800 	call	20a80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20394:	010000b4 	movhi	r4,2
   20398:	2102b804 	addi	r4,r4,2784
   2039c:	00212480 	call	21248 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   203a0:	d0a0be17 	ldw	r2,-32008(gp)
   203a4:	d0e0bf17 	ldw	r3,-32004(gp)
   203a8:	d120c017 	ldw	r4,-32000(gp)
   203ac:	200d883a 	mov	r6,r4
   203b0:	180b883a 	mov	r5,r3
   203b4:	1009883a 	mov	r4,r2
   203b8:	002003c0 	call	2003c <main>
   203bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   203c0:	01000044 	movi	r4,1
   203c4:	002087c0 	call	2087c <close>
  exit (result);
   203c8:	e13fff17 	ldw	r4,-4(fp)
   203cc:	002125c0 	call	2125c <exit>

000203d0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   203d0:	defffd04 	addi	sp,sp,-12
   203d4:	dfc00215 	stw	ra,8(sp)
   203d8:	df000115 	stw	fp,4(sp)
   203dc:	df000104 	addi	fp,sp,4
   203e0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   203e4:	e13fff17 	ldw	r4,-4(fp)
   203e8:	002081c0 	call	2081c <alt_busy_sleep>
}
   203ec:	e037883a 	mov	sp,fp
   203f0:	dfc00117 	ldw	ra,4(sp)
   203f4:	df000017 	ldw	fp,0(sp)
   203f8:	dec00204 	addi	sp,sp,8
   203fc:	f800283a 	ret

00020400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20400:	defffe04 	addi	sp,sp,-8
   20404:	dfc00115 	stw	ra,4(sp)
   20408:	df000015 	stw	fp,0(sp)
   2040c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20410:	d0a00717 	ldw	r2,-32740(gp)
   20414:	10000326 	beq	r2,zero,20424 <alt_get_errno+0x24>
   20418:	d0a00717 	ldw	r2,-32740(gp)
   2041c:	103ee83a 	callr	r2
   20420:	00000106 	br	20428 <alt_get_errno+0x28>
   20424:	d0a0bd04 	addi	r2,gp,-32012
}
   20428:	e037883a 	mov	sp,fp
   2042c:	dfc00117 	ldw	ra,4(sp)
   20430:	df000017 	ldw	fp,0(sp)
   20434:	dec00204 	addi	sp,sp,8
   20438:	f800283a 	ret

0002043c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2043c:	defff904 	addi	sp,sp,-28
   20440:	dfc00615 	stw	ra,24(sp)
   20444:	df000515 	stw	fp,20(sp)
   20448:	df000504 	addi	fp,sp,20
   2044c:	e13ffd15 	stw	r4,-12(fp)
   20450:	e17ffe15 	stw	r5,-8(fp)
   20454:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20458:	e0bffd17 	ldw	r2,-12(fp)
   2045c:	10000816 	blt	r2,zero,20480 <write+0x44>
   20460:	01400304 	movi	r5,12
   20464:	e13ffd17 	ldw	r4,-12(fp)
   20468:	00215940 	call	21594 <__mulsi3>
   2046c:	1007883a 	mov	r3,r2
   20470:	008000b4 	movhi	r2,2
   20474:	1085db04 	addi	r2,r2,5996
   20478:	1885883a 	add	r2,r3,r2
   2047c:	00000106 	br	20484 <write+0x48>
   20480:	0005883a 	mov	r2,zero
   20484:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20488:	e0bffb17 	ldw	r2,-20(fp)
   2048c:	10002126 	beq	r2,zero,20514 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   20490:	e0bffb17 	ldw	r2,-20(fp)
   20494:	10800217 	ldw	r2,8(r2)
   20498:	108000cc 	andi	r2,r2,3
   2049c:	10001826 	beq	r2,zero,20500 <write+0xc4>
   204a0:	e0bffb17 	ldw	r2,-20(fp)
   204a4:	10800017 	ldw	r2,0(r2)
   204a8:	10800617 	ldw	r2,24(r2)
   204ac:	10001426 	beq	r2,zero,20500 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   204b0:	e0bffb17 	ldw	r2,-20(fp)
   204b4:	10800017 	ldw	r2,0(r2)
   204b8:	10800617 	ldw	r2,24(r2)
   204bc:	e0ffff17 	ldw	r3,-4(fp)
   204c0:	180d883a 	mov	r6,r3
   204c4:	e17ffe17 	ldw	r5,-8(fp)
   204c8:	e13ffb17 	ldw	r4,-20(fp)
   204cc:	103ee83a 	callr	r2
   204d0:	e0bffc15 	stw	r2,-16(fp)
   204d4:	e0bffc17 	ldw	r2,-16(fp)
   204d8:	1000070e 	bge	r2,zero,204f8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   204dc:	00204000 	call	20400 <alt_get_errno>
   204e0:	1007883a 	mov	r3,r2
   204e4:	e0bffc17 	ldw	r2,-16(fp)
   204e8:	0085c83a 	sub	r2,zero,r2
   204ec:	18800015 	stw	r2,0(r3)
        return -1;
   204f0:	00bfffc4 	movi	r2,-1
   204f4:	00000c06 	br	20528 <write+0xec>
      }
      return rval;
   204f8:	e0bffc17 	ldw	r2,-16(fp)
   204fc:	00000a06 	br	20528 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   20500:	00204000 	call	20400 <alt_get_errno>
   20504:	1007883a 	mov	r3,r2
   20508:	00800344 	movi	r2,13
   2050c:	18800015 	stw	r2,0(r3)
   20510:	00000406 	br	20524 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   20514:	00204000 	call	20400 <alt_get_errno>
   20518:	1007883a 	mov	r3,r2
   2051c:	00801444 	movi	r2,81
   20520:	18800015 	stw	r2,0(r3)
  }
  return -1;
   20524:	00bfffc4 	movi	r2,-1
}
   20528:	e037883a 	mov	sp,fp
   2052c:	dfc00117 	ldw	ra,4(sp)
   20530:	df000017 	ldw	fp,0(sp)
   20534:	dec00204 	addi	sp,sp,8
   20538:	f800283a 	ret

0002053c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2053c:	defffd04 	addi	sp,sp,-12
   20540:	dfc00215 	stw	ra,8(sp)
   20544:	df000115 	stw	fp,4(sp)
   20548:	df000104 	addi	fp,sp,4
   2054c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20550:	d1600404 	addi	r5,gp,-32752
   20554:	e13fff17 	ldw	r4,-4(fp)
   20558:	00209dc0 	call	209dc <alt_dev_llist_insert>
}
   2055c:	e037883a 	mov	sp,fp
   20560:	dfc00117 	ldw	ra,4(sp)
   20564:	df000017 	ldw	fp,0(sp)
   20568:	dec00204 	addi	sp,sp,8
   2056c:	f800283a 	ret

00020570 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20570:	defffd04 	addi	sp,sp,-12
   20574:	dfc00215 	stw	ra,8(sp)
   20578:	df000115 	stw	fp,4(sp)
   2057c:	df000104 	addi	fp,sp,4
   20580:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20584:	0020fc80 	call	20fc8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20588:	00800044 	movi	r2,1
   2058c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20590:	0001883a 	nop
   20594:	e037883a 	mov	sp,fp
   20598:	dfc00117 	ldw	ra,4(sp)
   2059c:	df000017 	ldw	fp,0(sp)
   205a0:	dec00204 	addi	sp,sp,8
   205a4:	f800283a 	ret

000205a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   205a8:	defffe04 	addi	sp,sp,-8
   205ac:	dfc00115 	stw	ra,4(sp)
   205b0:	df000015 	stw	fp,0(sp)
   205b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   205b8:	010000b4 	movhi	r4,2
   205bc:	2105c604 	addi	r4,r4,5912
   205c0:	002053c0 	call	2053c <alt_dev_reg>
}
   205c4:	0001883a 	nop
   205c8:	e037883a 	mov	sp,fp
   205cc:	dfc00117 	ldw	ra,4(sp)
   205d0:	df000017 	ldw	fp,0(sp)
   205d4:	dec00204 	addi	sp,sp,8
   205d8:	f800283a 	ret

000205dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   205dc:	defffa04 	addi	sp,sp,-24
   205e0:	dfc00515 	stw	ra,20(sp)
   205e4:	df000415 	stw	fp,16(sp)
   205e8:	df000404 	addi	fp,sp,16
   205ec:	e13ffd15 	stw	r4,-12(fp)
   205f0:	e17ffe15 	stw	r5,-8(fp)
   205f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   205f8:	e0bffd17 	ldw	r2,-12(fp)
   205fc:	10800017 	ldw	r2,0(r2)
   20600:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20604:	e0bffc17 	ldw	r2,-16(fp)
   20608:	10c00a04 	addi	r3,r2,40
   2060c:	e0bffd17 	ldw	r2,-12(fp)
   20610:	10800217 	ldw	r2,8(r2)
   20614:	100f883a 	mov	r7,r2
   20618:	e1bfff17 	ldw	r6,-4(fp)
   2061c:	e17ffe17 	ldw	r5,-8(fp)
   20620:	1809883a 	mov	r4,r3
   20624:	002069c0 	call	2069c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   20628:	e037883a 	mov	sp,fp
   2062c:	dfc00117 	ldw	ra,4(sp)
   20630:	df000017 	ldw	fp,0(sp)
   20634:	dec00204 	addi	sp,sp,8
   20638:	f800283a 	ret

0002063c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2063c:	defffa04 	addi	sp,sp,-24
   20640:	dfc00515 	stw	ra,20(sp)
   20644:	df000415 	stw	fp,16(sp)
   20648:	df000404 	addi	fp,sp,16
   2064c:	e13ffd15 	stw	r4,-12(fp)
   20650:	e17ffe15 	stw	r5,-8(fp)
   20654:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20658:	e0bffd17 	ldw	r2,-12(fp)
   2065c:	10800017 	ldw	r2,0(r2)
   20660:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20664:	e0bffc17 	ldw	r2,-16(fp)
   20668:	10c00a04 	addi	r3,r2,40
   2066c:	e0bffd17 	ldw	r2,-12(fp)
   20670:	10800217 	ldw	r2,8(r2)
   20674:	100f883a 	mov	r7,r2
   20678:	e1bfff17 	ldw	r6,-4(fp)
   2067c:	e17ffe17 	ldw	r5,-8(fp)
   20680:	1809883a 	mov	r4,r3
   20684:	00207880 	call	20788 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20688:	e037883a 	mov	sp,fp
   2068c:	dfc00117 	ldw	ra,4(sp)
   20690:	df000017 	ldw	fp,0(sp)
   20694:	dec00204 	addi	sp,sp,8
   20698:	f800283a 	ret

0002069c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   2069c:	defff704 	addi	sp,sp,-36
   206a0:	df000815 	stw	fp,32(sp)
   206a4:	df000804 	addi	fp,sp,32
   206a8:	e13ffc15 	stw	r4,-16(fp)
   206ac:	e17ffd15 	stw	r5,-12(fp)
   206b0:	e1bffe15 	stw	r6,-8(fp)
   206b4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   206b8:	e0bffc17 	ldw	r2,-16(fp)
   206bc:	10800017 	ldw	r2,0(r2)
   206c0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   206c4:	e0bffd17 	ldw	r2,-12(fp)
   206c8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   206cc:	e0bffe17 	ldw	r2,-8(fp)
   206d0:	e0fffd17 	ldw	r3,-12(fp)
   206d4:	1885883a 	add	r2,r3,r2
   206d8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   206dc:	00001206 	br	20728 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   206e0:	e0bff917 	ldw	r2,-28(fp)
   206e4:	10800037 	ldwio	r2,0(r2)
   206e8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   206ec:	e0bffb17 	ldw	r2,-20(fp)
   206f0:	10a0000c 	andi	r2,r2,32768
   206f4:	10000626 	beq	r2,zero,20710 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   206f8:	e0bff817 	ldw	r2,-32(fp)
   206fc:	10c00044 	addi	r3,r2,1
   20700:	e0fff815 	stw	r3,-32(fp)
   20704:	e0fffb17 	ldw	r3,-20(fp)
   20708:	10c00005 	stb	r3,0(r2)
   2070c:	00000606 	br	20728 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   20710:	e0fff817 	ldw	r3,-32(fp)
   20714:	e0bffd17 	ldw	r2,-12(fp)
   20718:	1880071e 	bne	r3,r2,20738 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   2071c:	e0bfff17 	ldw	r2,-4(fp)
   20720:	1090000c 	andi	r2,r2,16384
   20724:	1000061e 	bne	r2,zero,20740 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   20728:	e0fff817 	ldw	r3,-32(fp)
   2072c:	e0bffa17 	ldw	r2,-24(fp)
   20730:	18bfeb36 	bltu	r3,r2,206e0 <altera_avalon_jtag_uart_read+0x44>
   20734:	00000306 	br	20744 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   20738:	0001883a 	nop
   2073c:	00000106 	br	20744 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   20740:	0001883a 	nop
    
  }

  if (ptr != buffer)
   20744:	e0fff817 	ldw	r3,-32(fp)
   20748:	e0bffd17 	ldw	r2,-12(fp)
   2074c:	18800426 	beq	r3,r2,20760 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   20750:	e0fff817 	ldw	r3,-32(fp)
   20754:	e0bffd17 	ldw	r2,-12(fp)
   20758:	1885c83a 	sub	r2,r3,r2
   2075c:	00000606 	br	20778 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   20760:	e0bfff17 	ldw	r2,-4(fp)
   20764:	1090000c 	andi	r2,r2,16384
   20768:	10000226 	beq	r2,zero,20774 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   2076c:	00bffd44 	movi	r2,-11
   20770:	00000106 	br	20778 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   20774:	00bffec4 	movi	r2,-5
}
   20778:	e037883a 	mov	sp,fp
   2077c:	df000017 	ldw	fp,0(sp)
   20780:	dec00104 	addi	sp,sp,4
   20784:	f800283a 	ret

00020788 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20788:	defff904 	addi	sp,sp,-28
   2078c:	df000615 	stw	fp,24(sp)
   20790:	df000604 	addi	fp,sp,24
   20794:	e13ffc15 	stw	r4,-16(fp)
   20798:	e17ffd15 	stw	r5,-12(fp)
   2079c:	e1bffe15 	stw	r6,-8(fp)
   207a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   207a4:	e0bffc17 	ldw	r2,-16(fp)
   207a8:	10800017 	ldw	r2,0(r2)
   207ac:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   207b0:	e0bffe17 	ldw	r2,-8(fp)
   207b4:	e0fffd17 	ldw	r3,-12(fp)
   207b8:	1885883a 	add	r2,r3,r2
   207bc:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   207c0:	00000e06 	br	207fc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   207c4:	e0bffa17 	ldw	r2,-24(fp)
   207c8:	10800104 	addi	r2,r2,4
   207cc:	10800037 	ldwio	r2,0(r2)
   207d0:	10bfffec 	andhi	r2,r2,65535
   207d4:	10000926 	beq	r2,zero,207fc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   207d8:	e0fffa17 	ldw	r3,-24(fp)
   207dc:	e0bffd17 	ldw	r2,-12(fp)
   207e0:	11000044 	addi	r4,r2,1
   207e4:	e13ffd15 	stw	r4,-12(fp)
   207e8:	10800003 	ldbu	r2,0(r2)
   207ec:	10803fcc 	andi	r2,r2,255
   207f0:	1080201c 	xori	r2,r2,128
   207f4:	10bfe004 	addi	r2,r2,-128
   207f8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   207fc:	e0fffd17 	ldw	r3,-12(fp)
   20800:	e0bffb17 	ldw	r2,-20(fp)
   20804:	18bfef36 	bltu	r3,r2,207c4 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   20808:	e0bffe17 	ldw	r2,-8(fp)
}
   2080c:	e037883a 	mov	sp,fp
   20810:	df000017 	ldw	fp,0(sp)
   20814:	dec00104 	addi	sp,sp,4
   20818:	f800283a 	ret

0002081c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2081c:	defffe04 	addi	sp,sp,-8
   20820:	df000115 	stw	fp,4(sp)
   20824:	df000104 	addi	fp,sp,4
   20828:	e13fff15 	stw	r4,-4(fp)
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2082c:	0005883a 	mov	r2,zero
}
   20830:	e037883a 	mov	sp,fp
   20834:	df000017 	ldw	fp,0(sp)
   20838:	dec00104 	addi	sp,sp,4
   2083c:	f800283a 	ret

00020840 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20840:	defffe04 	addi	sp,sp,-8
   20844:	dfc00115 	stw	ra,4(sp)
   20848:	df000015 	stw	fp,0(sp)
   2084c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20850:	d0a00717 	ldw	r2,-32740(gp)
   20854:	10000326 	beq	r2,zero,20864 <alt_get_errno+0x24>
   20858:	d0a00717 	ldw	r2,-32740(gp)
   2085c:	103ee83a 	callr	r2
   20860:	00000106 	br	20868 <alt_get_errno+0x28>
   20864:	d0a0bd04 	addi	r2,gp,-32012
}
   20868:	e037883a 	mov	sp,fp
   2086c:	dfc00117 	ldw	ra,4(sp)
   20870:	df000017 	ldw	fp,0(sp)
   20874:	dec00204 	addi	sp,sp,8
   20878:	f800283a 	ret

0002087c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2087c:	defffb04 	addi	sp,sp,-20
   20880:	dfc00415 	stw	ra,16(sp)
   20884:	df000315 	stw	fp,12(sp)
   20888:	df000304 	addi	fp,sp,12
   2088c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   20890:	e0bfff17 	ldw	r2,-4(fp)
   20894:	10000816 	blt	r2,zero,208b8 <close+0x3c>
   20898:	01400304 	movi	r5,12
   2089c:	e13fff17 	ldw	r4,-4(fp)
   208a0:	00215940 	call	21594 <__mulsi3>
   208a4:	1007883a 	mov	r3,r2
   208a8:	008000b4 	movhi	r2,2
   208ac:	1085db04 	addi	r2,r2,5996
   208b0:	1885883a 	add	r2,r3,r2
   208b4:	00000106 	br	208bc <close+0x40>
   208b8:	0005883a 	mov	r2,zero
   208bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   208c0:	e0bffd17 	ldw	r2,-12(fp)
   208c4:	10001926 	beq	r2,zero,2092c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   208c8:	e0bffd17 	ldw	r2,-12(fp)
   208cc:	10800017 	ldw	r2,0(r2)
   208d0:	10800417 	ldw	r2,16(r2)
   208d4:	10000626 	beq	r2,zero,208f0 <close+0x74>
   208d8:	e0bffd17 	ldw	r2,-12(fp)
   208dc:	10800017 	ldw	r2,0(r2)
   208e0:	10800417 	ldw	r2,16(r2)
   208e4:	e13ffd17 	ldw	r4,-12(fp)
   208e8:	103ee83a 	callr	r2
   208ec:	00000106 	br	208f4 <close+0x78>
   208f0:	0005883a 	mov	r2,zero
   208f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   208f8:	e13fff17 	ldw	r4,-4(fp)
   208fc:	0020f440 	call	20f44 <alt_release_fd>
    if (rval < 0)
   20900:	e0bffe17 	ldw	r2,-8(fp)
   20904:	1000070e 	bge	r2,zero,20924 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   20908:	00208400 	call	20840 <alt_get_errno>
   2090c:	1007883a 	mov	r3,r2
   20910:	e0bffe17 	ldw	r2,-8(fp)
   20914:	0085c83a 	sub	r2,zero,r2
   20918:	18800015 	stw	r2,0(r3)
      return -1;
   2091c:	00bfffc4 	movi	r2,-1
   20920:	00000706 	br	20940 <close+0xc4>
    }
    return 0;
   20924:	0005883a 	mov	r2,zero
   20928:	00000506 	br	20940 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2092c:	00208400 	call	20840 <alt_get_errno>
   20930:	1007883a 	mov	r3,r2
   20934:	00801444 	movi	r2,81
   20938:	18800015 	stw	r2,0(r3)
    return -1;
   2093c:	00bfffc4 	movi	r2,-1
  }
}
   20940:	e037883a 	mov	sp,fp
   20944:	dfc00117 	ldw	ra,4(sp)
   20948:	df000017 	ldw	fp,0(sp)
   2094c:	dec00204 	addi	sp,sp,8
   20950:	f800283a 	ret

00020954 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   20954:	deffff04 	addi	sp,sp,-4
   20958:	df000015 	stw	fp,0(sp)
   2095c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20960:	0001883a 	nop
   20964:	e037883a 	mov	sp,fp
   20968:	df000017 	ldw	fp,0(sp)
   2096c:	dec00104 	addi	sp,sp,4
   20970:	f800283a 	ret

00020974 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   20974:	defffc04 	addi	sp,sp,-16
   20978:	df000315 	stw	fp,12(sp)
   2097c:	df000304 	addi	fp,sp,12
   20980:	e13ffd15 	stw	r4,-12(fp)
   20984:	e17ffe15 	stw	r5,-8(fp)
   20988:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2098c:	e0bfff17 	ldw	r2,-4(fp)
}
   20990:	e037883a 	mov	sp,fp
   20994:	df000017 	ldw	fp,0(sp)
   20998:	dec00104 	addi	sp,sp,4
   2099c:	f800283a 	ret

000209a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   209a0:	defffe04 	addi	sp,sp,-8
   209a4:	dfc00115 	stw	ra,4(sp)
   209a8:	df000015 	stw	fp,0(sp)
   209ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   209b0:	d0a00717 	ldw	r2,-32740(gp)
   209b4:	10000326 	beq	r2,zero,209c4 <alt_get_errno+0x24>
   209b8:	d0a00717 	ldw	r2,-32740(gp)
   209bc:	103ee83a 	callr	r2
   209c0:	00000106 	br	209c8 <alt_get_errno+0x28>
   209c4:	d0a0bd04 	addi	r2,gp,-32012
}
   209c8:	e037883a 	mov	sp,fp
   209cc:	dfc00117 	ldw	ra,4(sp)
   209d0:	df000017 	ldw	fp,0(sp)
   209d4:	dec00204 	addi	sp,sp,8
   209d8:	f800283a 	ret

000209dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   209dc:	defffa04 	addi	sp,sp,-24
   209e0:	dfc00515 	stw	ra,20(sp)
   209e4:	df000415 	stw	fp,16(sp)
   209e8:	df000404 	addi	fp,sp,16
   209ec:	e13ffe15 	stw	r4,-8(fp)
   209f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   209f4:	e0bffe17 	ldw	r2,-8(fp)
   209f8:	10000326 	beq	r2,zero,20a08 <alt_dev_llist_insert+0x2c>
   209fc:	e0bffe17 	ldw	r2,-8(fp)
   20a00:	10800217 	ldw	r2,8(r2)
   20a04:	1000061e 	bne	r2,zero,20a20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   20a08:	00209a00 	call	209a0 <alt_get_errno>
   20a0c:	1007883a 	mov	r3,r2
   20a10:	00800584 	movi	r2,22
   20a14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   20a18:	00bffa84 	movi	r2,-22
   20a1c:	00001306 	br	20a6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   20a20:	e0bffe17 	ldw	r2,-8(fp)
   20a24:	e0ffff17 	ldw	r3,-4(fp)
   20a28:	e0fffc15 	stw	r3,-16(fp)
   20a2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   20a30:	e0bffd17 	ldw	r2,-12(fp)
   20a34:	e0fffc17 	ldw	r3,-16(fp)
   20a38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   20a3c:	e0bffc17 	ldw	r2,-16(fp)
   20a40:	10c00017 	ldw	r3,0(r2)
   20a44:	e0bffd17 	ldw	r2,-12(fp)
   20a48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   20a4c:	e0bffc17 	ldw	r2,-16(fp)
   20a50:	10800017 	ldw	r2,0(r2)
   20a54:	e0fffd17 	ldw	r3,-12(fp)
   20a58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   20a5c:	e0bffc17 	ldw	r2,-16(fp)
   20a60:	e0fffd17 	ldw	r3,-12(fp)
   20a64:	10c00015 	stw	r3,0(r2)

  return 0;  
   20a68:	0005883a 	mov	r2,zero
}
   20a6c:	e037883a 	mov	sp,fp
   20a70:	dfc00117 	ldw	ra,4(sp)
   20a74:	df000017 	ldw	fp,0(sp)
   20a78:	dec00204 	addi	sp,sp,8
   20a7c:	f800283a 	ret

00020a80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   20a80:	defffd04 	addi	sp,sp,-12
   20a84:	dfc00215 	stw	ra,8(sp)
   20a88:	df000115 	stw	fp,4(sp)
   20a8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20a90:	008000b4 	movhi	r2,2
   20a94:	10857b04 	addi	r2,r2,5612
   20a98:	e0bfff15 	stw	r2,-4(fp)
   20a9c:	00000606 	br	20ab8 <_do_ctors+0x38>
        (*ctor) (); 
   20aa0:	e0bfff17 	ldw	r2,-4(fp)
   20aa4:	10800017 	ldw	r2,0(r2)
   20aa8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20aac:	e0bfff17 	ldw	r2,-4(fp)
   20ab0:	10bfff04 	addi	r2,r2,-4
   20ab4:	e0bfff15 	stw	r2,-4(fp)
   20ab8:	e0ffff17 	ldw	r3,-4(fp)
   20abc:	008000b4 	movhi	r2,2
   20ac0:	10857c04 	addi	r2,r2,5616
   20ac4:	18bff62e 	bgeu	r3,r2,20aa0 <_do_ctors+0x20>
        (*ctor) (); 
}
   20ac8:	0001883a 	nop
   20acc:	e037883a 	mov	sp,fp
   20ad0:	dfc00117 	ldw	ra,4(sp)
   20ad4:	df000017 	ldw	fp,0(sp)
   20ad8:	dec00204 	addi	sp,sp,8
   20adc:	f800283a 	ret

00020ae0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   20ae0:	defffd04 	addi	sp,sp,-12
   20ae4:	dfc00215 	stw	ra,8(sp)
   20ae8:	df000115 	stw	fp,4(sp)
   20aec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20af0:	008000b4 	movhi	r2,2
   20af4:	10857b04 	addi	r2,r2,5612
   20af8:	e0bfff15 	stw	r2,-4(fp)
   20afc:	00000606 	br	20b18 <_do_dtors+0x38>
        (*dtor) (); 
   20b00:	e0bfff17 	ldw	r2,-4(fp)
   20b04:	10800017 	ldw	r2,0(r2)
   20b08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20b0c:	e0bfff17 	ldw	r2,-4(fp)
   20b10:	10bfff04 	addi	r2,r2,-4
   20b14:	e0bfff15 	stw	r2,-4(fp)
   20b18:	e0ffff17 	ldw	r3,-4(fp)
   20b1c:	008000b4 	movhi	r2,2
   20b20:	10857c04 	addi	r2,r2,5616
   20b24:	18bff62e 	bgeu	r3,r2,20b00 <_do_dtors+0x20>
        (*dtor) (); 
}
   20b28:	0001883a 	nop
   20b2c:	e037883a 	mov	sp,fp
   20b30:	dfc00117 	ldw	ra,4(sp)
   20b34:	df000017 	ldw	fp,0(sp)
   20b38:	dec00204 	addi	sp,sp,8
   20b3c:	f800283a 	ret

00020b40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   20b40:	deffff04 	addi	sp,sp,-4
   20b44:	df000015 	stw	fp,0(sp)
   20b48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   20b4c:	0001883a 	nop
   20b50:	e037883a 	mov	sp,fp
   20b54:	df000017 	ldw	fp,0(sp)
   20b58:	dec00104 	addi	sp,sp,4
   20b5c:	f800283a 	ret

00020b60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   20b60:	defff804 	addi	sp,sp,-32
   20b64:	dfc00715 	stw	ra,28(sp)
   20b68:	df000615 	stw	fp,24(sp)
   20b6c:	dc000515 	stw	r16,20(sp)
   20b70:	df000604 	addi	fp,sp,24
   20b74:	e13ffb15 	stw	r4,-20(fp)
   20b78:	e17ffc15 	stw	r5,-16(fp)
   20b7c:	e1bffd15 	stw	r6,-12(fp)
   20b80:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   20b84:	e1bffe17 	ldw	r6,-8(fp)
   20b88:	e17ffd17 	ldw	r5,-12(fp)
   20b8c:	e13ffc17 	ldw	r4,-16(fp)
   20b90:	0020de80 	call	20de8 <open>
   20b94:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   20b98:	e0bffa17 	ldw	r2,-24(fp)
   20b9c:	10002216 	blt	r2,zero,20c28 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   20ba0:	040000b4 	movhi	r16,2
   20ba4:	8405db04 	addi	r16,r16,5996
   20ba8:	e0bffa17 	ldw	r2,-24(fp)
   20bac:	01400304 	movi	r5,12
   20bb0:	1009883a 	mov	r4,r2
   20bb4:	00215940 	call	21594 <__mulsi3>
   20bb8:	8085883a 	add	r2,r16,r2
   20bbc:	10c00017 	ldw	r3,0(r2)
   20bc0:	e0bffb17 	ldw	r2,-20(fp)
   20bc4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   20bc8:	040000b4 	movhi	r16,2
   20bcc:	8405db04 	addi	r16,r16,5996
   20bd0:	e0bffa17 	ldw	r2,-24(fp)
   20bd4:	01400304 	movi	r5,12
   20bd8:	1009883a 	mov	r4,r2
   20bdc:	00215940 	call	21594 <__mulsi3>
   20be0:	8085883a 	add	r2,r16,r2
   20be4:	10800104 	addi	r2,r2,4
   20be8:	10c00017 	ldw	r3,0(r2)
   20bec:	e0bffb17 	ldw	r2,-20(fp)
   20bf0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   20bf4:	040000b4 	movhi	r16,2
   20bf8:	8405db04 	addi	r16,r16,5996
   20bfc:	e0bffa17 	ldw	r2,-24(fp)
   20c00:	01400304 	movi	r5,12
   20c04:	1009883a 	mov	r4,r2
   20c08:	00215940 	call	21594 <__mulsi3>
   20c0c:	8085883a 	add	r2,r16,r2
   20c10:	10800204 	addi	r2,r2,8
   20c14:	10c00017 	ldw	r3,0(r2)
   20c18:	e0bffb17 	ldw	r2,-20(fp)
   20c1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   20c20:	e13ffa17 	ldw	r4,-24(fp)
   20c24:	0020f440 	call	20f44 <alt_release_fd>
  }
} 
   20c28:	0001883a 	nop
   20c2c:	e6ffff04 	addi	sp,fp,-4
   20c30:	dfc00217 	ldw	ra,8(sp)
   20c34:	df000117 	ldw	fp,4(sp)
   20c38:	dc000017 	ldw	r16,0(sp)
   20c3c:	dec00304 	addi	sp,sp,12
   20c40:	f800283a 	ret

00020c44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   20c44:	defffb04 	addi	sp,sp,-20
   20c48:	dfc00415 	stw	ra,16(sp)
   20c4c:	df000315 	stw	fp,12(sp)
   20c50:	df000304 	addi	fp,sp,12
   20c54:	e13ffd15 	stw	r4,-12(fp)
   20c58:	e17ffe15 	stw	r5,-8(fp)
   20c5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   20c60:	01c07fc4 	movi	r7,511
   20c64:	01800044 	movi	r6,1
   20c68:	e17ffd17 	ldw	r5,-12(fp)
   20c6c:	010000b4 	movhi	r4,2
   20c70:	2105de04 	addi	r4,r4,6008
   20c74:	0020b600 	call	20b60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   20c78:	01c07fc4 	movi	r7,511
   20c7c:	000d883a 	mov	r6,zero
   20c80:	e17ffe17 	ldw	r5,-8(fp)
   20c84:	010000b4 	movhi	r4,2
   20c88:	2105db04 	addi	r4,r4,5996
   20c8c:	0020b600 	call	20b60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   20c90:	01c07fc4 	movi	r7,511
   20c94:	01800044 	movi	r6,1
   20c98:	e17fff17 	ldw	r5,-4(fp)
   20c9c:	010000b4 	movhi	r4,2
   20ca0:	2105e104 	addi	r4,r4,6020
   20ca4:	0020b600 	call	20b60 <alt_open_fd>
}  
   20ca8:	0001883a 	nop
   20cac:	e037883a 	mov	sp,fp
   20cb0:	dfc00117 	ldw	ra,4(sp)
   20cb4:	df000017 	ldw	fp,0(sp)
   20cb8:	dec00204 	addi	sp,sp,8
   20cbc:	f800283a 	ret

00020cc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20cc0:	defffe04 	addi	sp,sp,-8
   20cc4:	dfc00115 	stw	ra,4(sp)
   20cc8:	df000015 	stw	fp,0(sp)
   20ccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20cd0:	d0a00717 	ldw	r2,-32740(gp)
   20cd4:	10000326 	beq	r2,zero,20ce4 <alt_get_errno+0x24>
   20cd8:	d0a00717 	ldw	r2,-32740(gp)
   20cdc:	103ee83a 	callr	r2
   20ce0:	00000106 	br	20ce8 <alt_get_errno+0x28>
   20ce4:	d0a0bd04 	addi	r2,gp,-32012
}
   20ce8:	e037883a 	mov	sp,fp
   20cec:	dfc00117 	ldw	ra,4(sp)
   20cf0:	df000017 	ldw	fp,0(sp)
   20cf4:	dec00204 	addi	sp,sp,8
   20cf8:	f800283a 	ret

00020cfc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   20cfc:	defffb04 	addi	sp,sp,-20
   20d00:	dfc00415 	stw	ra,16(sp)
   20d04:	df000315 	stw	fp,12(sp)
   20d08:	dc000215 	stw	r16,8(sp)
   20d0c:	df000304 	addi	fp,sp,12
   20d10:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   20d14:	e0bffe17 	ldw	r2,-8(fp)
   20d18:	10800217 	ldw	r2,8(r2)
   20d1c:	10d00034 	orhi	r3,r2,16384
   20d20:	e0bffe17 	ldw	r2,-8(fp)
   20d24:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   20d28:	e03ffd15 	stw	zero,-12(fp)
   20d2c:	00002306 	br	20dbc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   20d30:	040000b4 	movhi	r16,2
   20d34:	8405db04 	addi	r16,r16,5996
   20d38:	e0bffd17 	ldw	r2,-12(fp)
   20d3c:	01400304 	movi	r5,12
   20d40:	1009883a 	mov	r4,r2
   20d44:	00215940 	call	21594 <__mulsi3>
   20d48:	8085883a 	add	r2,r16,r2
   20d4c:	10c00017 	ldw	r3,0(r2)
   20d50:	e0bffe17 	ldw	r2,-8(fp)
   20d54:	10800017 	ldw	r2,0(r2)
   20d58:	1880151e 	bne	r3,r2,20db0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   20d5c:	040000b4 	movhi	r16,2
   20d60:	8405db04 	addi	r16,r16,5996
   20d64:	e0bffd17 	ldw	r2,-12(fp)
   20d68:	01400304 	movi	r5,12
   20d6c:	1009883a 	mov	r4,r2
   20d70:	00215940 	call	21594 <__mulsi3>
   20d74:	8085883a 	add	r2,r16,r2
   20d78:	10800204 	addi	r2,r2,8
   20d7c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   20d80:	10000b0e 	bge	r2,zero,20db0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   20d84:	01400304 	movi	r5,12
   20d88:	e13ffd17 	ldw	r4,-12(fp)
   20d8c:	00215940 	call	21594 <__mulsi3>
   20d90:	1007883a 	mov	r3,r2
   20d94:	008000b4 	movhi	r2,2
   20d98:	1085db04 	addi	r2,r2,5996
   20d9c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   20da0:	e0bffe17 	ldw	r2,-8(fp)
   20da4:	18800226 	beq	r3,r2,20db0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   20da8:	00bffcc4 	movi	r2,-13
   20dac:	00000806 	br	20dd0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   20db0:	e0bffd17 	ldw	r2,-12(fp)
   20db4:	10800044 	addi	r2,r2,1
   20db8:	e0bffd15 	stw	r2,-12(fp)
   20dbc:	d0a00617 	ldw	r2,-32744(gp)
   20dc0:	1007883a 	mov	r3,r2
   20dc4:	e0bffd17 	ldw	r2,-12(fp)
   20dc8:	18bfd92e 	bgeu	r3,r2,20d30 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   20dcc:	0005883a 	mov	r2,zero
}
   20dd0:	e6ffff04 	addi	sp,fp,-4
   20dd4:	dfc00217 	ldw	ra,8(sp)
   20dd8:	df000117 	ldw	fp,4(sp)
   20ddc:	dc000017 	ldw	r16,0(sp)
   20de0:	dec00304 	addi	sp,sp,12
   20de4:	f800283a 	ret

00020de8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   20de8:	defff604 	addi	sp,sp,-40
   20dec:	dfc00915 	stw	ra,36(sp)
   20df0:	df000815 	stw	fp,32(sp)
   20df4:	df000804 	addi	fp,sp,32
   20df8:	e13ffd15 	stw	r4,-12(fp)
   20dfc:	e17ffe15 	stw	r5,-8(fp)
   20e00:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   20e04:	00bfffc4 	movi	r2,-1
   20e08:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   20e0c:	00bffb44 	movi	r2,-19
   20e10:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   20e14:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   20e18:	d1600404 	addi	r5,gp,-32752
   20e1c:	e13ffd17 	ldw	r4,-12(fp)
   20e20:	0020fec0 	call	20fec <alt_find_dev>
   20e24:	e0bff815 	stw	r2,-32(fp)
   20e28:	e0bff817 	ldw	r2,-32(fp)
   20e2c:	1000051e 	bne	r2,zero,20e44 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   20e30:	e13ffd17 	ldw	r4,-12(fp)
   20e34:	002107c0 	call	2107c <alt_find_file>
   20e38:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   20e3c:	00800044 	movi	r2,1
   20e40:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   20e44:	e0bff817 	ldw	r2,-32(fp)
   20e48:	10002b26 	beq	r2,zero,20ef8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   20e4c:	e13ff817 	ldw	r4,-32(fp)
   20e50:	00211840 	call	21184 <alt_get_fd>
   20e54:	e0bff915 	stw	r2,-28(fp)
   20e58:	e0bff917 	ldw	r2,-28(fp)
   20e5c:	1000030e 	bge	r2,zero,20e6c <open+0x84>
    {
      status = index;
   20e60:	e0bff917 	ldw	r2,-28(fp)
   20e64:	e0bffa15 	stw	r2,-24(fp)
   20e68:	00002506 	br	20f00 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   20e6c:	01400304 	movi	r5,12
   20e70:	e13ff917 	ldw	r4,-28(fp)
   20e74:	00215940 	call	21594 <__mulsi3>
   20e78:	1007883a 	mov	r3,r2
   20e7c:	008000b4 	movhi	r2,2
   20e80:	1085db04 	addi	r2,r2,5996
   20e84:	1885883a 	add	r2,r3,r2
   20e88:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   20e8c:	e0fffe17 	ldw	r3,-8(fp)
   20e90:	00900034 	movhi	r2,16384
   20e94:	10bfffc4 	addi	r2,r2,-1
   20e98:	1886703a 	and	r3,r3,r2
   20e9c:	e0bffc17 	ldw	r2,-16(fp)
   20ea0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   20ea4:	e0bffb17 	ldw	r2,-20(fp)
   20ea8:	1000051e 	bne	r2,zero,20ec0 <open+0xd8>
   20eac:	e13ffc17 	ldw	r4,-16(fp)
   20eb0:	0020cfc0 	call	20cfc <alt_file_locked>
   20eb4:	e0bffa15 	stw	r2,-24(fp)
   20eb8:	e0bffa17 	ldw	r2,-24(fp)
   20ebc:	10001016 	blt	r2,zero,20f00 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   20ec0:	e0bff817 	ldw	r2,-32(fp)
   20ec4:	10800317 	ldw	r2,12(r2)
   20ec8:	10000826 	beq	r2,zero,20eec <open+0x104>
   20ecc:	e0bff817 	ldw	r2,-32(fp)
   20ed0:	10800317 	ldw	r2,12(r2)
   20ed4:	e1ffff17 	ldw	r7,-4(fp)
   20ed8:	e1bffe17 	ldw	r6,-8(fp)
   20edc:	e17ffd17 	ldw	r5,-12(fp)
   20ee0:	e13ffc17 	ldw	r4,-16(fp)
   20ee4:	103ee83a 	callr	r2
   20ee8:	00000106 	br	20ef0 <open+0x108>
   20eec:	0005883a 	mov	r2,zero
   20ef0:	e0bffa15 	stw	r2,-24(fp)
   20ef4:	00000206 	br	20f00 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   20ef8:	00bffb44 	movi	r2,-19
   20efc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   20f00:	e0bffa17 	ldw	r2,-24(fp)
   20f04:	1000090e 	bge	r2,zero,20f2c <open+0x144>
  {
    alt_release_fd (index);  
   20f08:	e13ff917 	ldw	r4,-28(fp)
   20f0c:	0020f440 	call	20f44 <alt_release_fd>
    ALT_ERRNO = -status;
   20f10:	0020cc00 	call	20cc0 <alt_get_errno>
   20f14:	1007883a 	mov	r3,r2
   20f18:	e0bffa17 	ldw	r2,-24(fp)
   20f1c:	0085c83a 	sub	r2,zero,r2
   20f20:	18800015 	stw	r2,0(r3)
    return -1;
   20f24:	00bfffc4 	movi	r2,-1
   20f28:	00000106 	br	20f30 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   20f2c:	e0bff917 	ldw	r2,-28(fp)
}
   20f30:	e037883a 	mov	sp,fp
   20f34:	dfc00117 	ldw	ra,4(sp)
   20f38:	df000017 	ldw	fp,0(sp)
   20f3c:	dec00204 	addi	sp,sp,8
   20f40:	f800283a 	ret

00020f44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   20f44:	defffc04 	addi	sp,sp,-16
   20f48:	dfc00315 	stw	ra,12(sp)
   20f4c:	df000215 	stw	fp,8(sp)
   20f50:	dc000115 	stw	r16,4(sp)
   20f54:	df000204 	addi	fp,sp,8
   20f58:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   20f5c:	e0bffe17 	ldw	r2,-8(fp)
   20f60:	108000d0 	cmplti	r2,r2,3
   20f64:	1000111e 	bne	r2,zero,20fac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   20f68:	040000b4 	movhi	r16,2
   20f6c:	8405db04 	addi	r16,r16,5996
   20f70:	e0bffe17 	ldw	r2,-8(fp)
   20f74:	01400304 	movi	r5,12
   20f78:	1009883a 	mov	r4,r2
   20f7c:	00215940 	call	21594 <__mulsi3>
   20f80:	8085883a 	add	r2,r16,r2
   20f84:	10800204 	addi	r2,r2,8
   20f88:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   20f8c:	040000b4 	movhi	r16,2
   20f90:	8405db04 	addi	r16,r16,5996
   20f94:	e0bffe17 	ldw	r2,-8(fp)
   20f98:	01400304 	movi	r5,12
   20f9c:	1009883a 	mov	r4,r2
   20fa0:	00215940 	call	21594 <__mulsi3>
   20fa4:	8085883a 	add	r2,r16,r2
   20fa8:	10000015 	stw	zero,0(r2)
  }
}
   20fac:	0001883a 	nop
   20fb0:	e6ffff04 	addi	sp,fp,-4
   20fb4:	dfc00217 	ldw	ra,8(sp)
   20fb8:	df000117 	ldw	fp,4(sp)
   20fbc:	dc000017 	ldw	r16,0(sp)
   20fc0:	dec00304 	addi	sp,sp,12
   20fc4:	f800283a 	ret

00020fc8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   20fc8:	deffff04 	addi	sp,sp,-4
   20fcc:	df000015 	stw	fp,0(sp)
   20fd0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   20fd4:	000170fa 	wrctl	ienable,zero
}
   20fd8:	0001883a 	nop
   20fdc:	e037883a 	mov	sp,fp
   20fe0:	df000017 	ldw	fp,0(sp)
   20fe4:	dec00104 	addi	sp,sp,4
   20fe8:	f800283a 	ret

00020fec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   20fec:	defffa04 	addi	sp,sp,-24
   20ff0:	dfc00515 	stw	ra,20(sp)
   20ff4:	df000415 	stw	fp,16(sp)
   20ff8:	df000404 	addi	fp,sp,16
   20ffc:	e13ffe15 	stw	r4,-8(fp)
   21000:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   21004:	e0bfff17 	ldw	r2,-4(fp)
   21008:	10800017 	ldw	r2,0(r2)
   2100c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   21010:	e13ffe17 	ldw	r4,-8(fp)
   21014:	002013c0 	call	2013c <strlen>
   21018:	10800044 	addi	r2,r2,1
   2101c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21020:	00000d06 	br	21058 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   21024:	e0bffc17 	ldw	r2,-16(fp)
   21028:	10800217 	ldw	r2,8(r2)
   2102c:	e0fffd17 	ldw	r3,-12(fp)
   21030:	180d883a 	mov	r6,r3
   21034:	e17ffe17 	ldw	r5,-8(fp)
   21038:	1009883a 	mov	r4,r2
   2103c:	002127c0 	call	2127c <memcmp>
   21040:	1000021e 	bne	r2,zero,2104c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   21044:	e0bffc17 	ldw	r2,-16(fp)
   21048:	00000706 	br	21068 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2104c:	e0bffc17 	ldw	r2,-16(fp)
   21050:	10800017 	ldw	r2,0(r2)
   21054:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21058:	e0fffc17 	ldw	r3,-16(fp)
   2105c:	e0bfff17 	ldw	r2,-4(fp)
   21060:	18bff01e 	bne	r3,r2,21024 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   21064:	0005883a 	mov	r2,zero
}
   21068:	e037883a 	mov	sp,fp
   2106c:	dfc00117 	ldw	ra,4(sp)
   21070:	df000017 	ldw	fp,0(sp)
   21074:	dec00204 	addi	sp,sp,8
   21078:	f800283a 	ret

0002107c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2107c:	defffb04 	addi	sp,sp,-20
   21080:	dfc00415 	stw	ra,16(sp)
   21084:	df000315 	stw	fp,12(sp)
   21088:	df000304 	addi	fp,sp,12
   2108c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   21090:	d0a00217 	ldw	r2,-32760(gp)
   21094:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   21098:	00003106 	br	21160 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2109c:	e0bffd17 	ldw	r2,-12(fp)
   210a0:	10800217 	ldw	r2,8(r2)
   210a4:	1009883a 	mov	r4,r2
   210a8:	002013c0 	call	2013c <strlen>
   210ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   210b0:	e0bffd17 	ldw	r2,-12(fp)
   210b4:	10c00217 	ldw	r3,8(r2)
   210b8:	e0bffe17 	ldw	r2,-8(fp)
   210bc:	10bfffc4 	addi	r2,r2,-1
   210c0:	1885883a 	add	r2,r3,r2
   210c4:	10800003 	ldbu	r2,0(r2)
   210c8:	10803fcc 	andi	r2,r2,255
   210cc:	1080201c 	xori	r2,r2,128
   210d0:	10bfe004 	addi	r2,r2,-128
   210d4:	10800bd8 	cmpnei	r2,r2,47
   210d8:	1000031e 	bne	r2,zero,210e8 <alt_find_file+0x6c>
    {
      len -= 1;
   210dc:	e0bffe17 	ldw	r2,-8(fp)
   210e0:	10bfffc4 	addi	r2,r2,-1
   210e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   210e8:	e0bffe17 	ldw	r2,-8(fp)
   210ec:	e0ffff17 	ldw	r3,-4(fp)
   210f0:	1885883a 	add	r2,r3,r2
   210f4:	10800003 	ldbu	r2,0(r2)
   210f8:	10803fcc 	andi	r2,r2,255
   210fc:	1080201c 	xori	r2,r2,128
   21100:	10bfe004 	addi	r2,r2,-128
   21104:	10800be0 	cmpeqi	r2,r2,47
   21108:	1000081e 	bne	r2,zero,2112c <alt_find_file+0xb0>
   2110c:	e0bffe17 	ldw	r2,-8(fp)
   21110:	e0ffff17 	ldw	r3,-4(fp)
   21114:	1885883a 	add	r2,r3,r2
   21118:	10800003 	ldbu	r2,0(r2)
   2111c:	10803fcc 	andi	r2,r2,255
   21120:	1080201c 	xori	r2,r2,128
   21124:	10bfe004 	addi	r2,r2,-128
   21128:	10000a1e 	bne	r2,zero,21154 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2112c:	e0bffd17 	ldw	r2,-12(fp)
   21130:	10800217 	ldw	r2,8(r2)
   21134:	e0fffe17 	ldw	r3,-8(fp)
   21138:	180d883a 	mov	r6,r3
   2113c:	e17fff17 	ldw	r5,-4(fp)
   21140:	1009883a 	mov	r4,r2
   21144:	002127c0 	call	2127c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   21148:	1000021e 	bne	r2,zero,21154 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2114c:	e0bffd17 	ldw	r2,-12(fp)
   21150:	00000706 	br	21170 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   21154:	e0bffd17 	ldw	r2,-12(fp)
   21158:	10800017 	ldw	r2,0(r2)
   2115c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   21160:	e0fffd17 	ldw	r3,-12(fp)
   21164:	d0a00204 	addi	r2,gp,-32760
   21168:	18bfcc1e 	bne	r3,r2,2109c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2116c:	0005883a 	mov	r2,zero
}
   21170:	e037883a 	mov	sp,fp
   21174:	dfc00117 	ldw	ra,4(sp)
   21178:	df000017 	ldw	fp,0(sp)
   2117c:	dec00204 	addi	sp,sp,8
   21180:	f800283a 	ret

00021184 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   21184:	defffa04 	addi	sp,sp,-24
   21188:	dfc00515 	stw	ra,20(sp)
   2118c:	df000415 	stw	fp,16(sp)
   21190:	dc000315 	stw	r16,12(sp)
   21194:	df000404 	addi	fp,sp,16
   21198:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   2119c:	00bffa04 	movi	r2,-24
   211a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   211a4:	e03ffc15 	stw	zero,-16(fp)
   211a8:	00001d06 	br	21220 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   211ac:	040000b4 	movhi	r16,2
   211b0:	8405db04 	addi	r16,r16,5996
   211b4:	e0bffc17 	ldw	r2,-16(fp)
   211b8:	01400304 	movi	r5,12
   211bc:	1009883a 	mov	r4,r2
   211c0:	00215940 	call	21594 <__mulsi3>
   211c4:	8085883a 	add	r2,r16,r2
   211c8:	10800017 	ldw	r2,0(r2)
   211cc:	1000111e 	bne	r2,zero,21214 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   211d0:	040000b4 	movhi	r16,2
   211d4:	8405db04 	addi	r16,r16,5996
   211d8:	e0bffc17 	ldw	r2,-16(fp)
   211dc:	01400304 	movi	r5,12
   211e0:	1009883a 	mov	r4,r2
   211e4:	00215940 	call	21594 <__mulsi3>
   211e8:	8085883a 	add	r2,r16,r2
   211ec:	e0fffe17 	ldw	r3,-8(fp)
   211f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   211f4:	d0e00617 	ldw	r3,-32744(gp)
   211f8:	e0bffc17 	ldw	r2,-16(fp)
   211fc:	1880020e 	bge	r3,r2,21208 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   21200:	e0bffc17 	ldw	r2,-16(fp)
   21204:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   21208:	e0bffc17 	ldw	r2,-16(fp)
   2120c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   21210:	00000606 	br	2122c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   21214:	e0bffc17 	ldw	r2,-16(fp)
   21218:	10800044 	addi	r2,r2,1
   2121c:	e0bffc15 	stw	r2,-16(fp)
   21220:	e0bffc17 	ldw	r2,-16(fp)
   21224:	10800810 	cmplti	r2,r2,32
   21228:	103fe01e 	bne	r2,zero,211ac <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2122c:	e0bffd17 	ldw	r2,-12(fp)
}
   21230:	e6ffff04 	addi	sp,fp,-4
   21234:	dfc00217 	ldw	ra,8(sp)
   21238:	df000117 	ldw	fp,4(sp)
   2123c:	dc000017 	ldw	r16,0(sp)
   21240:	dec00304 	addi	sp,sp,12
   21244:	f800283a 	ret

00021248 <atexit>:
   21248:	200b883a 	mov	r5,r4
   2124c:	000f883a 	mov	r7,zero
   21250:	000d883a 	mov	r6,zero
   21254:	0009883a 	mov	r4,zero
   21258:	00212ac1 	jmpi	212ac <__register_exitproc>

0002125c <exit>:
   2125c:	defffe04 	addi	sp,sp,-8
   21260:	000b883a 	mov	r5,zero
   21264:	dc000015 	stw	r16,0(sp)
   21268:	dfc00115 	stw	ra,4(sp)
   2126c:	2021883a 	mov	r16,r4
   21270:	00214040 	call	21404 <__call_exitprocs>
   21274:	8009883a 	mov	r4,r16
   21278:	00215bc0 	call	215bc <_exit>

0002127c <memcmp>:
   2127c:	218d883a 	add	r6,r4,r6
   21280:	21800826 	beq	r4,r6,212a4 <memcmp+0x28>
   21284:	20800003 	ldbu	r2,0(r4)
   21288:	28c00003 	ldbu	r3,0(r5)
   2128c:	10c00226 	beq	r2,r3,21298 <memcmp+0x1c>
   21290:	10c5c83a 	sub	r2,r2,r3
   21294:	f800283a 	ret
   21298:	21000044 	addi	r4,r4,1
   2129c:	29400044 	addi	r5,r5,1
   212a0:	003ff706 	br	21280 <memcmp+0x4>
   212a4:	0005883a 	mov	r2,zero
   212a8:	f800283a 	ret

000212ac <__register_exitproc>:
   212ac:	008000b4 	movhi	r2,2
   212b0:	10863b04 	addi	r2,r2,6380
   212b4:	10c00017 	ldw	r3,0(r2)
   212b8:	defff904 	addi	sp,sp,-28
   212bc:	dc000015 	stw	r16,0(sp)
   212c0:	1c000c17 	ldw	r16,48(r3)
   212c4:	dd400515 	stw	r21,20(sp)
   212c8:	dd000415 	stw	r20,16(sp)
   212cc:	dcc00315 	stw	r19,12(sp)
   212d0:	dc800215 	stw	r18,8(sp)
   212d4:	dc400115 	stw	r17,4(sp)
   212d8:	dfc00615 	stw	ra,24(sp)
   212dc:	202b883a 	mov	r21,r4
   212e0:	2823883a 	mov	r17,r5
   212e4:	3027883a 	mov	r19,r6
   212e8:	3825883a 	mov	r18,r7
   212ec:	1029883a 	mov	r20,r2
   212f0:	8000021e 	bne	r16,zero,212fc <__register_exitproc+0x50>
   212f4:	1c000d04 	addi	r16,r3,52
   212f8:	1c000c15 	stw	r16,48(r3)
   212fc:	80800117 	ldw	r2,4(r16)
   21300:	00c007c4 	movi	r3,31
   21304:	1880110e 	bge	r3,r2,2134c <__register_exitproc+0xa0>
   21308:	00800034 	movhi	r2,0
   2130c:	10800004 	addi	r2,r2,0
   21310:	1000021e 	bne	r2,zero,2131c <__register_exitproc+0x70>
   21314:	00bfffc4 	movi	r2,-1
   21318:	00003106 	br	213e0 <__register_exitproc+0x134>
   2131c:	01002304 	movi	r4,140
   21320:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   21324:	1021883a 	mov	r16,r2
   21328:	103ffa26 	beq	r2,zero,21314 <__register_exitproc+0x68>
   2132c:	10000115 	stw	zero,4(r2)
   21330:	a0800017 	ldw	r2,0(r20)
   21334:	10c00c17 	ldw	r3,48(r2)
   21338:	80c00015 	stw	r3,0(r16)
   2133c:	14000c15 	stw	r16,48(r2)
   21340:	80002215 	stw	zero,136(r16)
   21344:	a8001d26 	beq	r21,zero,213bc <__register_exitproc+0x110>
   21348:	00000606 	br	21364 <__register_exitproc+0xb8>
   2134c:	a8001b26 	beq	r21,zero,213bc <__register_exitproc+0x110>
   21350:	80802217 	ldw	r2,136(r16)
   21354:	1000091e 	bne	r2,zero,2137c <__register_exitproc+0xd0>
   21358:	00800034 	movhi	r2,0
   2135c:	10800004 	addi	r2,r2,0
   21360:	103fec26 	beq	r2,zero,21314 <__register_exitproc+0x68>
   21364:	01004204 	movi	r4,264
   21368:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2136c:	103fe926 	beq	r2,zero,21314 <__register_exitproc+0x68>
   21370:	10004015 	stw	zero,256(r2)
   21374:	10004115 	stw	zero,260(r2)
   21378:	80802215 	stw	r2,136(r16)
   2137c:	81400117 	ldw	r5,4(r16)
   21380:	01000044 	movi	r4,1
   21384:	2947883a 	add	r3,r5,r5
   21388:	18c7883a 	add	r3,r3,r3
   2138c:	10c7883a 	add	r3,r2,r3
   21390:	1cc00015 	stw	r19,0(r3)
   21394:	2148983a 	sll	r4,r4,r5
   21398:	11404017 	ldw	r5,256(r2)
   2139c:	290ab03a 	or	r5,r5,r4
   213a0:	11404015 	stw	r5,256(r2)
   213a4:	1c802015 	stw	r18,128(r3)
   213a8:	00c00084 	movi	r3,2
   213ac:	a8c0031e 	bne	r21,r3,213bc <__register_exitproc+0x110>
   213b0:	10c04117 	ldw	r3,260(r2)
   213b4:	1908b03a 	or	r4,r3,r4
   213b8:	11004115 	stw	r4,260(r2)
   213bc:	80800117 	ldw	r2,4(r16)
   213c0:	10c00044 	addi	r3,r2,1
   213c4:	10800084 	addi	r2,r2,2
   213c8:	1085883a 	add	r2,r2,r2
   213cc:	1085883a 	add	r2,r2,r2
   213d0:	80c00115 	stw	r3,4(r16)
   213d4:	80a1883a 	add	r16,r16,r2
   213d8:	84400015 	stw	r17,0(r16)
   213dc:	0005883a 	mov	r2,zero
   213e0:	dfc00617 	ldw	ra,24(sp)
   213e4:	dd400517 	ldw	r21,20(sp)
   213e8:	dd000417 	ldw	r20,16(sp)
   213ec:	dcc00317 	ldw	r19,12(sp)
   213f0:	dc800217 	ldw	r18,8(sp)
   213f4:	dc400117 	ldw	r17,4(sp)
   213f8:	dc000017 	ldw	r16,0(sp)
   213fc:	dec00704 	addi	sp,sp,28
   21400:	f800283a 	ret

00021404 <__call_exitprocs>:
   21404:	defff504 	addi	sp,sp,-44
   21408:	dd000515 	stw	r20,20(sp)
   2140c:	050000b4 	movhi	r20,2
   21410:	dc800315 	stw	r18,12(sp)
   21414:	dfc00a15 	stw	ra,40(sp)
   21418:	df000915 	stw	fp,36(sp)
   2141c:	ddc00815 	stw	r23,32(sp)
   21420:	dd800715 	stw	r22,28(sp)
   21424:	dd400615 	stw	r21,24(sp)
   21428:	dcc00415 	stw	r19,16(sp)
   2142c:	dc400215 	stw	r17,8(sp)
   21430:	dc000115 	stw	r16,4(sp)
   21434:	d9000015 	stw	r4,0(sp)
   21438:	2825883a 	mov	r18,r5
   2143c:	a5063b04 	addi	r20,r20,6380
   21440:	a4400017 	ldw	r17,0(r20)
   21444:	8cc00c17 	ldw	r19,48(r17)
   21448:	8c400c04 	addi	r17,r17,48
   2144c:	98004526 	beq	r19,zero,21564 <__call_exitprocs+0x160>
   21450:	9c000117 	ldw	r16,4(r19)
   21454:	00900034 	movhi	r2,16384
   21458:	10bfffc4 	addi	r2,r2,-1
   2145c:	9d402217 	ldw	r21,136(r19)
   21460:	85bfffc4 	addi	r22,r16,-1
   21464:	80a1883a 	add	r16,r16,r2
   21468:	8421883a 	add	r16,r16,r16
   2146c:	8421883a 	add	r16,r16,r16
   21470:	ac2f883a 	add	r23,r21,r16
   21474:	84000204 	addi	r16,r16,8
   21478:	9c21883a 	add	r16,r19,r16
   2147c:	b0002716 	blt	r22,zero,2151c <__call_exitprocs+0x118>
   21480:	90000726 	beq	r18,zero,214a0 <__call_exitprocs+0x9c>
   21484:	a800041e 	bne	r21,zero,21498 <__call_exitprocs+0x94>
   21488:	b5bfffc4 	addi	r22,r22,-1
   2148c:	bdffff04 	addi	r23,r23,-4
   21490:	843fff04 	addi	r16,r16,-4
   21494:	003ff906 	br	2147c <__call_exitprocs+0x78>
   21498:	b9002017 	ldw	r4,128(r23)
   2149c:	913ffa1e 	bne	r18,r4,21488 <__call_exitprocs+0x84>
   214a0:	99000117 	ldw	r4,4(r19)
   214a4:	82000017 	ldw	r8,0(r16)
   214a8:	213fffc4 	addi	r4,r4,-1
   214ac:	b100021e 	bne	r22,r4,214b8 <__call_exitprocs+0xb4>
   214b0:	9d800115 	stw	r22,4(r19)
   214b4:	00000106 	br	214bc <__call_exitprocs+0xb8>
   214b8:	80000015 	stw	zero,0(r16)
   214bc:	403ff226 	beq	r8,zero,21488 <__call_exitprocs+0x84>
   214c0:	9f000117 	ldw	fp,4(r19)
   214c4:	a8000526 	beq	r21,zero,214dc <__call_exitprocs+0xd8>
   214c8:	00800044 	movi	r2,1
   214cc:	1592983a 	sll	r9,r2,r22
   214d0:	a9404017 	ldw	r5,256(r21)
   214d4:	494a703a 	and	r5,r9,r5
   214d8:	2800021e 	bne	r5,zero,214e4 <__call_exitprocs+0xe0>
   214dc:	403ee83a 	callr	r8
   214e0:	00000906 	br	21508 <__call_exitprocs+0x104>
   214e4:	a9004117 	ldw	r4,260(r21)
   214e8:	4908703a 	and	r4,r9,r4
   214ec:	2000041e 	bne	r4,zero,21500 <__call_exitprocs+0xfc>
   214f0:	b9400017 	ldw	r5,0(r23)
   214f4:	d9000017 	ldw	r4,0(sp)
   214f8:	403ee83a 	callr	r8
   214fc:	00000206 	br	21508 <__call_exitprocs+0x104>
   21500:	b9000017 	ldw	r4,0(r23)
   21504:	403ee83a 	callr	r8
   21508:	99000117 	ldw	r4,4(r19)
   2150c:	e13fcc1e 	bne	fp,r4,21440 <__call_exitprocs+0x3c>
   21510:	89000017 	ldw	r4,0(r17)
   21514:	993fdc26 	beq	r19,r4,21488 <__call_exitprocs+0x84>
   21518:	003fc906 	br	21440 <__call_exitprocs+0x3c>
   2151c:	00800034 	movhi	r2,0
   21520:	10800004 	addi	r2,r2,0
   21524:	10000f26 	beq	r2,zero,21564 <__call_exitprocs+0x160>
   21528:	99400117 	ldw	r5,4(r19)
   2152c:	99000017 	ldw	r4,0(r19)
   21530:	2800091e 	bne	r5,zero,21558 <__call_exitprocs+0x154>
   21534:	20000826 	beq	r4,zero,21558 <__call_exitprocs+0x154>
   21538:	89000015 	stw	r4,0(r17)
   2153c:	a8000226 	beq	r21,zero,21548 <__call_exitprocs+0x144>
   21540:	a809883a 	mov	r4,r21
   21544:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   21548:	9809883a 	mov	r4,r19
   2154c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   21550:	8cc00017 	ldw	r19,0(r17)
   21554:	003fbd06 	br	2144c <__call_exitprocs+0x48>
   21558:	9823883a 	mov	r17,r19
   2155c:	2027883a 	mov	r19,r4
   21560:	003fba06 	br	2144c <__call_exitprocs+0x48>
   21564:	dfc00a17 	ldw	ra,40(sp)
   21568:	df000917 	ldw	fp,36(sp)
   2156c:	ddc00817 	ldw	r23,32(sp)
   21570:	dd800717 	ldw	r22,28(sp)
   21574:	dd400617 	ldw	r21,24(sp)
   21578:	dd000517 	ldw	r20,20(sp)
   2157c:	dcc00417 	ldw	r19,16(sp)
   21580:	dc800317 	ldw	r18,12(sp)
   21584:	dc400217 	ldw	r17,8(sp)
   21588:	dc000117 	ldw	r16,4(sp)
   2158c:	dec00b04 	addi	sp,sp,44
   21590:	f800283a 	ret

00021594 <__mulsi3>:
   21594:	0005883a 	mov	r2,zero
   21598:	20000726 	beq	r4,zero,215b8 <__mulsi3+0x24>
   2159c:	20c0004c 	andi	r3,r4,1
   215a0:	2008d07a 	srli	r4,r4,1
   215a4:	18000126 	beq	r3,zero,215ac <__mulsi3+0x18>
   215a8:	1145883a 	add	r2,r2,r5
   215ac:	294b883a 	add	r5,r5,r5
   215b0:	203ffa1e 	bne	r4,zero,2159c <__mulsi3+0x8>
   215b4:	f800283a 	ret
   215b8:	f800283a 	ret

000215bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   215bc:	defffd04 	addi	sp,sp,-12
   215c0:	df000215 	stw	fp,8(sp)
   215c4:	df000204 	addi	fp,sp,8
   215c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   215cc:	0001883a 	nop
   215d0:	e0bfff17 	ldw	r2,-4(fp)
   215d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   215d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   215dc:	10000226 	beq	r2,zero,215e8 <_exit+0x2c>
    ALT_SIM_FAIL();
   215e0:	002af070 	cmpltui	zero,zero,43969
   215e4:	00000106 	br	215ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   215e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   215ec:	003fff06 	br	215ec <_exit+0x30>
