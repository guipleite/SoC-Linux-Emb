
niosEntrega.elf:     file format elf32-littlenios2
niosEntrega.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000017cc memsz 0x000017cc flags r-x
    LOAD off    0x000027ec vaddr 0x000217ec paddr 0x00021e04 align 2**12
         filesz 0x00000618 memsz 0x00000618 flags rw-
    LOAD off    0x0000341c vaddr 0x0002241c paddr 0x0002241c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00002e04  2**0
                  CONTENTS
  2 .text         00001794  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  000217b4  000217b4  000027b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000618  000217ec  00021e04  000027ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0002241c  0002241c  0000341c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0002242c  0002242c  00002e04  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000470  00000000  00000000  00002e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005ce8  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e15  00000000  00000000  00008f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002040  00000000  00000000  0000ad95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000820  00000000  00000000  0000cdd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001395  00000000  00000000  0000d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a6b  00000000  00000000  0000e98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000f3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000118  00000000  00000000  0000f438  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00010ade  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00010ae1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00010aed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00010aee  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00010aef  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00010afa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00010b05  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00010b10  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  00010b18  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e8b  00000000  00000000  00010b36  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f18b  00000000  00000000  000159c1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
000217b4 l    d  .rodata	00000000 .rodata
000217ec l    d  .rwdata	00000000 .rwdata
0002241c l    d  .bss	00000000 .bss
0002242c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosEntrega_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000201d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002036c l     F .text	00000034 alt_dev_reg
000217ec l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000207a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000208d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00020904 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00020ac4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00020c24 l     F .text	0000003c alt_get_errno
00020c60 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000219c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000202c0 g     F .text	0000007c alt_main
00021e04 g       *ABS*	00000000 __flash_rwdata_start
00020f2c g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022428 g     O .bss	00000004 errno
00022420 g     O .bss	00000004 alt_argv
00029de4 g       *ABS*	00000000 _gp
0002033c g     F .text	00000030 usleep
00021840 g     O .rwdata	00000180 alt_fd_list
00020f50 g     F .text	00000090 alt_find_dev
00020ba8 g     F .text	0000007c alt_io_redirect
000217b4 g       *ABS*	00000000 __DTOR_END__
000204cc g     F .text	000000ec altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002169c g     F .text	00000064 .hidden __udivsi3
00021df4 g     O .rwdata	00000004 alt_max_fd
00021dfc g     O .rwdata	00000004 _global_impure_ptr
0002242c g       *ABS*	00000000 __bss_end
00021818 g     O .rwdata	00000028 alt_dev_null
000208b8 g     F .text	00000020 alt_dcache_flush_all
00021e04 g       *ABS*	00000000 __ram_rwdata_end
00021dec g     O .rwdata	00000008 alt_dev_list
000217ec g       *ABS*	00000000 __ram_rodata_end
00021700 g     F .text	00000058 .hidden __umodsi3
0002242c g       *ABS*	00000000 end
000217b4 g       *ABS*	00000000 __CTOR_LIST__
0003d4c0 g       *ABS*	00000000 __alt_stack_pointer
000205b8 g     F .text	00000094 altera_avalon_jtag_uart_write
00021424 g     F .text	00000180 __call_exitprocs
00020020 g     F .text	0000003c _start
000203d8 g     F .text	00000034 alt_sys_init
0002130c g     F .text	00000118 __register_exitproc
00021758 g     F .text	00000028 .hidden __mulsi3
000217ec g       *ABS*	00000000 __ram_rwdata_start
000217b4 g       *ABS*	00000000 __ram_rodata_start
0002040c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000210e8 g     F .text	000000c4 alt_get_fd
0002064c g     F .text	00000158 alt_busy_sleep
000211f8 g     F .text	0000007c memcmp
0002242c g       *ABS*	00000000 __alt_stack_base
00020fe0 g     F .text	00000108 alt_find_file
00020940 g     F .text	000000a4 alt_dev_llist_insert
0002241c g       *ABS*	00000000 __bss_start
000200a0 g     F .text	00000134 main
00022424 g     O .bss	00000004 alt_envp
0002046c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00021df8 g     O .rwdata	00000004 alt_errno
000215a4 g     F .text	00000084 .hidden __divsi3
000217b4 g       *ABS*	00000000 __CTOR_END__
000217b4 g       *ABS*	00000000 __flash_rodata_start
000217b4 g       *ABS*	00000000 __DTOR_LIST__
0002005c g     F .text	00000044 delay
000203a0 g     F .text	00000038 alt_irq_init
00020ea8 g     F .text	00000084 alt_release_fd
000211ac g     F .text	00000014 atexit
00021e00 g     O .rwdata	00000004 _impure_ptr
0002241c g     O .bss	00000004 alt_argc
00020a44 g     F .text	00000060 _do_dtors
00021de4 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021e04 g       *ABS*	00000000 _edata
0002242c g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
000211c0 g     F .text	00000038 exit
00021628 g     F .text	00000074 .hidden __modsi3
0003d4c0 g       *ABS*	00000000 __alt_data_end
00021780 g     F .text	00000034 _exit
00021274 g     F .text	00000098 strlen
00020d4c g     F .text	0000015c open
00020aa4 g     F .text	00000020 alt_icache_flush_all
000209e4 g     F .text	00000060 _do_ctors
000207e0 g     F .text	000000d8 close
0002023c g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a77914 	ori	gp,gp,40420
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	10890714 	ori	r2,r2,9244

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c90b14 	ori	r3,r3,9260

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	002023c0 	call	2023c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00202c00 	call	202c0 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <alt_after_alt_main>

0002005c <delay>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
   2005c:	defffd04 	addi	sp,sp,-12
   20060:	df000215 	stw	fp,8(sp)
   20064:	df000204 	addi	fp,sp,8
   20068:	e13fff15 	stw	r4,-4(fp)
      unsigned int delay = 0 ;
   2006c:	e03ffe15 	stw	zero,-8(fp)
      while(delay < n){
   20070:	00000306 	br	20080 <delay+0x24>
          delay++;
   20074:	e0bffe17 	ldw	r2,-8(fp)
   20078:	10800044 	addi	r2,r2,1
   2007c:	e0bffe15 	stw	r2,-8(fp)
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
      unsigned int delay = 0 ;
      while(delay < n){
   20080:	e0bfff17 	ldw	r2,-4(fp)
   20084:	e0fffe17 	ldw	r3,-8(fp)
   20088:	18bffa36 	bltu	r3,r2,20074 <delay+0x18>
          delay++;
      }
}
   2008c:	0001883a 	nop
   20090:	e037883a 	mov	sp,fp
   20094:	df000017 	ldw	fp,0(sp)
   20098:	dec00104 	addi	sp,sp,4
   2009c:	f800283a 	ret

000200a0 <main>:

int main(void){
   200a0:	defffc04 	addi	sp,sp,-16
   200a4:	dfc00315 	stw	ra,12(sp)
   200a8:	df000215 	stw	fp,8(sp)
   200ac:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   200b0:	e03ffe15 	stw	zero,-8(fp)
  int vel;


  while(1){

	  if ((IORD_32DIRECT(PIO_SWITCHES_BASE,0) & 0x01) && !(IORD_32DIRECT(PIO_SWITCHES_BASE,0) & 0x02)){
   200b4:	00800134 	movhi	r2,4
   200b8:	10840004 	addi	r2,r2,4096
   200bc:	10800037 	ldwio	r2,0(r2)
   200c0:	1080004c 	andi	r2,r2,1
   200c4:	10000826 	beq	r2,zero,200e8 <main+0x48>
   200c8:	00800134 	movhi	r2,4
   200cc:	10840004 	addi	r2,r2,4096
   200d0:	10800037 	ldwio	r2,0(r2)
   200d4:	1080008c 	andi	r2,r2,2
   200d8:	1000031e 	bne	r2,zero,200e8 <main+0x48>
		  vel = 50000;
   200dc:	00b0d414 	movui	r2,50000
   200e0:	e0bfff15 	stw	r2,-4(fp)
   200e4:	00001806 	br	20148 <main+0xa8>
	  }
	  else if (!(IORD_32DIRECT(PIO_SWITCHES_BASE,0) & 0x01) && (IORD_32DIRECT(PIO_SWITCHES_BASE,0) & 0x02)){
   200e8:	00800134 	movhi	r2,4
   200ec:	10840004 	addi	r2,r2,4096
   200f0:	10800037 	ldwio	r2,0(r2)
   200f4:	1080004c 	andi	r2,r2,1
   200f8:	1000091e 	bne	r2,zero,20120 <main+0x80>
   200fc:	00800134 	movhi	r2,4
   20100:	10840004 	addi	r2,r2,4096
   20104:	10800037 	ldwio	r2,0(r2)
   20108:	1080008c 	andi	r2,r2,2
   2010c:	10000426 	beq	r2,zero,20120 <main+0x80>
		  vel = 100000;
   20110:	008000b4 	movhi	r2,2
   20114:	10a1a804 	addi	r2,r2,-31072
   20118:	e0bfff15 	stw	r2,-4(fp)
   2011c:	00000a06 	br	20148 <main+0xa8>
	  }
	  else if (IORD_32DIRECT(PIO_SWITCHES_BASE,0) & 0x03){
   20120:	00800134 	movhi	r2,4
   20124:	10840004 	addi	r2,r2,4096
   20128:	10800037 	ldwio	r2,0(r2)
   2012c:	108000cc 	andi	r2,r2,3
   20130:	10000326 	beq	r2,zero,20140 <main+0xa0>
		  vel = 5000;
   20134:	0084e204 	movi	r2,5000
   20138:	e0bfff15 	stw	r2,-4(fp)
   2013c:	00000206 	br	20148 <main+0xa8>
	  }
	  else{
		  vel = 3000;
   20140:	0082ee04 	movi	r2,3000
   20144:	e0bfff15 	stw	r2,-4(fp)
	  }


	  if (IORD_32DIRECT(PIO_SWITCHES_BASE,0) & 0x08){
   20148:	00800134 	movhi	r2,4
   2014c:	10840004 	addi	r2,r2,4096
   20150:	10800037 	ldwio	r2,0(r2)
   20154:	1080020c 	andi	r2,r2,8
   20158:	103fd626 	beq	r2,zero,200b4 <main+0x14>

			  if (led <= 3){
   2015c:	e0bffe17 	ldw	r2,-8(fp)
   20160:	10800128 	cmpgeui	r2,r2,4
   20164:	1000191e 	bne	r2,zero,201cc <main+0x12c>
				  if(IORD_32DIRECT(PIO_SWITCHES_BASE,0) & 0x04){
   20168:	00800134 	movhi	r2,4
   2016c:	10840004 	addi	r2,r2,4096
   20170:	10800037 	ldwio	r2,0(r2)
   20174:	1080010c 	andi	r2,r2,4
   20178:	10000926 	beq	r2,zero,201a0 <main+0x100>
					  IOWR_32DIRECT(PIO_MOTOR_BASE, 0, 0x08 >> led++);
   2017c:	e0bffe17 	ldw	r2,-8(fp)
   20180:	10c00044 	addi	r3,r2,1
   20184:	e0fffe15 	stw	r3,-8(fp)
   20188:	00c00204 	movi	r3,8
   2018c:	1887d83a 	sra	r3,r3,r2
   20190:	00800134 	movhi	r2,4
   20194:	10840404 	addi	r2,r2,4112
   20198:	10c00035 	stwio	r3,0(r2)
   2019c:	00000806 	br	201c0 <main+0x120>

				  }
				  else{
					  IOWR_32DIRECT(PIO_MOTOR_BASE, 0, 0x01 << led++);
   201a0:	e0bffe17 	ldw	r2,-8(fp)
   201a4:	10c00044 	addi	r3,r2,1
   201a8:	e0fffe15 	stw	r3,-8(fp)
   201ac:	00c00044 	movi	r3,1
   201b0:	1886983a 	sll	r3,r3,r2
   201b4:	00800134 	movhi	r2,4
   201b8:	10840404 	addi	r2,r2,4112
   201bc:	10c00035 	stwio	r3,0(r2)

				  }
				  usleep(vel);
   201c0:	e13fff17 	ldw	r4,-4(fp)
   201c4:	002033c0 	call	2033c <usleep>
   201c8:	003fba06 	br	200b4 <main+0x14>
			  }
			  else{
				  led = 0;
   201cc:	e03ffe15 	stw	zero,-8(fp)
			  }
	  }
  };
   201d0:	003fb806 	br	200b4 <main+0x14>

000201d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   201d4:	defffc04 	addi	sp,sp,-16
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13ffd15 	stw	r4,-12(fp)
   201e4:	e17ffe15 	stw	r5,-8(fp)
   201e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   201ec:	e0fffe17 	ldw	r3,-8(fp)
   201f0:	e0bffd17 	ldw	r2,-12(fp)
   201f4:	18800c26 	beq	r3,r2,20228 <alt_load_section+0x54>
  {
    while( to != end )
   201f8:	00000806 	br	2021c <alt_load_section+0x48>
    {
      *to++ = *from++;
   201fc:	e0bffe17 	ldw	r2,-8(fp)
   20200:	10c00104 	addi	r3,r2,4
   20204:	e0fffe15 	stw	r3,-8(fp)
   20208:	e0fffd17 	ldw	r3,-12(fp)
   2020c:	19000104 	addi	r4,r3,4
   20210:	e13ffd15 	stw	r4,-12(fp)
   20214:	18c00017 	ldw	r3,0(r3)
   20218:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2021c:	e0fffe17 	ldw	r3,-8(fp)
   20220:	e0bfff17 	ldw	r2,-4(fp)
   20224:	18bff51e 	bne	r3,r2,201fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   20228:	0001883a 	nop
   2022c:	e037883a 	mov	sp,fp
   20230:	df000017 	ldw	fp,0(sp)
   20234:	dec00104 	addi	sp,sp,4
   20238:	f800283a 	ret

0002023c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2023c:	defffe04 	addi	sp,sp,-8
   20240:	dfc00115 	stw	ra,4(sp)
   20244:	df000015 	stw	fp,0(sp)
   20248:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2024c:	018000b4 	movhi	r6,2
   20250:	31878104 	addi	r6,r6,7684
   20254:	014000b4 	movhi	r5,2
   20258:	2945fb04 	addi	r5,r5,6124
   2025c:	010000b4 	movhi	r4,2
   20260:	21078104 	addi	r4,r4,7684
   20264:	00201d40 	call	201d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   20268:	018000b4 	movhi	r6,2
   2026c:	31800804 	addi	r6,r6,32
   20270:	014000b4 	movhi	r5,2
   20274:	29400804 	addi	r5,r5,32
   20278:	010000b4 	movhi	r4,2
   2027c:	21000804 	addi	r4,r4,32
   20280:	00201d40 	call	201d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20284:	018000b4 	movhi	r6,2
   20288:	3185fb04 	addi	r6,r6,6124
   2028c:	014000b4 	movhi	r5,2
   20290:	2945ed04 	addi	r5,r5,6068
   20294:	010000b4 	movhi	r4,2
   20298:	2105ed04 	addi	r4,r4,6068
   2029c:	00201d40 	call	201d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   202a0:	00208b80 	call	208b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   202a4:	0020aa40 	call	20aa4 <alt_icache_flush_all>
}
   202a8:	0001883a 	nop
   202ac:	e037883a 	mov	sp,fp
   202b0:	dfc00117 	ldw	ra,4(sp)
   202b4:	df000017 	ldw	fp,0(sp)
   202b8:	dec00204 	addi	sp,sp,8
   202bc:	f800283a 	ret

000202c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   202c0:	defffd04 	addi	sp,sp,-12
   202c4:	dfc00215 	stw	ra,8(sp)
   202c8:	df000115 	stw	fp,4(sp)
   202cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   202d0:	0009883a 	mov	r4,zero
   202d4:	00203a00 	call	203a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   202d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   202dc:	00203d80 	call	203d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   202e0:	018000b4 	movhi	r6,2
   202e4:	3185ed04 	addi	r6,r6,6068
   202e8:	014000b4 	movhi	r5,2
   202ec:	2945ed04 	addi	r5,r5,6068
   202f0:	010000b4 	movhi	r4,2
   202f4:	2105ed04 	addi	r4,r4,6068
   202f8:	0020ba80 	call	20ba8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   202fc:	00209e40 	call	209e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20300:	010000b4 	movhi	r4,2
   20304:	21029104 	addi	r4,r4,2628
   20308:	00211ac0 	call	211ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2030c:	d0a18e17 	ldw	r2,-31176(gp)
   20310:	d0e18f17 	ldw	r3,-31172(gp)
   20314:	d1219017 	ldw	r4,-31168(gp)
   20318:	200d883a 	mov	r6,r4
   2031c:	180b883a 	mov	r5,r3
   20320:	1009883a 	mov	r4,r2
   20324:	00200a00 	call	200a0 <main>
   20328:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2032c:	01000044 	movi	r4,1
   20330:	00207e00 	call	207e0 <close>
  exit (result);
   20334:	e13fff17 	ldw	r4,-4(fp)
   20338:	00211c00 	call	211c0 <exit>

0002033c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2033c:	defffd04 	addi	sp,sp,-12
   20340:	dfc00215 	stw	ra,8(sp)
   20344:	df000115 	stw	fp,4(sp)
   20348:	df000104 	addi	fp,sp,4
   2034c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   20350:	e13fff17 	ldw	r4,-4(fp)
   20354:	002064c0 	call	2064c <alt_busy_sleep>
}
   20358:	e037883a 	mov	sp,fp
   2035c:	dfc00117 	ldw	ra,4(sp)
   20360:	df000017 	ldw	fp,0(sp)
   20364:	dec00204 	addi	sp,sp,8
   20368:	f800283a 	ret

0002036c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2036c:	defffd04 	addi	sp,sp,-12
   20370:	dfc00215 	stw	ra,8(sp)
   20374:	df000115 	stw	fp,4(sp)
   20378:	df000104 	addi	fp,sp,4
   2037c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20380:	d1600204 	addi	r5,gp,-32760
   20384:	e13fff17 	ldw	r4,-4(fp)
   20388:	00209400 	call	20940 <alt_dev_llist_insert>
}
   2038c:	e037883a 	mov	sp,fp
   20390:	dfc00117 	ldw	ra,4(sp)
   20394:	df000017 	ldw	fp,0(sp)
   20398:	dec00204 	addi	sp,sp,8
   2039c:	f800283a 	ret

000203a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   203a0:	defffd04 	addi	sp,sp,-12
   203a4:	dfc00215 	stw	ra,8(sp)
   203a8:	df000115 	stw	fp,4(sp)
   203ac:	df000104 	addi	fp,sp,4
   203b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   203b4:	0020f2c0 	call	20f2c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   203b8:	00800044 	movi	r2,1
   203bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   203c0:	0001883a 	nop
   203c4:	e037883a 	mov	sp,fp
   203c8:	dfc00117 	ldw	ra,4(sp)
   203cc:	df000017 	ldw	fp,0(sp)
   203d0:	dec00204 	addi	sp,sp,8
   203d4:	f800283a 	ret

000203d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   203d8:	defffe04 	addi	sp,sp,-8
   203dc:	dfc00115 	stw	ra,4(sp)
   203e0:	df000015 	stw	fp,0(sp)
   203e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   203e8:	010000b4 	movhi	r4,2
   203ec:	2105fb04 	addi	r4,r4,6124
   203f0:	002036c0 	call	2036c <alt_dev_reg>
}
   203f4:	0001883a 	nop
   203f8:	e037883a 	mov	sp,fp
   203fc:	dfc00117 	ldw	ra,4(sp)
   20400:	df000017 	ldw	fp,0(sp)
   20404:	dec00204 	addi	sp,sp,8
   20408:	f800283a 	ret

0002040c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2040c:	defffa04 	addi	sp,sp,-24
   20410:	dfc00515 	stw	ra,20(sp)
   20414:	df000415 	stw	fp,16(sp)
   20418:	df000404 	addi	fp,sp,16
   2041c:	e13ffd15 	stw	r4,-12(fp)
   20420:	e17ffe15 	stw	r5,-8(fp)
   20424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20428:	e0bffd17 	ldw	r2,-12(fp)
   2042c:	10800017 	ldw	r2,0(r2)
   20430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20434:	e0bffc17 	ldw	r2,-16(fp)
   20438:	10c00a04 	addi	r3,r2,40
   2043c:	e0bffd17 	ldw	r2,-12(fp)
   20440:	10800217 	ldw	r2,8(r2)
   20444:	100f883a 	mov	r7,r2
   20448:	e1bfff17 	ldw	r6,-4(fp)
   2044c:	e17ffe17 	ldw	r5,-8(fp)
   20450:	1809883a 	mov	r4,r3
   20454:	00204cc0 	call	204cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   20458:	e037883a 	mov	sp,fp
   2045c:	dfc00117 	ldw	ra,4(sp)
   20460:	df000017 	ldw	fp,0(sp)
   20464:	dec00204 	addi	sp,sp,8
   20468:	f800283a 	ret

0002046c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2046c:	defffa04 	addi	sp,sp,-24
   20470:	dfc00515 	stw	ra,20(sp)
   20474:	df000415 	stw	fp,16(sp)
   20478:	df000404 	addi	fp,sp,16
   2047c:	e13ffd15 	stw	r4,-12(fp)
   20480:	e17ffe15 	stw	r5,-8(fp)
   20484:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20488:	e0bffd17 	ldw	r2,-12(fp)
   2048c:	10800017 	ldw	r2,0(r2)
   20490:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20494:	e0bffc17 	ldw	r2,-16(fp)
   20498:	10c00a04 	addi	r3,r2,40
   2049c:	e0bffd17 	ldw	r2,-12(fp)
   204a0:	10800217 	ldw	r2,8(r2)
   204a4:	100f883a 	mov	r7,r2
   204a8:	e1bfff17 	ldw	r6,-4(fp)
   204ac:	e17ffe17 	ldw	r5,-8(fp)
   204b0:	1809883a 	mov	r4,r3
   204b4:	00205b80 	call	205b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   204b8:	e037883a 	mov	sp,fp
   204bc:	dfc00117 	ldw	ra,4(sp)
   204c0:	df000017 	ldw	fp,0(sp)
   204c4:	dec00204 	addi	sp,sp,8
   204c8:	f800283a 	ret

000204cc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   204cc:	defff704 	addi	sp,sp,-36
   204d0:	df000815 	stw	fp,32(sp)
   204d4:	df000804 	addi	fp,sp,32
   204d8:	e13ffc15 	stw	r4,-16(fp)
   204dc:	e17ffd15 	stw	r5,-12(fp)
   204e0:	e1bffe15 	stw	r6,-8(fp)
   204e4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   204e8:	e0bffc17 	ldw	r2,-16(fp)
   204ec:	10800017 	ldw	r2,0(r2)
   204f0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   204f4:	e0bffd17 	ldw	r2,-12(fp)
   204f8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   204fc:	e0bffe17 	ldw	r2,-8(fp)
   20500:	e0fffd17 	ldw	r3,-12(fp)
   20504:	1885883a 	add	r2,r3,r2
   20508:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   2050c:	00001206 	br	20558 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20510:	e0bff917 	ldw	r2,-28(fp)
   20514:	10800037 	ldwio	r2,0(r2)
   20518:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   2051c:	e0bffb17 	ldw	r2,-20(fp)
   20520:	10a0000c 	andi	r2,r2,32768
   20524:	10000626 	beq	r2,zero,20540 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20528:	e0bff817 	ldw	r2,-32(fp)
   2052c:	10c00044 	addi	r3,r2,1
   20530:	e0fff815 	stw	r3,-32(fp)
   20534:	e0fffb17 	ldw	r3,-20(fp)
   20538:	10c00005 	stb	r3,0(r2)
   2053c:	00000606 	br	20558 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   20540:	e0fff817 	ldw	r3,-32(fp)
   20544:	e0bffd17 	ldw	r2,-12(fp)
   20548:	1880071e 	bne	r3,r2,20568 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   2054c:	e0bfff17 	ldw	r2,-4(fp)
   20550:	1090000c 	andi	r2,r2,16384
   20554:	1000061e 	bne	r2,zero,20570 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   20558:	e0fff817 	ldw	r3,-32(fp)
   2055c:	e0bffa17 	ldw	r2,-24(fp)
   20560:	18bfeb36 	bltu	r3,r2,20510 <altera_avalon_jtag_uart_read+0x44>
   20564:	00000306 	br	20574 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   20568:	0001883a 	nop
   2056c:	00000106 	br	20574 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   20570:	0001883a 	nop
    
  }

  if (ptr != buffer)
   20574:	e0fff817 	ldw	r3,-32(fp)
   20578:	e0bffd17 	ldw	r2,-12(fp)
   2057c:	18800426 	beq	r3,r2,20590 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   20580:	e0fff817 	ldw	r3,-32(fp)
   20584:	e0bffd17 	ldw	r2,-12(fp)
   20588:	1885c83a 	sub	r2,r3,r2
   2058c:	00000606 	br	205a8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   20590:	e0bfff17 	ldw	r2,-4(fp)
   20594:	1090000c 	andi	r2,r2,16384
   20598:	10000226 	beq	r2,zero,205a4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   2059c:	00bffd44 	movi	r2,-11
   205a0:	00000106 	br	205a8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   205a4:	00bffec4 	movi	r2,-5
}
   205a8:	e037883a 	mov	sp,fp
   205ac:	df000017 	ldw	fp,0(sp)
   205b0:	dec00104 	addi	sp,sp,4
   205b4:	f800283a 	ret

000205b8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   205b8:	defff904 	addi	sp,sp,-28
   205bc:	df000615 	stw	fp,24(sp)
   205c0:	df000604 	addi	fp,sp,24
   205c4:	e13ffc15 	stw	r4,-16(fp)
   205c8:	e17ffd15 	stw	r5,-12(fp)
   205cc:	e1bffe15 	stw	r6,-8(fp)
   205d0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   205d4:	e0bffc17 	ldw	r2,-16(fp)
   205d8:	10800017 	ldw	r2,0(r2)
   205dc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   205e0:	e0bffe17 	ldw	r2,-8(fp)
   205e4:	e0fffd17 	ldw	r3,-12(fp)
   205e8:	1885883a 	add	r2,r3,r2
   205ec:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   205f0:	00000e06 	br	2062c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   205f4:	e0bffa17 	ldw	r2,-24(fp)
   205f8:	10800104 	addi	r2,r2,4
   205fc:	10800037 	ldwio	r2,0(r2)
   20600:	10bfffec 	andhi	r2,r2,65535
   20604:	10000926 	beq	r2,zero,2062c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   20608:	e0fffa17 	ldw	r3,-24(fp)
   2060c:	e0bffd17 	ldw	r2,-12(fp)
   20610:	11000044 	addi	r4,r2,1
   20614:	e13ffd15 	stw	r4,-12(fp)
   20618:	10800003 	ldbu	r2,0(r2)
   2061c:	10803fcc 	andi	r2,r2,255
   20620:	1080201c 	xori	r2,r2,128
   20624:	10bfe004 	addi	r2,r2,-128
   20628:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   2062c:	e0fffd17 	ldw	r3,-12(fp)
   20630:	e0bffb17 	ldw	r2,-20(fp)
   20634:	18bfef36 	bltu	r3,r2,205f4 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   20638:	e0bffe17 	ldw	r2,-8(fp)
}
   2063c:	e037883a 	mov	sp,fp
   20640:	df000017 	ldw	fp,0(sp)
   20644:	dec00104 	addi	sp,sp,4
   20648:	f800283a 	ret

0002064c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2064c:	defffa04 	addi	sp,sp,-24
   20650:	dfc00515 	stw	ra,20(sp)
   20654:	df000415 	stw	fp,16(sp)
   20658:	df000404 	addi	fp,sp,16
   2065c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   20660:	00800244 	movi	r2,9
   20664:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   20668:	014003f4 	movhi	r5,15
   2066c:	29509004 	addi	r5,r5,16960
   20670:	e13ffd17 	ldw	r4,-12(fp)
   20674:	00217580 	call	21758 <__mulsi3>
   20678:	100b883a 	mov	r5,r2
   2067c:	0100bef4 	movhi	r4,763
   20680:	213c2004 	addi	r4,r4,-3968
   20684:	002169c0 	call	2169c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   20688:	100b883a 	mov	r5,r2
   2068c:	01200034 	movhi	r4,32768
   20690:	213fffc4 	addi	r4,r4,-1
   20694:	002169c0 	call	2169c <__udivsi3>
   20698:	100b883a 	mov	r5,r2
   2069c:	e13fff17 	ldw	r4,-4(fp)
   206a0:	002169c0 	call	2169c <__udivsi3>
   206a4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   206a8:	e0bffe17 	ldw	r2,-8(fp)
   206ac:	10002a26 	beq	r2,zero,20758 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   206b0:	e03ffc15 	stw	zero,-16(fp)
   206b4:	00001706 	br	20714 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   206b8:	00a00034 	movhi	r2,32768
   206bc:	10bfffc4 	addi	r2,r2,-1
   206c0:	10bfffc4 	addi	r2,r2,-1
   206c4:	103ffe1e 	bne	r2,zero,206c0 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   206c8:	014003f4 	movhi	r5,15
   206cc:	29509004 	addi	r5,r5,16960
   206d0:	e13ffd17 	ldw	r4,-12(fp)
   206d4:	00217580 	call	21758 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   206d8:	100b883a 	mov	r5,r2
   206dc:	0100bef4 	movhi	r4,763
   206e0:	213c2004 	addi	r4,r4,-3968
   206e4:	002169c0 	call	2169c <__udivsi3>
   206e8:	100b883a 	mov	r5,r2
   206ec:	01200034 	movhi	r4,32768
   206f0:	213fffc4 	addi	r4,r4,-1
   206f4:	002169c0 	call	2169c <__udivsi3>
   206f8:	1007883a 	mov	r3,r2
   206fc:	e0bfff17 	ldw	r2,-4(fp)
   20700:	10c5c83a 	sub	r2,r2,r3
   20704:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   20708:	e0bffc17 	ldw	r2,-16(fp)
   2070c:	10800044 	addi	r2,r2,1
   20710:	e0bffc15 	stw	r2,-16(fp)
   20714:	e0fffc17 	ldw	r3,-16(fp)
   20718:	e0bffe17 	ldw	r2,-8(fp)
   2071c:	18bfe616 	blt	r3,r2,206b8 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   20720:	014003f4 	movhi	r5,15
   20724:	29509004 	addi	r5,r5,16960
   20728:	e13ffd17 	ldw	r4,-12(fp)
   2072c:	00217580 	call	21758 <__mulsi3>
   20730:	100b883a 	mov	r5,r2
   20734:	0100bef4 	movhi	r4,763
   20738:	213c2004 	addi	r4,r4,-3968
   2073c:	002169c0 	call	2169c <__udivsi3>
   20740:	e17fff17 	ldw	r5,-4(fp)
   20744:	1009883a 	mov	r4,r2
   20748:	00217580 	call	21758 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2074c:	10bfffc4 	addi	r2,r2,-1
   20750:	103ffe1e 	bne	r2,zero,2074c <alt_busy_sleep+0x100>
   20754:	00000d06 	br	2078c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   20758:	014003f4 	movhi	r5,15
   2075c:	29509004 	addi	r5,r5,16960
   20760:	e13ffd17 	ldw	r4,-12(fp)
   20764:	00217580 	call	21758 <__mulsi3>
   20768:	100b883a 	mov	r5,r2
   2076c:	0100bef4 	movhi	r4,763
   20770:	213c2004 	addi	r4,r4,-3968
   20774:	002169c0 	call	2169c <__udivsi3>
   20778:	e17fff17 	ldw	r5,-4(fp)
   2077c:	1009883a 	mov	r4,r2
   20780:	00217580 	call	21758 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   20784:	10bfffc4 	addi	r2,r2,-1
   20788:	00bffe16 	blt	zero,r2,20784 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2078c:	0005883a 	mov	r2,zero
}
   20790:	e037883a 	mov	sp,fp
   20794:	dfc00117 	ldw	ra,4(sp)
   20798:	df000017 	ldw	fp,0(sp)
   2079c:	dec00204 	addi	sp,sp,8
   207a0:	f800283a 	ret

000207a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   207a4:	defffe04 	addi	sp,sp,-8
   207a8:	dfc00115 	stw	ra,4(sp)
   207ac:	df000015 	stw	fp,0(sp)
   207b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   207b4:	d0a00517 	ldw	r2,-32748(gp)
   207b8:	10000326 	beq	r2,zero,207c8 <alt_get_errno+0x24>
   207bc:	d0a00517 	ldw	r2,-32748(gp)
   207c0:	103ee83a 	callr	r2
   207c4:	00000106 	br	207cc <alt_get_errno+0x28>
   207c8:	d0a19104 	addi	r2,gp,-31164
}
   207cc:	e037883a 	mov	sp,fp
   207d0:	dfc00117 	ldw	ra,4(sp)
   207d4:	df000017 	ldw	fp,0(sp)
   207d8:	dec00204 	addi	sp,sp,8
   207dc:	f800283a 	ret

000207e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   207e0:	defffb04 	addi	sp,sp,-20
   207e4:	dfc00415 	stw	ra,16(sp)
   207e8:	df000315 	stw	fp,12(sp)
   207ec:	df000304 	addi	fp,sp,12
   207f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   207f4:	e0bfff17 	ldw	r2,-4(fp)
   207f8:	10000816 	blt	r2,zero,2081c <close+0x3c>
   207fc:	01400304 	movi	r5,12
   20800:	e13fff17 	ldw	r4,-4(fp)
   20804:	00217580 	call	21758 <__mulsi3>
   20808:	1007883a 	mov	r3,r2
   2080c:	008000b4 	movhi	r2,2
   20810:	10861004 	addi	r2,r2,6208
   20814:	1885883a 	add	r2,r3,r2
   20818:	00000106 	br	20820 <close+0x40>
   2081c:	0005883a 	mov	r2,zero
   20820:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   20824:	e0bffd17 	ldw	r2,-12(fp)
   20828:	10001926 	beq	r2,zero,20890 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2082c:	e0bffd17 	ldw	r2,-12(fp)
   20830:	10800017 	ldw	r2,0(r2)
   20834:	10800417 	ldw	r2,16(r2)
   20838:	10000626 	beq	r2,zero,20854 <close+0x74>
   2083c:	e0bffd17 	ldw	r2,-12(fp)
   20840:	10800017 	ldw	r2,0(r2)
   20844:	10800417 	ldw	r2,16(r2)
   20848:	e13ffd17 	ldw	r4,-12(fp)
   2084c:	103ee83a 	callr	r2
   20850:	00000106 	br	20858 <close+0x78>
   20854:	0005883a 	mov	r2,zero
   20858:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2085c:	e13fff17 	ldw	r4,-4(fp)
   20860:	0020ea80 	call	20ea8 <alt_release_fd>
    if (rval < 0)
   20864:	e0bffe17 	ldw	r2,-8(fp)
   20868:	1000070e 	bge	r2,zero,20888 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2086c:	00207a40 	call	207a4 <alt_get_errno>
   20870:	1007883a 	mov	r3,r2
   20874:	e0bffe17 	ldw	r2,-8(fp)
   20878:	0085c83a 	sub	r2,zero,r2
   2087c:	18800015 	stw	r2,0(r3)
      return -1;
   20880:	00bfffc4 	movi	r2,-1
   20884:	00000706 	br	208a4 <close+0xc4>
    }
    return 0;
   20888:	0005883a 	mov	r2,zero
   2088c:	00000506 	br	208a4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   20890:	00207a40 	call	207a4 <alt_get_errno>
   20894:	1007883a 	mov	r3,r2
   20898:	00801444 	movi	r2,81
   2089c:	18800015 	stw	r2,0(r3)
    return -1;
   208a0:	00bfffc4 	movi	r2,-1
  }
}
   208a4:	e037883a 	mov	sp,fp
   208a8:	dfc00117 	ldw	ra,4(sp)
   208ac:	df000017 	ldw	fp,0(sp)
   208b0:	dec00204 	addi	sp,sp,8
   208b4:	f800283a 	ret

000208b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   208b8:	deffff04 	addi	sp,sp,-4
   208bc:	df000015 	stw	fp,0(sp)
   208c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   208c4:	0001883a 	nop
   208c8:	e037883a 	mov	sp,fp
   208cc:	df000017 	ldw	fp,0(sp)
   208d0:	dec00104 	addi	sp,sp,4
   208d4:	f800283a 	ret

000208d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   208d8:	defffc04 	addi	sp,sp,-16
   208dc:	df000315 	stw	fp,12(sp)
   208e0:	df000304 	addi	fp,sp,12
   208e4:	e13ffd15 	stw	r4,-12(fp)
   208e8:	e17ffe15 	stw	r5,-8(fp)
   208ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
   208f0:	e0bfff17 	ldw	r2,-4(fp)
}
   208f4:	e037883a 	mov	sp,fp
   208f8:	df000017 	ldw	fp,0(sp)
   208fc:	dec00104 	addi	sp,sp,4
   20900:	f800283a 	ret

00020904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20904:	defffe04 	addi	sp,sp,-8
   20908:	dfc00115 	stw	ra,4(sp)
   2090c:	df000015 	stw	fp,0(sp)
   20910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20914:	d0a00517 	ldw	r2,-32748(gp)
   20918:	10000326 	beq	r2,zero,20928 <alt_get_errno+0x24>
   2091c:	d0a00517 	ldw	r2,-32748(gp)
   20920:	103ee83a 	callr	r2
   20924:	00000106 	br	2092c <alt_get_errno+0x28>
   20928:	d0a19104 	addi	r2,gp,-31164
}
   2092c:	e037883a 	mov	sp,fp
   20930:	dfc00117 	ldw	ra,4(sp)
   20934:	df000017 	ldw	fp,0(sp)
   20938:	dec00204 	addi	sp,sp,8
   2093c:	f800283a 	ret

00020940 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   20940:	defffa04 	addi	sp,sp,-24
   20944:	dfc00515 	stw	ra,20(sp)
   20948:	df000415 	stw	fp,16(sp)
   2094c:	df000404 	addi	fp,sp,16
   20950:	e13ffe15 	stw	r4,-8(fp)
   20954:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   20958:	e0bffe17 	ldw	r2,-8(fp)
   2095c:	10000326 	beq	r2,zero,2096c <alt_dev_llist_insert+0x2c>
   20960:	e0bffe17 	ldw	r2,-8(fp)
   20964:	10800217 	ldw	r2,8(r2)
   20968:	1000061e 	bne	r2,zero,20984 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2096c:	00209040 	call	20904 <alt_get_errno>
   20970:	1007883a 	mov	r3,r2
   20974:	00800584 	movi	r2,22
   20978:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2097c:	00bffa84 	movi	r2,-22
   20980:	00001306 	br	209d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   20984:	e0bffe17 	ldw	r2,-8(fp)
   20988:	e0ffff17 	ldw	r3,-4(fp)
   2098c:	e0fffc15 	stw	r3,-16(fp)
   20990:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   20994:	e0bffd17 	ldw	r2,-12(fp)
   20998:	e0fffc17 	ldw	r3,-16(fp)
   2099c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   209a0:	e0bffc17 	ldw	r2,-16(fp)
   209a4:	10c00017 	ldw	r3,0(r2)
   209a8:	e0bffd17 	ldw	r2,-12(fp)
   209ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   209b0:	e0bffc17 	ldw	r2,-16(fp)
   209b4:	10800017 	ldw	r2,0(r2)
   209b8:	e0fffd17 	ldw	r3,-12(fp)
   209bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   209c0:	e0bffc17 	ldw	r2,-16(fp)
   209c4:	e0fffd17 	ldw	r3,-12(fp)
   209c8:	10c00015 	stw	r3,0(r2)

  return 0;  
   209cc:	0005883a 	mov	r2,zero
}
   209d0:	e037883a 	mov	sp,fp
   209d4:	dfc00117 	ldw	ra,4(sp)
   209d8:	df000017 	ldw	fp,0(sp)
   209dc:	dec00204 	addi	sp,sp,8
   209e0:	f800283a 	ret

000209e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   209e4:	defffd04 	addi	sp,sp,-12
   209e8:	dfc00215 	stw	ra,8(sp)
   209ec:	df000115 	stw	fp,4(sp)
   209f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   209f4:	008000b4 	movhi	r2,2
   209f8:	1085ec04 	addi	r2,r2,6064
   209fc:	e0bfff15 	stw	r2,-4(fp)
   20a00:	00000606 	br	20a1c <_do_ctors+0x38>
        (*ctor) (); 
   20a04:	e0bfff17 	ldw	r2,-4(fp)
   20a08:	10800017 	ldw	r2,0(r2)
   20a0c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20a10:	e0bfff17 	ldw	r2,-4(fp)
   20a14:	10bfff04 	addi	r2,r2,-4
   20a18:	e0bfff15 	stw	r2,-4(fp)
   20a1c:	e0ffff17 	ldw	r3,-4(fp)
   20a20:	008000b4 	movhi	r2,2
   20a24:	1085ed04 	addi	r2,r2,6068
   20a28:	18bff62e 	bgeu	r3,r2,20a04 <_do_ctors+0x20>
        (*ctor) (); 
}
   20a2c:	0001883a 	nop
   20a30:	e037883a 	mov	sp,fp
   20a34:	dfc00117 	ldw	ra,4(sp)
   20a38:	df000017 	ldw	fp,0(sp)
   20a3c:	dec00204 	addi	sp,sp,8
   20a40:	f800283a 	ret

00020a44 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   20a44:	defffd04 	addi	sp,sp,-12
   20a48:	dfc00215 	stw	ra,8(sp)
   20a4c:	df000115 	stw	fp,4(sp)
   20a50:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20a54:	008000b4 	movhi	r2,2
   20a58:	1085ec04 	addi	r2,r2,6064
   20a5c:	e0bfff15 	stw	r2,-4(fp)
   20a60:	00000606 	br	20a7c <_do_dtors+0x38>
        (*dtor) (); 
   20a64:	e0bfff17 	ldw	r2,-4(fp)
   20a68:	10800017 	ldw	r2,0(r2)
   20a6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20a70:	e0bfff17 	ldw	r2,-4(fp)
   20a74:	10bfff04 	addi	r2,r2,-4
   20a78:	e0bfff15 	stw	r2,-4(fp)
   20a7c:	e0ffff17 	ldw	r3,-4(fp)
   20a80:	008000b4 	movhi	r2,2
   20a84:	1085ed04 	addi	r2,r2,6068
   20a88:	18bff62e 	bgeu	r3,r2,20a64 <_do_dtors+0x20>
        (*dtor) (); 
}
   20a8c:	0001883a 	nop
   20a90:	e037883a 	mov	sp,fp
   20a94:	dfc00117 	ldw	ra,4(sp)
   20a98:	df000017 	ldw	fp,0(sp)
   20a9c:	dec00204 	addi	sp,sp,8
   20aa0:	f800283a 	ret

00020aa4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   20aa4:	deffff04 	addi	sp,sp,-4
   20aa8:	df000015 	stw	fp,0(sp)
   20aac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   20ab0:	0001883a 	nop
   20ab4:	e037883a 	mov	sp,fp
   20ab8:	df000017 	ldw	fp,0(sp)
   20abc:	dec00104 	addi	sp,sp,4
   20ac0:	f800283a 	ret

00020ac4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   20ac4:	defff804 	addi	sp,sp,-32
   20ac8:	dfc00715 	stw	ra,28(sp)
   20acc:	df000615 	stw	fp,24(sp)
   20ad0:	dc000515 	stw	r16,20(sp)
   20ad4:	df000604 	addi	fp,sp,24
   20ad8:	e13ffb15 	stw	r4,-20(fp)
   20adc:	e17ffc15 	stw	r5,-16(fp)
   20ae0:	e1bffd15 	stw	r6,-12(fp)
   20ae4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   20ae8:	e1bffe17 	ldw	r6,-8(fp)
   20aec:	e17ffd17 	ldw	r5,-12(fp)
   20af0:	e13ffc17 	ldw	r4,-16(fp)
   20af4:	0020d4c0 	call	20d4c <open>
   20af8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   20afc:	e0bffa17 	ldw	r2,-24(fp)
   20b00:	10002216 	blt	r2,zero,20b8c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   20b04:	040000b4 	movhi	r16,2
   20b08:	84061004 	addi	r16,r16,6208
   20b0c:	e0bffa17 	ldw	r2,-24(fp)
   20b10:	01400304 	movi	r5,12
   20b14:	1009883a 	mov	r4,r2
   20b18:	00217580 	call	21758 <__mulsi3>
   20b1c:	8085883a 	add	r2,r16,r2
   20b20:	10c00017 	ldw	r3,0(r2)
   20b24:	e0bffb17 	ldw	r2,-20(fp)
   20b28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   20b2c:	040000b4 	movhi	r16,2
   20b30:	84061004 	addi	r16,r16,6208
   20b34:	e0bffa17 	ldw	r2,-24(fp)
   20b38:	01400304 	movi	r5,12
   20b3c:	1009883a 	mov	r4,r2
   20b40:	00217580 	call	21758 <__mulsi3>
   20b44:	8085883a 	add	r2,r16,r2
   20b48:	10800104 	addi	r2,r2,4
   20b4c:	10c00017 	ldw	r3,0(r2)
   20b50:	e0bffb17 	ldw	r2,-20(fp)
   20b54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   20b58:	040000b4 	movhi	r16,2
   20b5c:	84061004 	addi	r16,r16,6208
   20b60:	e0bffa17 	ldw	r2,-24(fp)
   20b64:	01400304 	movi	r5,12
   20b68:	1009883a 	mov	r4,r2
   20b6c:	00217580 	call	21758 <__mulsi3>
   20b70:	8085883a 	add	r2,r16,r2
   20b74:	10800204 	addi	r2,r2,8
   20b78:	10c00017 	ldw	r3,0(r2)
   20b7c:	e0bffb17 	ldw	r2,-20(fp)
   20b80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   20b84:	e13ffa17 	ldw	r4,-24(fp)
   20b88:	0020ea80 	call	20ea8 <alt_release_fd>
  }
} 
   20b8c:	0001883a 	nop
   20b90:	e6ffff04 	addi	sp,fp,-4
   20b94:	dfc00217 	ldw	ra,8(sp)
   20b98:	df000117 	ldw	fp,4(sp)
   20b9c:	dc000017 	ldw	r16,0(sp)
   20ba0:	dec00304 	addi	sp,sp,12
   20ba4:	f800283a 	ret

00020ba8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   20ba8:	defffb04 	addi	sp,sp,-20
   20bac:	dfc00415 	stw	ra,16(sp)
   20bb0:	df000315 	stw	fp,12(sp)
   20bb4:	df000304 	addi	fp,sp,12
   20bb8:	e13ffd15 	stw	r4,-12(fp)
   20bbc:	e17ffe15 	stw	r5,-8(fp)
   20bc0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   20bc4:	01c07fc4 	movi	r7,511
   20bc8:	01800044 	movi	r6,1
   20bcc:	e17ffd17 	ldw	r5,-12(fp)
   20bd0:	010000b4 	movhi	r4,2
   20bd4:	21061304 	addi	r4,r4,6220
   20bd8:	0020ac40 	call	20ac4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   20bdc:	01c07fc4 	movi	r7,511
   20be0:	000d883a 	mov	r6,zero
   20be4:	e17ffe17 	ldw	r5,-8(fp)
   20be8:	010000b4 	movhi	r4,2
   20bec:	21061004 	addi	r4,r4,6208
   20bf0:	0020ac40 	call	20ac4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   20bf4:	01c07fc4 	movi	r7,511
   20bf8:	01800044 	movi	r6,1
   20bfc:	e17fff17 	ldw	r5,-4(fp)
   20c00:	010000b4 	movhi	r4,2
   20c04:	21061604 	addi	r4,r4,6232
   20c08:	0020ac40 	call	20ac4 <alt_open_fd>
}  
   20c0c:	0001883a 	nop
   20c10:	e037883a 	mov	sp,fp
   20c14:	dfc00117 	ldw	ra,4(sp)
   20c18:	df000017 	ldw	fp,0(sp)
   20c1c:	dec00204 	addi	sp,sp,8
   20c20:	f800283a 	ret

00020c24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20c24:	defffe04 	addi	sp,sp,-8
   20c28:	dfc00115 	stw	ra,4(sp)
   20c2c:	df000015 	stw	fp,0(sp)
   20c30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20c34:	d0a00517 	ldw	r2,-32748(gp)
   20c38:	10000326 	beq	r2,zero,20c48 <alt_get_errno+0x24>
   20c3c:	d0a00517 	ldw	r2,-32748(gp)
   20c40:	103ee83a 	callr	r2
   20c44:	00000106 	br	20c4c <alt_get_errno+0x28>
   20c48:	d0a19104 	addi	r2,gp,-31164
}
   20c4c:	e037883a 	mov	sp,fp
   20c50:	dfc00117 	ldw	ra,4(sp)
   20c54:	df000017 	ldw	fp,0(sp)
   20c58:	dec00204 	addi	sp,sp,8
   20c5c:	f800283a 	ret

00020c60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   20c60:	defffb04 	addi	sp,sp,-20
   20c64:	dfc00415 	stw	ra,16(sp)
   20c68:	df000315 	stw	fp,12(sp)
   20c6c:	dc000215 	stw	r16,8(sp)
   20c70:	df000304 	addi	fp,sp,12
   20c74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   20c78:	e0bffe17 	ldw	r2,-8(fp)
   20c7c:	10800217 	ldw	r2,8(r2)
   20c80:	10d00034 	orhi	r3,r2,16384
   20c84:	e0bffe17 	ldw	r2,-8(fp)
   20c88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   20c8c:	e03ffd15 	stw	zero,-12(fp)
   20c90:	00002306 	br	20d20 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   20c94:	040000b4 	movhi	r16,2
   20c98:	84061004 	addi	r16,r16,6208
   20c9c:	e0bffd17 	ldw	r2,-12(fp)
   20ca0:	01400304 	movi	r5,12
   20ca4:	1009883a 	mov	r4,r2
   20ca8:	00217580 	call	21758 <__mulsi3>
   20cac:	8085883a 	add	r2,r16,r2
   20cb0:	10c00017 	ldw	r3,0(r2)
   20cb4:	e0bffe17 	ldw	r2,-8(fp)
   20cb8:	10800017 	ldw	r2,0(r2)
   20cbc:	1880151e 	bne	r3,r2,20d14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   20cc0:	040000b4 	movhi	r16,2
   20cc4:	84061004 	addi	r16,r16,6208
   20cc8:	e0bffd17 	ldw	r2,-12(fp)
   20ccc:	01400304 	movi	r5,12
   20cd0:	1009883a 	mov	r4,r2
   20cd4:	00217580 	call	21758 <__mulsi3>
   20cd8:	8085883a 	add	r2,r16,r2
   20cdc:	10800204 	addi	r2,r2,8
   20ce0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   20ce4:	10000b0e 	bge	r2,zero,20d14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   20ce8:	01400304 	movi	r5,12
   20cec:	e13ffd17 	ldw	r4,-12(fp)
   20cf0:	00217580 	call	21758 <__mulsi3>
   20cf4:	1007883a 	mov	r3,r2
   20cf8:	008000b4 	movhi	r2,2
   20cfc:	10861004 	addi	r2,r2,6208
   20d00:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   20d04:	e0bffe17 	ldw	r2,-8(fp)
   20d08:	18800226 	beq	r3,r2,20d14 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   20d0c:	00bffcc4 	movi	r2,-13
   20d10:	00000806 	br	20d34 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   20d14:	e0bffd17 	ldw	r2,-12(fp)
   20d18:	10800044 	addi	r2,r2,1
   20d1c:	e0bffd15 	stw	r2,-12(fp)
   20d20:	d0a00417 	ldw	r2,-32752(gp)
   20d24:	1007883a 	mov	r3,r2
   20d28:	e0bffd17 	ldw	r2,-12(fp)
   20d2c:	18bfd92e 	bgeu	r3,r2,20c94 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   20d30:	0005883a 	mov	r2,zero
}
   20d34:	e6ffff04 	addi	sp,fp,-4
   20d38:	dfc00217 	ldw	ra,8(sp)
   20d3c:	df000117 	ldw	fp,4(sp)
   20d40:	dc000017 	ldw	r16,0(sp)
   20d44:	dec00304 	addi	sp,sp,12
   20d48:	f800283a 	ret

00020d4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   20d4c:	defff604 	addi	sp,sp,-40
   20d50:	dfc00915 	stw	ra,36(sp)
   20d54:	df000815 	stw	fp,32(sp)
   20d58:	df000804 	addi	fp,sp,32
   20d5c:	e13ffd15 	stw	r4,-12(fp)
   20d60:	e17ffe15 	stw	r5,-8(fp)
   20d64:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   20d68:	00bfffc4 	movi	r2,-1
   20d6c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   20d70:	00bffb44 	movi	r2,-19
   20d74:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   20d78:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   20d7c:	d1600204 	addi	r5,gp,-32760
   20d80:	e13ffd17 	ldw	r4,-12(fp)
   20d84:	0020f500 	call	20f50 <alt_find_dev>
   20d88:	e0bff815 	stw	r2,-32(fp)
   20d8c:	e0bff817 	ldw	r2,-32(fp)
   20d90:	1000051e 	bne	r2,zero,20da8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   20d94:	e13ffd17 	ldw	r4,-12(fp)
   20d98:	0020fe00 	call	20fe0 <alt_find_file>
   20d9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   20da0:	00800044 	movi	r2,1
   20da4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   20da8:	e0bff817 	ldw	r2,-32(fp)
   20dac:	10002b26 	beq	r2,zero,20e5c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   20db0:	e13ff817 	ldw	r4,-32(fp)
   20db4:	00210e80 	call	210e8 <alt_get_fd>
   20db8:	e0bff915 	stw	r2,-28(fp)
   20dbc:	e0bff917 	ldw	r2,-28(fp)
   20dc0:	1000030e 	bge	r2,zero,20dd0 <open+0x84>
    {
      status = index;
   20dc4:	e0bff917 	ldw	r2,-28(fp)
   20dc8:	e0bffa15 	stw	r2,-24(fp)
   20dcc:	00002506 	br	20e64 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   20dd0:	01400304 	movi	r5,12
   20dd4:	e13ff917 	ldw	r4,-28(fp)
   20dd8:	00217580 	call	21758 <__mulsi3>
   20ddc:	1007883a 	mov	r3,r2
   20de0:	008000b4 	movhi	r2,2
   20de4:	10861004 	addi	r2,r2,6208
   20de8:	1885883a 	add	r2,r3,r2
   20dec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   20df0:	e0fffe17 	ldw	r3,-8(fp)
   20df4:	00900034 	movhi	r2,16384
   20df8:	10bfffc4 	addi	r2,r2,-1
   20dfc:	1886703a 	and	r3,r3,r2
   20e00:	e0bffc17 	ldw	r2,-16(fp)
   20e04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   20e08:	e0bffb17 	ldw	r2,-20(fp)
   20e0c:	1000051e 	bne	r2,zero,20e24 <open+0xd8>
   20e10:	e13ffc17 	ldw	r4,-16(fp)
   20e14:	0020c600 	call	20c60 <alt_file_locked>
   20e18:	e0bffa15 	stw	r2,-24(fp)
   20e1c:	e0bffa17 	ldw	r2,-24(fp)
   20e20:	10001016 	blt	r2,zero,20e64 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   20e24:	e0bff817 	ldw	r2,-32(fp)
   20e28:	10800317 	ldw	r2,12(r2)
   20e2c:	10000826 	beq	r2,zero,20e50 <open+0x104>
   20e30:	e0bff817 	ldw	r2,-32(fp)
   20e34:	10800317 	ldw	r2,12(r2)
   20e38:	e1ffff17 	ldw	r7,-4(fp)
   20e3c:	e1bffe17 	ldw	r6,-8(fp)
   20e40:	e17ffd17 	ldw	r5,-12(fp)
   20e44:	e13ffc17 	ldw	r4,-16(fp)
   20e48:	103ee83a 	callr	r2
   20e4c:	00000106 	br	20e54 <open+0x108>
   20e50:	0005883a 	mov	r2,zero
   20e54:	e0bffa15 	stw	r2,-24(fp)
   20e58:	00000206 	br	20e64 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   20e5c:	00bffb44 	movi	r2,-19
   20e60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   20e64:	e0bffa17 	ldw	r2,-24(fp)
   20e68:	1000090e 	bge	r2,zero,20e90 <open+0x144>
  {
    alt_release_fd (index);  
   20e6c:	e13ff917 	ldw	r4,-28(fp)
   20e70:	0020ea80 	call	20ea8 <alt_release_fd>
    ALT_ERRNO = -status;
   20e74:	0020c240 	call	20c24 <alt_get_errno>
   20e78:	1007883a 	mov	r3,r2
   20e7c:	e0bffa17 	ldw	r2,-24(fp)
   20e80:	0085c83a 	sub	r2,zero,r2
   20e84:	18800015 	stw	r2,0(r3)
    return -1;
   20e88:	00bfffc4 	movi	r2,-1
   20e8c:	00000106 	br	20e94 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   20e90:	e0bff917 	ldw	r2,-28(fp)
}
   20e94:	e037883a 	mov	sp,fp
   20e98:	dfc00117 	ldw	ra,4(sp)
   20e9c:	df000017 	ldw	fp,0(sp)
   20ea0:	dec00204 	addi	sp,sp,8
   20ea4:	f800283a 	ret

00020ea8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   20ea8:	defffc04 	addi	sp,sp,-16
   20eac:	dfc00315 	stw	ra,12(sp)
   20eb0:	df000215 	stw	fp,8(sp)
   20eb4:	dc000115 	stw	r16,4(sp)
   20eb8:	df000204 	addi	fp,sp,8
   20ebc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   20ec0:	e0bffe17 	ldw	r2,-8(fp)
   20ec4:	108000d0 	cmplti	r2,r2,3
   20ec8:	1000111e 	bne	r2,zero,20f10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   20ecc:	040000b4 	movhi	r16,2
   20ed0:	84061004 	addi	r16,r16,6208
   20ed4:	e0bffe17 	ldw	r2,-8(fp)
   20ed8:	01400304 	movi	r5,12
   20edc:	1009883a 	mov	r4,r2
   20ee0:	00217580 	call	21758 <__mulsi3>
   20ee4:	8085883a 	add	r2,r16,r2
   20ee8:	10800204 	addi	r2,r2,8
   20eec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   20ef0:	040000b4 	movhi	r16,2
   20ef4:	84061004 	addi	r16,r16,6208
   20ef8:	e0bffe17 	ldw	r2,-8(fp)
   20efc:	01400304 	movi	r5,12
   20f00:	1009883a 	mov	r4,r2
   20f04:	00217580 	call	21758 <__mulsi3>
   20f08:	8085883a 	add	r2,r16,r2
   20f0c:	10000015 	stw	zero,0(r2)
  }
}
   20f10:	0001883a 	nop
   20f14:	e6ffff04 	addi	sp,fp,-4
   20f18:	dfc00217 	ldw	ra,8(sp)
   20f1c:	df000117 	ldw	fp,4(sp)
   20f20:	dc000017 	ldw	r16,0(sp)
   20f24:	dec00304 	addi	sp,sp,12
   20f28:	f800283a 	ret

00020f2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   20f2c:	deffff04 	addi	sp,sp,-4
   20f30:	df000015 	stw	fp,0(sp)
   20f34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   20f38:	000170fa 	wrctl	ienable,zero
}
   20f3c:	0001883a 	nop
   20f40:	e037883a 	mov	sp,fp
   20f44:	df000017 	ldw	fp,0(sp)
   20f48:	dec00104 	addi	sp,sp,4
   20f4c:	f800283a 	ret

00020f50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   20f50:	defffa04 	addi	sp,sp,-24
   20f54:	dfc00515 	stw	ra,20(sp)
   20f58:	df000415 	stw	fp,16(sp)
   20f5c:	df000404 	addi	fp,sp,16
   20f60:	e13ffe15 	stw	r4,-8(fp)
   20f64:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   20f68:	e0bfff17 	ldw	r2,-4(fp)
   20f6c:	10800017 	ldw	r2,0(r2)
   20f70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   20f74:	e13ffe17 	ldw	r4,-8(fp)
   20f78:	00212740 	call	21274 <strlen>
   20f7c:	10800044 	addi	r2,r2,1
   20f80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   20f84:	00000d06 	br	20fbc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   20f88:	e0bffc17 	ldw	r2,-16(fp)
   20f8c:	10800217 	ldw	r2,8(r2)
   20f90:	e0fffd17 	ldw	r3,-12(fp)
   20f94:	180d883a 	mov	r6,r3
   20f98:	e17ffe17 	ldw	r5,-8(fp)
   20f9c:	1009883a 	mov	r4,r2
   20fa0:	00211f80 	call	211f8 <memcmp>
   20fa4:	1000021e 	bne	r2,zero,20fb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   20fa8:	e0bffc17 	ldw	r2,-16(fp)
   20fac:	00000706 	br	20fcc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   20fb0:	e0bffc17 	ldw	r2,-16(fp)
   20fb4:	10800017 	ldw	r2,0(r2)
   20fb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   20fbc:	e0fffc17 	ldw	r3,-16(fp)
   20fc0:	e0bfff17 	ldw	r2,-4(fp)
   20fc4:	18bff01e 	bne	r3,r2,20f88 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   20fc8:	0005883a 	mov	r2,zero
}
   20fcc:	e037883a 	mov	sp,fp
   20fd0:	dfc00117 	ldw	ra,4(sp)
   20fd4:	df000017 	ldw	fp,0(sp)
   20fd8:	dec00204 	addi	sp,sp,8
   20fdc:	f800283a 	ret

00020fe0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   20fe0:	defffb04 	addi	sp,sp,-20
   20fe4:	dfc00415 	stw	ra,16(sp)
   20fe8:	df000315 	stw	fp,12(sp)
   20fec:	df000304 	addi	fp,sp,12
   20ff0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   20ff4:	d0a00017 	ldw	r2,-32768(gp)
   20ff8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   20ffc:	00003106 	br	210c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   21000:	e0bffd17 	ldw	r2,-12(fp)
   21004:	10800217 	ldw	r2,8(r2)
   21008:	1009883a 	mov	r4,r2
   2100c:	00212740 	call	21274 <strlen>
   21010:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   21014:	e0bffd17 	ldw	r2,-12(fp)
   21018:	10c00217 	ldw	r3,8(r2)
   2101c:	e0bffe17 	ldw	r2,-8(fp)
   21020:	10bfffc4 	addi	r2,r2,-1
   21024:	1885883a 	add	r2,r3,r2
   21028:	10800003 	ldbu	r2,0(r2)
   2102c:	10803fcc 	andi	r2,r2,255
   21030:	1080201c 	xori	r2,r2,128
   21034:	10bfe004 	addi	r2,r2,-128
   21038:	10800bd8 	cmpnei	r2,r2,47
   2103c:	1000031e 	bne	r2,zero,2104c <alt_find_file+0x6c>
    {
      len -= 1;
   21040:	e0bffe17 	ldw	r2,-8(fp)
   21044:	10bfffc4 	addi	r2,r2,-1
   21048:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2104c:	e0bffe17 	ldw	r2,-8(fp)
   21050:	e0ffff17 	ldw	r3,-4(fp)
   21054:	1885883a 	add	r2,r3,r2
   21058:	10800003 	ldbu	r2,0(r2)
   2105c:	10803fcc 	andi	r2,r2,255
   21060:	1080201c 	xori	r2,r2,128
   21064:	10bfe004 	addi	r2,r2,-128
   21068:	10800be0 	cmpeqi	r2,r2,47
   2106c:	1000081e 	bne	r2,zero,21090 <alt_find_file+0xb0>
   21070:	e0bffe17 	ldw	r2,-8(fp)
   21074:	e0ffff17 	ldw	r3,-4(fp)
   21078:	1885883a 	add	r2,r3,r2
   2107c:	10800003 	ldbu	r2,0(r2)
   21080:	10803fcc 	andi	r2,r2,255
   21084:	1080201c 	xori	r2,r2,128
   21088:	10bfe004 	addi	r2,r2,-128
   2108c:	10000a1e 	bne	r2,zero,210b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   21090:	e0bffd17 	ldw	r2,-12(fp)
   21094:	10800217 	ldw	r2,8(r2)
   21098:	e0fffe17 	ldw	r3,-8(fp)
   2109c:	180d883a 	mov	r6,r3
   210a0:	e17fff17 	ldw	r5,-4(fp)
   210a4:	1009883a 	mov	r4,r2
   210a8:	00211f80 	call	211f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   210ac:	1000021e 	bne	r2,zero,210b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   210b0:	e0bffd17 	ldw	r2,-12(fp)
   210b4:	00000706 	br	210d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   210b8:	e0bffd17 	ldw	r2,-12(fp)
   210bc:	10800017 	ldw	r2,0(r2)
   210c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   210c4:	e0fffd17 	ldw	r3,-12(fp)
   210c8:	d0a00004 	addi	r2,gp,-32768
   210cc:	18bfcc1e 	bne	r3,r2,21000 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   210d0:	0005883a 	mov	r2,zero
}
   210d4:	e037883a 	mov	sp,fp
   210d8:	dfc00117 	ldw	ra,4(sp)
   210dc:	df000017 	ldw	fp,0(sp)
   210e0:	dec00204 	addi	sp,sp,8
   210e4:	f800283a 	ret

000210e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   210e8:	defffa04 	addi	sp,sp,-24
   210ec:	dfc00515 	stw	ra,20(sp)
   210f0:	df000415 	stw	fp,16(sp)
   210f4:	dc000315 	stw	r16,12(sp)
   210f8:	df000404 	addi	fp,sp,16
   210fc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   21100:	00bffa04 	movi	r2,-24
   21104:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   21108:	e03ffc15 	stw	zero,-16(fp)
   2110c:	00001d06 	br	21184 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   21110:	040000b4 	movhi	r16,2
   21114:	84061004 	addi	r16,r16,6208
   21118:	e0bffc17 	ldw	r2,-16(fp)
   2111c:	01400304 	movi	r5,12
   21120:	1009883a 	mov	r4,r2
   21124:	00217580 	call	21758 <__mulsi3>
   21128:	8085883a 	add	r2,r16,r2
   2112c:	10800017 	ldw	r2,0(r2)
   21130:	1000111e 	bne	r2,zero,21178 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   21134:	040000b4 	movhi	r16,2
   21138:	84061004 	addi	r16,r16,6208
   2113c:	e0bffc17 	ldw	r2,-16(fp)
   21140:	01400304 	movi	r5,12
   21144:	1009883a 	mov	r4,r2
   21148:	00217580 	call	21758 <__mulsi3>
   2114c:	8085883a 	add	r2,r16,r2
   21150:	e0fffe17 	ldw	r3,-8(fp)
   21154:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   21158:	d0e00417 	ldw	r3,-32752(gp)
   2115c:	e0bffc17 	ldw	r2,-16(fp)
   21160:	1880020e 	bge	r3,r2,2116c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   21164:	e0bffc17 	ldw	r2,-16(fp)
   21168:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   2116c:	e0bffc17 	ldw	r2,-16(fp)
   21170:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   21174:	00000606 	br	21190 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   21178:	e0bffc17 	ldw	r2,-16(fp)
   2117c:	10800044 	addi	r2,r2,1
   21180:	e0bffc15 	stw	r2,-16(fp)
   21184:	e0bffc17 	ldw	r2,-16(fp)
   21188:	10800810 	cmplti	r2,r2,32
   2118c:	103fe01e 	bne	r2,zero,21110 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   21190:	e0bffd17 	ldw	r2,-12(fp)
}
   21194:	e6ffff04 	addi	sp,fp,-4
   21198:	dfc00217 	ldw	ra,8(sp)
   2119c:	df000117 	ldw	fp,4(sp)
   211a0:	dc000017 	ldw	r16,0(sp)
   211a4:	dec00304 	addi	sp,sp,12
   211a8:	f800283a 	ret

000211ac <atexit>:
   211ac:	200b883a 	mov	r5,r4
   211b0:	000f883a 	mov	r7,zero
   211b4:	000d883a 	mov	r6,zero
   211b8:	0009883a 	mov	r4,zero
   211bc:	002130c1 	jmpi	2130c <__register_exitproc>

000211c0 <exit>:
   211c0:	defffe04 	addi	sp,sp,-8
   211c4:	000b883a 	mov	r5,zero
   211c8:	dc000015 	stw	r16,0(sp)
   211cc:	dfc00115 	stw	ra,4(sp)
   211d0:	2021883a 	mov	r16,r4
   211d4:	00214240 	call	21424 <__call_exitprocs>
   211d8:	008000b4 	movhi	r2,2
   211dc:	10877f04 	addi	r2,r2,7676
   211e0:	11000017 	ldw	r4,0(r2)
   211e4:	20800f17 	ldw	r2,60(r4)
   211e8:	10000126 	beq	r2,zero,211f0 <exit+0x30>
   211ec:	103ee83a 	callr	r2
   211f0:	8009883a 	mov	r4,r16
   211f4:	00217800 	call	21780 <_exit>

000211f8 <memcmp>:
   211f8:	01c000c4 	movi	r7,3
   211fc:	3980192e 	bgeu	r7,r6,21264 <memcmp+0x6c>
   21200:	2144b03a 	or	r2,r4,r5
   21204:	11c4703a 	and	r2,r2,r7
   21208:	10000f26 	beq	r2,zero,21248 <memcmp+0x50>
   2120c:	20800003 	ldbu	r2,0(r4)
   21210:	28c00003 	ldbu	r3,0(r5)
   21214:	10c0151e 	bne	r2,r3,2126c <memcmp+0x74>
   21218:	31bfff84 	addi	r6,r6,-2
   2121c:	01ffffc4 	movi	r7,-1
   21220:	00000406 	br	21234 <memcmp+0x3c>
   21224:	20800003 	ldbu	r2,0(r4)
   21228:	28c00003 	ldbu	r3,0(r5)
   2122c:	31bfffc4 	addi	r6,r6,-1
   21230:	10c00e1e 	bne	r2,r3,2126c <memcmp+0x74>
   21234:	21000044 	addi	r4,r4,1
   21238:	29400044 	addi	r5,r5,1
   2123c:	31fff91e 	bne	r6,r7,21224 <memcmp+0x2c>
   21240:	0005883a 	mov	r2,zero
   21244:	f800283a 	ret
   21248:	20c00017 	ldw	r3,0(r4)
   2124c:	28800017 	ldw	r2,0(r5)
   21250:	18bfee1e 	bne	r3,r2,2120c <memcmp+0x14>
   21254:	31bfff04 	addi	r6,r6,-4
   21258:	21000104 	addi	r4,r4,4
   2125c:	29400104 	addi	r5,r5,4
   21260:	39bff936 	bltu	r7,r6,21248 <memcmp+0x50>
   21264:	303fe91e 	bne	r6,zero,2120c <memcmp+0x14>
   21268:	003ff506 	br	21240 <memcmp+0x48>
   2126c:	10c5c83a 	sub	r2,r2,r3
   21270:	f800283a 	ret

00021274 <strlen>:
   21274:	208000cc 	andi	r2,r4,3
   21278:	10002026 	beq	r2,zero,212fc <strlen+0x88>
   2127c:	20800007 	ldb	r2,0(r4)
   21280:	10002026 	beq	r2,zero,21304 <strlen+0x90>
   21284:	2005883a 	mov	r2,r4
   21288:	00000206 	br	21294 <strlen+0x20>
   2128c:	10c00007 	ldb	r3,0(r2)
   21290:	18001826 	beq	r3,zero,212f4 <strlen+0x80>
   21294:	10800044 	addi	r2,r2,1
   21298:	10c000cc 	andi	r3,r2,3
   2129c:	183ffb1e 	bne	r3,zero,2128c <strlen+0x18>
   212a0:	10c00017 	ldw	r3,0(r2)
   212a4:	01ffbff4 	movhi	r7,65279
   212a8:	39ffbfc4 	addi	r7,r7,-257
   212ac:	00ca303a 	nor	r5,zero,r3
   212b0:	01a02074 	movhi	r6,32897
   212b4:	19c7883a 	add	r3,r3,r7
   212b8:	31a02004 	addi	r6,r6,-32640
   212bc:	1946703a 	and	r3,r3,r5
   212c0:	1986703a 	and	r3,r3,r6
   212c4:	1800091e 	bne	r3,zero,212ec <strlen+0x78>
   212c8:	10800104 	addi	r2,r2,4
   212cc:	10c00017 	ldw	r3,0(r2)
   212d0:	19cb883a 	add	r5,r3,r7
   212d4:	00c6303a 	nor	r3,zero,r3
   212d8:	28c6703a 	and	r3,r5,r3
   212dc:	1986703a 	and	r3,r3,r6
   212e0:	183ff926 	beq	r3,zero,212c8 <strlen+0x54>
   212e4:	00000106 	br	212ec <strlen+0x78>
   212e8:	10800044 	addi	r2,r2,1
   212ec:	10c00007 	ldb	r3,0(r2)
   212f0:	183ffd1e 	bne	r3,zero,212e8 <strlen+0x74>
   212f4:	1105c83a 	sub	r2,r2,r4
   212f8:	f800283a 	ret
   212fc:	2005883a 	mov	r2,r4
   21300:	003fe706 	br	212a0 <strlen+0x2c>
   21304:	0005883a 	mov	r2,zero
   21308:	f800283a 	ret

0002130c <__register_exitproc>:
   2130c:	defffa04 	addi	sp,sp,-24
   21310:	dc000315 	stw	r16,12(sp)
   21314:	040000b4 	movhi	r16,2
   21318:	84077f04 	addi	r16,r16,7676
   2131c:	80c00017 	ldw	r3,0(r16)
   21320:	dc400415 	stw	r17,16(sp)
   21324:	dfc00515 	stw	ra,20(sp)
   21328:	18805217 	ldw	r2,328(r3)
   2132c:	2023883a 	mov	r17,r4
   21330:	10003726 	beq	r2,zero,21410 <__register_exitproc+0x104>
   21334:	10c00117 	ldw	r3,4(r2)
   21338:	010007c4 	movi	r4,31
   2133c:	20c00e16 	blt	r4,r3,21378 <__register_exitproc+0x6c>
   21340:	1a000044 	addi	r8,r3,1
   21344:	8800221e 	bne	r17,zero,213d0 <__register_exitproc+0xc4>
   21348:	18c00084 	addi	r3,r3,2
   2134c:	18c7883a 	add	r3,r3,r3
   21350:	18c7883a 	add	r3,r3,r3
   21354:	12000115 	stw	r8,4(r2)
   21358:	10c7883a 	add	r3,r2,r3
   2135c:	19400015 	stw	r5,0(r3)
   21360:	0005883a 	mov	r2,zero
   21364:	dfc00517 	ldw	ra,20(sp)
   21368:	dc400417 	ldw	r17,16(sp)
   2136c:	dc000317 	ldw	r16,12(sp)
   21370:	dec00604 	addi	sp,sp,24
   21374:	f800283a 	ret
   21378:	00800034 	movhi	r2,0
   2137c:	10800004 	addi	r2,r2,0
   21380:	10002626 	beq	r2,zero,2141c <__register_exitproc+0x110>
   21384:	01006404 	movi	r4,400
   21388:	d9400015 	stw	r5,0(sp)
   2138c:	d9800115 	stw	r6,4(sp)
   21390:	d9c00215 	stw	r7,8(sp)
   21394:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   21398:	d9400017 	ldw	r5,0(sp)
   2139c:	d9800117 	ldw	r6,4(sp)
   213a0:	d9c00217 	ldw	r7,8(sp)
   213a4:	10001d26 	beq	r2,zero,2141c <__register_exitproc+0x110>
   213a8:	81000017 	ldw	r4,0(r16)
   213ac:	10000115 	stw	zero,4(r2)
   213b0:	02000044 	movi	r8,1
   213b4:	22405217 	ldw	r9,328(r4)
   213b8:	0007883a 	mov	r3,zero
   213bc:	12400015 	stw	r9,0(r2)
   213c0:	20805215 	stw	r2,328(r4)
   213c4:	10006215 	stw	zero,392(r2)
   213c8:	10006315 	stw	zero,396(r2)
   213cc:	883fde26 	beq	r17,zero,21348 <__register_exitproc+0x3c>
   213d0:	18c9883a 	add	r4,r3,r3
   213d4:	2109883a 	add	r4,r4,r4
   213d8:	1109883a 	add	r4,r2,r4
   213dc:	21802215 	stw	r6,136(r4)
   213e0:	01800044 	movi	r6,1
   213e4:	12406217 	ldw	r9,392(r2)
   213e8:	30cc983a 	sll	r6,r6,r3
   213ec:	4992b03a 	or	r9,r9,r6
   213f0:	12406215 	stw	r9,392(r2)
   213f4:	21c04215 	stw	r7,264(r4)
   213f8:	01000084 	movi	r4,2
   213fc:	893fd21e 	bne	r17,r4,21348 <__register_exitproc+0x3c>
   21400:	11006317 	ldw	r4,396(r2)
   21404:	218cb03a 	or	r6,r4,r6
   21408:	11806315 	stw	r6,396(r2)
   2140c:	003fce06 	br	21348 <__register_exitproc+0x3c>
   21410:	18805304 	addi	r2,r3,332
   21414:	18805215 	stw	r2,328(r3)
   21418:	003fc606 	br	21334 <__register_exitproc+0x28>
   2141c:	00bfffc4 	movi	r2,-1
   21420:	003fd006 	br	21364 <__register_exitproc+0x58>

00021424 <__call_exitprocs>:
   21424:	defff504 	addi	sp,sp,-44
   21428:	df000915 	stw	fp,36(sp)
   2142c:	dd400615 	stw	r21,24(sp)
   21430:	dc800315 	stw	r18,12(sp)
   21434:	dfc00a15 	stw	ra,40(sp)
   21438:	ddc00815 	stw	r23,32(sp)
   2143c:	dd800715 	stw	r22,28(sp)
   21440:	dd000515 	stw	r20,20(sp)
   21444:	dcc00415 	stw	r19,16(sp)
   21448:	dc400215 	stw	r17,8(sp)
   2144c:	dc000115 	stw	r16,4(sp)
   21450:	d9000015 	stw	r4,0(sp)
   21454:	2839883a 	mov	fp,r5
   21458:	04800044 	movi	r18,1
   2145c:	057fffc4 	movi	r21,-1
   21460:	008000b4 	movhi	r2,2
   21464:	10877f04 	addi	r2,r2,7676
   21468:	12000017 	ldw	r8,0(r2)
   2146c:	45005217 	ldw	r20,328(r8)
   21470:	44c05204 	addi	r19,r8,328
   21474:	a0001c26 	beq	r20,zero,214e8 <__call_exitprocs+0xc4>
   21478:	a0800117 	ldw	r2,4(r20)
   2147c:	15ffffc4 	addi	r23,r2,-1
   21480:	b8000d16 	blt	r23,zero,214b8 <__call_exitprocs+0x94>
   21484:	14000044 	addi	r16,r2,1
   21488:	8421883a 	add	r16,r16,r16
   2148c:	8421883a 	add	r16,r16,r16
   21490:	84402004 	addi	r17,r16,128
   21494:	a463883a 	add	r17,r20,r17
   21498:	a421883a 	add	r16,r20,r16
   2149c:	e0001e26 	beq	fp,zero,21518 <__call_exitprocs+0xf4>
   214a0:	80804017 	ldw	r2,256(r16)
   214a4:	e0801c26 	beq	fp,r2,21518 <__call_exitprocs+0xf4>
   214a8:	bdffffc4 	addi	r23,r23,-1
   214ac:	843fff04 	addi	r16,r16,-4
   214b0:	8c7fff04 	addi	r17,r17,-4
   214b4:	bd7ff91e 	bne	r23,r21,2149c <__call_exitprocs+0x78>
   214b8:	00800034 	movhi	r2,0
   214bc:	10800004 	addi	r2,r2,0
   214c0:	10000926 	beq	r2,zero,214e8 <__call_exitprocs+0xc4>
   214c4:	a0800117 	ldw	r2,4(r20)
   214c8:	1000301e 	bne	r2,zero,2158c <__call_exitprocs+0x168>
   214cc:	a0800017 	ldw	r2,0(r20)
   214d0:	10003226 	beq	r2,zero,2159c <__call_exitprocs+0x178>
   214d4:	a009883a 	mov	r4,r20
   214d8:	98800015 	stw	r2,0(r19)
   214dc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   214e0:	9d000017 	ldw	r20,0(r19)
   214e4:	a03fe41e 	bne	r20,zero,21478 <__call_exitprocs+0x54>
   214e8:	dfc00a17 	ldw	ra,40(sp)
   214ec:	df000917 	ldw	fp,36(sp)
   214f0:	ddc00817 	ldw	r23,32(sp)
   214f4:	dd800717 	ldw	r22,28(sp)
   214f8:	dd400617 	ldw	r21,24(sp)
   214fc:	dd000517 	ldw	r20,20(sp)
   21500:	dcc00417 	ldw	r19,16(sp)
   21504:	dc800317 	ldw	r18,12(sp)
   21508:	dc400217 	ldw	r17,8(sp)
   2150c:	dc000117 	ldw	r16,4(sp)
   21510:	dec00b04 	addi	sp,sp,44
   21514:	f800283a 	ret
   21518:	a0800117 	ldw	r2,4(r20)
   2151c:	80c00017 	ldw	r3,0(r16)
   21520:	10bfffc4 	addi	r2,r2,-1
   21524:	15c01426 	beq	r2,r23,21578 <__call_exitprocs+0x154>
   21528:	80000015 	stw	zero,0(r16)
   2152c:	183fde26 	beq	r3,zero,214a8 <__call_exitprocs+0x84>
   21530:	95c8983a 	sll	r4,r18,r23
   21534:	a0806217 	ldw	r2,392(r20)
   21538:	a5800117 	ldw	r22,4(r20)
   2153c:	2084703a 	and	r2,r4,r2
   21540:	10000b26 	beq	r2,zero,21570 <__call_exitprocs+0x14c>
   21544:	a0806317 	ldw	r2,396(r20)
   21548:	2088703a 	and	r4,r4,r2
   2154c:	20000c1e 	bne	r4,zero,21580 <__call_exitprocs+0x15c>
   21550:	89400017 	ldw	r5,0(r17)
   21554:	d9000017 	ldw	r4,0(sp)
   21558:	183ee83a 	callr	r3
   2155c:	a0800117 	ldw	r2,4(r20)
   21560:	15bfbf1e 	bne	r2,r22,21460 <__call_exitprocs+0x3c>
   21564:	98800017 	ldw	r2,0(r19)
   21568:	153fcf26 	beq	r2,r20,214a8 <__call_exitprocs+0x84>
   2156c:	003fbc06 	br	21460 <__call_exitprocs+0x3c>
   21570:	183ee83a 	callr	r3
   21574:	003ff906 	br	2155c <__call_exitprocs+0x138>
   21578:	a5c00115 	stw	r23,4(r20)
   2157c:	003feb06 	br	2152c <__call_exitprocs+0x108>
   21580:	89000017 	ldw	r4,0(r17)
   21584:	183ee83a 	callr	r3
   21588:	003ff406 	br	2155c <__call_exitprocs+0x138>
   2158c:	a0800017 	ldw	r2,0(r20)
   21590:	a027883a 	mov	r19,r20
   21594:	1029883a 	mov	r20,r2
   21598:	003fb606 	br	21474 <__call_exitprocs+0x50>
   2159c:	0005883a 	mov	r2,zero
   215a0:	003ffb06 	br	21590 <__call_exitprocs+0x16c>

000215a4 <__divsi3>:
   215a4:	20001b16 	blt	r4,zero,21614 <__divsi3+0x70>
   215a8:	000f883a 	mov	r7,zero
   215ac:	28001616 	blt	r5,zero,21608 <__divsi3+0x64>
   215b0:	200d883a 	mov	r6,r4
   215b4:	29001a2e 	bgeu	r5,r4,21620 <__divsi3+0x7c>
   215b8:	00800804 	movi	r2,32
   215bc:	00c00044 	movi	r3,1
   215c0:	00000106 	br	215c8 <__divsi3+0x24>
   215c4:	10000d26 	beq	r2,zero,215fc <__divsi3+0x58>
   215c8:	294b883a 	add	r5,r5,r5
   215cc:	10bfffc4 	addi	r2,r2,-1
   215d0:	18c7883a 	add	r3,r3,r3
   215d4:	293ffb36 	bltu	r5,r4,215c4 <__divsi3+0x20>
   215d8:	0005883a 	mov	r2,zero
   215dc:	18000726 	beq	r3,zero,215fc <__divsi3+0x58>
   215e0:	0005883a 	mov	r2,zero
   215e4:	31400236 	bltu	r6,r5,215f0 <__divsi3+0x4c>
   215e8:	314dc83a 	sub	r6,r6,r5
   215ec:	10c4b03a 	or	r2,r2,r3
   215f0:	1806d07a 	srli	r3,r3,1
   215f4:	280ad07a 	srli	r5,r5,1
   215f8:	183ffa1e 	bne	r3,zero,215e4 <__divsi3+0x40>
   215fc:	38000126 	beq	r7,zero,21604 <__divsi3+0x60>
   21600:	0085c83a 	sub	r2,zero,r2
   21604:	f800283a 	ret
   21608:	014bc83a 	sub	r5,zero,r5
   2160c:	39c0005c 	xori	r7,r7,1
   21610:	003fe706 	br	215b0 <__divsi3+0xc>
   21614:	0109c83a 	sub	r4,zero,r4
   21618:	01c00044 	movi	r7,1
   2161c:	003fe306 	br	215ac <__divsi3+0x8>
   21620:	00c00044 	movi	r3,1
   21624:	003fee06 	br	215e0 <__divsi3+0x3c>

00021628 <__modsi3>:
   21628:	20001716 	blt	r4,zero,21688 <__modsi3+0x60>
   2162c:	000f883a 	mov	r7,zero
   21630:	2005883a 	mov	r2,r4
   21634:	28001216 	blt	r5,zero,21680 <__modsi3+0x58>
   21638:	2900162e 	bgeu	r5,r4,21694 <__modsi3+0x6c>
   2163c:	01800804 	movi	r6,32
   21640:	00c00044 	movi	r3,1
   21644:	00000106 	br	2164c <__modsi3+0x24>
   21648:	30000a26 	beq	r6,zero,21674 <__modsi3+0x4c>
   2164c:	294b883a 	add	r5,r5,r5
   21650:	31bfffc4 	addi	r6,r6,-1
   21654:	18c7883a 	add	r3,r3,r3
   21658:	293ffb36 	bltu	r5,r4,21648 <__modsi3+0x20>
   2165c:	18000526 	beq	r3,zero,21674 <__modsi3+0x4c>
   21660:	1806d07a 	srli	r3,r3,1
   21664:	11400136 	bltu	r2,r5,2166c <__modsi3+0x44>
   21668:	1145c83a 	sub	r2,r2,r5
   2166c:	280ad07a 	srli	r5,r5,1
   21670:	183ffb1e 	bne	r3,zero,21660 <__modsi3+0x38>
   21674:	38000126 	beq	r7,zero,2167c <__modsi3+0x54>
   21678:	0085c83a 	sub	r2,zero,r2
   2167c:	f800283a 	ret
   21680:	014bc83a 	sub	r5,zero,r5
   21684:	003fec06 	br	21638 <__modsi3+0x10>
   21688:	0109c83a 	sub	r4,zero,r4
   2168c:	01c00044 	movi	r7,1
   21690:	003fe706 	br	21630 <__modsi3+0x8>
   21694:	00c00044 	movi	r3,1
   21698:	003ff106 	br	21660 <__modsi3+0x38>

0002169c <__udivsi3>:
   2169c:	200d883a 	mov	r6,r4
   216a0:	2900152e 	bgeu	r5,r4,216f8 <__udivsi3+0x5c>
   216a4:	28001416 	blt	r5,zero,216f8 <__udivsi3+0x5c>
   216a8:	00800804 	movi	r2,32
   216ac:	00c00044 	movi	r3,1
   216b0:	00000206 	br	216bc <__udivsi3+0x20>
   216b4:	10000e26 	beq	r2,zero,216f0 <__udivsi3+0x54>
   216b8:	28000516 	blt	r5,zero,216d0 <__udivsi3+0x34>
   216bc:	294b883a 	add	r5,r5,r5
   216c0:	10bfffc4 	addi	r2,r2,-1
   216c4:	18c7883a 	add	r3,r3,r3
   216c8:	293ffa36 	bltu	r5,r4,216b4 <__udivsi3+0x18>
   216cc:	18000826 	beq	r3,zero,216f0 <__udivsi3+0x54>
   216d0:	0005883a 	mov	r2,zero
   216d4:	31400236 	bltu	r6,r5,216e0 <__udivsi3+0x44>
   216d8:	314dc83a 	sub	r6,r6,r5
   216dc:	10c4b03a 	or	r2,r2,r3
   216e0:	1806d07a 	srli	r3,r3,1
   216e4:	280ad07a 	srli	r5,r5,1
   216e8:	183ffa1e 	bne	r3,zero,216d4 <__udivsi3+0x38>
   216ec:	f800283a 	ret
   216f0:	0005883a 	mov	r2,zero
   216f4:	f800283a 	ret
   216f8:	00c00044 	movi	r3,1
   216fc:	003ff406 	br	216d0 <__udivsi3+0x34>

00021700 <__umodsi3>:
   21700:	2005883a 	mov	r2,r4
   21704:	2900122e 	bgeu	r5,r4,21750 <__umodsi3+0x50>
   21708:	28001116 	blt	r5,zero,21750 <__umodsi3+0x50>
   2170c:	01800804 	movi	r6,32
   21710:	00c00044 	movi	r3,1
   21714:	00000206 	br	21720 <__umodsi3+0x20>
   21718:	30000c26 	beq	r6,zero,2174c <__umodsi3+0x4c>
   2171c:	28000516 	blt	r5,zero,21734 <__umodsi3+0x34>
   21720:	294b883a 	add	r5,r5,r5
   21724:	31bfffc4 	addi	r6,r6,-1
   21728:	18c7883a 	add	r3,r3,r3
   2172c:	293ffa36 	bltu	r5,r4,21718 <__umodsi3+0x18>
   21730:	18000626 	beq	r3,zero,2174c <__umodsi3+0x4c>
   21734:	1806d07a 	srli	r3,r3,1
   21738:	11400136 	bltu	r2,r5,21740 <__umodsi3+0x40>
   2173c:	1145c83a 	sub	r2,r2,r5
   21740:	280ad07a 	srli	r5,r5,1
   21744:	183ffb1e 	bne	r3,zero,21734 <__umodsi3+0x34>
   21748:	f800283a 	ret
   2174c:	f800283a 	ret
   21750:	00c00044 	movi	r3,1
   21754:	003ff706 	br	21734 <__umodsi3+0x34>

00021758 <__mulsi3>:
   21758:	0005883a 	mov	r2,zero
   2175c:	20000726 	beq	r4,zero,2177c <__mulsi3+0x24>
   21760:	20c0004c 	andi	r3,r4,1
   21764:	2008d07a 	srli	r4,r4,1
   21768:	18000126 	beq	r3,zero,21770 <__mulsi3+0x18>
   2176c:	1145883a 	add	r2,r2,r5
   21770:	294b883a 	add	r5,r5,r5
   21774:	203ffa1e 	bne	r4,zero,21760 <__mulsi3+0x8>
   21778:	f800283a 	ret
   2177c:	f800283a 	ret

00021780 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   21780:	defffd04 	addi	sp,sp,-12
   21784:	df000215 	stw	fp,8(sp)
   21788:	df000204 	addi	fp,sp,8
   2178c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   21790:	0001883a 	nop
   21794:	e0bfff17 	ldw	r2,-4(fp)
   21798:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2179c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   217a0:	10000226 	beq	r2,zero,217ac <_exit+0x2c>
    ALT_SIM_FAIL();
   217a4:	002af070 	cmpltui	zero,zero,43969
   217a8:	00000106 	br	217b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   217ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   217b0:	003fff06 	br	217b0 <_exit+0x30>
